--
-- testsuite.lua
--
-- Premake build script for test
--
-- Copyright (c) 2004-2008, Applied Informatics Software Engineering GmbH.
-- and Contributors.
--
-- Permission is hereby granted, free of charge, to any person or organization
-- obtaining a copy of the software and accompanying documentation covered by
-- this license (the "Software") to use, reproduce, display, distribute,
-- execute, and transmit the Software, and to prepare derivative works of the
-- Software, and to permit third-parties to whom the Software is furnished to
-- do so, all subject to the following:
--
-- The copyright notices in the Software and this entire statement, including
-- the above license grant, this restriction and the following disclaimer,
-- must be included in all copies of the Software, in whole or in part, and
-- all derivative works of the Software, unless such copies or derivative
-- works are solely in the form of machine-executable object code generated by
-- a source language processor.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
-- SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
-- FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
-- ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
-- DEALINGS IN THE SOFTWARE.
--

package.kind = "winexe"
package.language = "c++"
package.objdir = "../obj/tests"
package.bindir = "../../bin"

if (options["target"] == "vs2003") then
	package.name = "TestSuite_vs71"
	package.links = { "Foundation_vs71"}
elseif (options["target"] == "vs2005") then
	package.name = "TestSuite_vs80"
	package.links = { "Foundation_vs80"}
elseif (options["target"] == "vs2008") then
	package.name = "TestSuite_vs90"
	package.links = { "Foundation_vs90"}
else 
	package.name = "TestSuite"
	package.links = { "Foundation"}
end

package.config["debug_shared"].target= package.name .."d"
package.config["release_shared"].target= package.name 
package.config["debug_static"].target= package.name .. "mtd"
package.config["release_static"].target= package.name .. "mt"


if (not windows) then

    table.insert(package.config["debug_shared"].buildoptions, "-shared")
    table.insert(package.config["release_shared"].buildoptions, "-shared")

    -- for cygwin
    if(not linux) then
        table.insert(package.config["release_shared"].buildoptions, "-mwindows")
        table.insert(package.config["debug_shared"].buildoptions, "-mwindows")
    end

end

package.config["debug_shared"].buildflags = { "no-main"}
package.config["debug_static"].buildflags = { "no-main"}
package.config["release_shared"].buildflags = { "no-main", "optimize" }
package.config["release_static"].buildflags = { "no-main", "optimize" }

package.includepaths =
{
	"../include",
	"../../CppUnit/include",
	"../../CppUnit/WinTestRunner/include"
}

package.libpaths = { "../../Lib" }

if (windows) then
    table.insert(package.config["debug_shared"].links, "CppUnitd")
    table.insert(package.config["debug_shared"].links, "WinTestRunnerd")
	
    table.insert(package.config["release_shared"].links, "CppUnit")
    table.insert(package.config["release_shared"].links, "WinTestRunner")
    
	table.insert(package.config["debug_static"].links, "CppUnitmtd")
	table.insert(package.config["debug_static"].links, "WinTestRunnermtd")
	table.insert(package.config["debug_static"].links, "iphlpapi")
	table.insert(package.config["debug_static"].links, "winmm")
    
	table.insert(package.config["release_static"].links, "CppUnitmt")
	table.insert(package.config["release_static"].links, "WinTestRunnermt")
	table.insert(package.config["release_static"].links, "iphlpapi")
	table.insert(package.config["release_static"].links, "winmm")
end

package.defines =
{
	"_CRT_SECURE_NO_DEPRECATE",
	"_WINDOWS",
	"WINVER=0x0500",
}

table.insert(package.config["debug_static"].defines, "POCO_STATIC")
table.insert(package.config["release_static"].defines, "POCO_STATIC")

table.insert(package.config["debug_shared"].defines, "_AFXDLL")
table.insert(package.config["release_shared"].defines, "_AFXDLL")
table.insert(package.config["debug_static"].defines, "_AFXDLL")
table.insert(package.config["release_static"].defines, "_AFXDLL")

table.insert(package.config["debug_shared"].defines, "_DEBUG")
table.insert(package.config["debug_static"].defines, "_DEBUG")

table.insert(package.config["release_shared"].defines, "NDEBUG")
table.insert(package.config["release_static"].defines, "NDEBUG")

--table.insert(package.config["debug_static"].buildoptions, " ../../CppUnit/WinTestRunner/obj/release_static/WinTestRunner.res")
--table.insert(package.config["release_static"].buildoptions, " ..\..\CppUnit\WinTestRunner\obj\release_static\WinTestRunner.res")

package.files =
{
    matchrecursive("../testsuite/src/*.h"),
    matchrecursive("../testsuite/src/*.cpp"),
	--matchfiles("../../CppUnit/WinTestRunner/obj/release_static/WinTestRunner.res")
--table.insert(package.config["release_static"].buildoptions, " ..\..\CppUnit\WinTestRunner\obj\release_static\WinTestRunner.res")
}

table.insert(package.config["debug_static"].files, "../../CppUnit/WinTestRunner/obj/debug_static/WinTestRunner.res")
table.insert(package.config["release_static"].files, "../../CppUnit/WinTestRunner/obj/release_static/WinTestRunner.res")


package.excludes = {
    matchrecursive("../testsuite/src/TestApp.cpp")
}

if (linux) then
    table.insert(package.links, "pthread")
end

if (windows) then
    table.insert(package.defines, "WIN32")
end

-- Output is placed in a directory named for the target toolset.
-- package.path = options["target"]
package.path = "./"



if (not options["enable-static-only"]) then
end
if (not options["enable-shared-only"]) then
    table.insert(package.config["debug_static"].defines, "POCO_STATIC")
    table.insert(package.config["release_static"].defines, "POCO_STATIC")
end
