//
// Channel.h
//
// $Id: //poco/Main/Data/include/Poco/IO/Channel.h#1 $
//
// Library: IO
// Package: IO
// Module:  Channel
//
// Definition of the Channel class.
//
// Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef IO_Channel_INCLUDED
#define IO_Channel_INCLUDED


#include "Poco/IO/IO.h"
#include "Poco/IO/AbstractChannel.h"


namespace Poco {
namespace IO {


template <class P, class C>
class Channel: public AbstractChannel
	/// The Channel class is implementation of AbstractChannel.
{
public:
	Channel(const std::string& name, const C& config): _channel(name, config)
		/// Creates the I/O channel.
	{
	}

	virtual ~Channel()
		/// Destroys the I/O channel.
	{
	}
		
	void init()
		/// Initializes the channel.
	{
		return _channel.init();
	}

	void reconfigure(const C& config)
		/// Initializes the channel.
	{
		return _channel.reconfigure(config);
	}

	void open()
		/// Opens the channel.
	{
		return _channel.open();
	}

	void close()
		/// Closes the channel.
	{
		return _channel.close();
	}

	char read()
		/// Reads one character from the channel.
	{
		return _channel.read();
	}

	int read(char* buffer, std::size_t length)
		/// Reads a string of characters from the channel.
	{
		return _channel.read(buffer, length);
	}

	std::string& read(std::string& buffer)
		/// Reads a string of characters from the channel.
	{
		return _channel.read(buffer);
	}

	int write(char c)
		/// Writes a character to the channel.
	{
		return _channel.write(c);
	}

	int write(const char* buffer, std::size_t length)
		/// Writes a string of characters to the channel.
	{
		return _channel.write(buffer, length);
	}

	int write(const std::string& data)
		/// Writes a string of characters to the channel.
	{
		return _channel.write(data);
	}

	const std::string& getName() const
		/// Returns the channel name.
	{
		return _channel.getName();
	}

private:
	Channel();
	Channel(const P&);
	const P& operator = (const P&);

	P _channel;
};


} } // namespace Poco::IO


#endif // IO_Channel_INCLUDED
