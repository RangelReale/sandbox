//
// AbstractChannel.h
//
// $Id: //poco/Main/Data/include/Poco/IO/AbstractChannel.h#1 $
//
// Library: IO
// Package: IO
// Module:  AbstractChannel
//
// Definition of the AbstractChannel class.
//
// Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef IO_AbstractChannel_INCLUDED
#define IO_AbstractChannel_INCLUDED


#include "Poco/IO/IO.h"
#include "Poco/RefCountedObject.h"


namespace Poco {
namespace IO {


class AbstractChannel: public Poco::RefCountedObject
	/// The AbstractChannel class provides methods for working with a hardware I/O channel.
{
public:

	virtual ~AbstractChannel()
		/// Destroys the abstract channel.
	{
	}
		
	virtual void init() = 0;
		/// Initializes the channel.

	virtual void open() = 0;
		/// Opens the channel.

	virtual void close() = 0;
		/// Closes the channel.

	virtual char read() = 0;
		/// Reads one character from the channel.

	virtual int read(char* buffer, std::size_t length) = 0;
		/// Reads a string of characters from the channel.

	virtual std::string& read(std::string& buffer) = 0;
		/// Reads a string of characters from the channel.

	virtual int write(char c) = 0;
		/// Writes a character to the channel.

	virtual int write(const char* buffer, std::size_t length) = 0;
		/// Writes a string of characters to the channel.

	virtual int write(const std::string& data) = 0;
		/// Writes a string of characters to the channel.

	virtual const std::string& getName() const = 0;
		/// Returns the channel name.
};


} } // namespace Poco::IO


#endif // IO_AbstractChannel_INCLUDED
