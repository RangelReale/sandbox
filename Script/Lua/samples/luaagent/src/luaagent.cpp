//
// luaagent.cpp
//
// $Id: //poco/Main/Script/Lua/samples/luaagent/src/luaagent.cpp#5 $
//
// This sample demonstrates the HTTPClientSession class.
//
// Copyright (c) 2005-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Script/Lua/Environment.h"
#include "Poco/Script/Lua/Persister.h"
#include "Poco/Net/StreamSocket.h"
#include "Poco/Net/SocketAddress.h"
#include <iostream>


using Poco::Script::Lua::Environment;
using Poco::Script::Lua::Persister;
using Poco::Net::StreamSocket;
using Poco::Net::SocketAddress;
using Poco::Exception;


int main(int argc, char** argv)
{
	try
	{
		std::vector<char> buffer;
		size_t counter = 1;
		Environment e;
		Persister p(e);

		e.clear();
		e.newTable();
		e.newTable();
		e.pushString("name");
		e.pushString("here");
		e.setTable(-3);
		e.pushString("counter");
		e.pushNumber(counter);
		e.setTable(-3);
		e.pushString("doHello");
		e.call("return function (a) print('hello from ' .. a.name .. ' world #' .. a.counter); end;");
		e.setTable(-3);
		p.persist(&buffer);

		StreamSocket ss;
		ss.connect(SocketAddress("localhost", 9977));
		ss.sendBytes(&buffer[0], buffer.size());
		ss.shutdownSend();

		ss.receiveBytes(&buffer[0], buffer.size());
		ss.close();

		Environment e2;
		Persister p2(e2);
		p2.unpersist(&buffer);
		e2.getField(-1, "doHello");
		e2.pushValue(-2);
		e2.call("", 1, 0);
	}
	catch (Exception& exc)
	{
		std::cerr << exc.displayText() << std::endl;
		return 1;
	}
	return 0;
}
