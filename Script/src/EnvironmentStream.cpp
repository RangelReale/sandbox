//
// EnvironmentStream.cpp
//
// $Id: //poco/Main/Foundation/src/EnvironmentStream.cpp#8 $
//
// Library: Script
// Package: Streams
// Module:  EnvironmentStream
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Script/EnvironmentStream.h"
#include "Poco/Exception.h"


namespace Poco {
namespace Script {


EnvironmentIOS::EnvironmentIOS(Environment& env, std::ios::openmode defaultMode):
	_buf(env),
	_defaultMode(defaultMode)
{
	poco_ios_init(&_buf);
}


EnvironmentIOS::~EnvironmentIOS()
{
	_buf.sync();
}


void EnvironmentIOS::open(Environment& env, std::ios::openmode mode)
{
	clear();
	_buf.open(env, mode | _defaultMode);
}


void EnvironmentIOS::close()
{
	//_buf.close();
	_buf.sync();
}


EnvironmentStreamBuf* EnvironmentIOS::rdbuf()
{
	return &_buf;
}


EnvironmentInputStream::EnvironmentInputStream(Environment& env, std::ios::openmode mode):
	EnvironmentIOS(env, std::ios::in),
	std::istream(&_buf)
{
	open(env, mode);
}


EnvironmentInputStream::~EnvironmentInputStream()
{
}


EnvironmentOutputStream::EnvironmentOutputStream(Environment& env, std::ios::openmode mode):
	EnvironmentIOS(env, std::ios::out),
	std::ostream(&_buf)
{
	open(env, mode);
}


EnvironmentOutputStream::~EnvironmentOutputStream()
{
}


EnvironmentStream::EnvironmentStream(Environment& env, std::ios::openmode mode):
	EnvironmentIOS(env, std::ios::in | std::ios::out),
	std::iostream(&_buf)
{
	open(env, mode);
}


EnvironmentStream::~EnvironmentStream()
{
}


} } // namespace Poco::Script
