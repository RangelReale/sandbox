//
// HidablePanel.cpp
//
// $Id: //poco/Main/WebWidgets/src/HidablePanel.cpp#4 $
//
// Library: WebWidgets
// Package: WebGUI
// Module:  HidablePanel
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/WebWidgets/HidablePanel.h"
#include "Poco/WebWidgets/XMLUtil.h"
#include "Poco/WebWidgets/Visitor.h"


namespace Poco {
namespace WebWidgets {


const std::string HidablePanel::FACTORY_ID("hidablePanel");
const std::string HidablePanel::XML_ON("on");
const std::string HidablePanel::XML_OFF("off");
const std::string HidablePanel::XML_TEXT("text");
const std::string HidablePanel::ATTR_INLINE("inline");


HidablePanel::HidablePanel(Poco::AutoPtr<Widget> ptr, const Poco::URI& expandedImage, const Poco::URI& notExpandedImage, const std::string& text, bool inlineMode):
	SimplePanel(ptr),
	_onImg(expandedImage),
	_offImg(notExpandedImage),
	_text(text),
	_inlineMode(inlineMode)
{
}


HidablePanel::HidablePanel(const Poco::XML::Element* pElem):
	SimplePanel(pElem),
	_onImg(pElem->getAttribute(XML_ON)),
	_offImg(pElem->getAttribute(XML_OFF)),
	_text(pElem->getAttribute(XML_TEXT)),
	_inlineMode(XMLUtil::getBoolAttr(pElem, ATTR_INLINE, false))
{
}


HidablePanel::~HidablePanel()
{
}


void HidablePanel::accept(Visitor& v)
{
	v.visit(*this);
}



void HidablePanel::preAccept(Visitor& v)
{
	v.preVisit(*this);
}


Poco::AutoPtr<Widget> HidablePanel::clone() const
{
	Poco::AutoPtr<Widget> ptrChild = getWidget();
	if (ptrChild)
		ptrChild = ptrChild->clone();
	Poco::AutoPtr<Widget> ptr = new HidablePanel(ptrChild, _onImg, _offImg, _text, _inlineMode);
	ptr->setAttributes(getAttributes());
	return ptr;
}


} } // namespace Poco::WebWidgets
