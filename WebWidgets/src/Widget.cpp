//
// Widget.cpp
//
// $Id: //poco/Main/WebWidgets/src/Widget.cpp#5 $
//
// Library: WebWidgets
// Package: WebGUI
// Module:  Widget
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/WebWidgets/Widget.h"
#include "Poco/WebWidgets/Visitor.h"
#include "Poco/WebWidgets/XMLUtil.h"
#include "Poco/DOM/Element.h"


namespace Poco {
namespace WebWidgets {


const std::string Widget::XML_ID("id");
const std::string Widget::XML_CLASS("class");
const std::string Widget::XML_LANG("lang");
const std::string Widget::XML_STYLE("style");
const std::string Widget::XML_TITLE("title");
const std::string Widget::VAL_EMPTY("");


Widget::Widget():_pParent(0)
{
}


Widget::Widget(const Poco::XML::Element* pElem):
	GUIObject(pElem),
	_pParent(0),
	_attr()
{
	parseUniversalAttributes(pElem, _attr);
	const Poco::XML::Element* pEv = XMLUtil::getEvents(pElem);
	if (pEv)
	{
		Widget* pThis = this;
		XMLUtil::initEvents(*pThis, pEv);
	}
}


Widget::~Widget()
{
}


void Widget::parseUniversalAttributes(const Poco::XML::Element* pElem, Attributes& attr)
{
	addOptional(XML_ID, pElem->getAttribute(XML_ID), attr);
	addOptional(XML_CLASS, pElem->getAttribute(XML_CLASS), attr);
	addOptional(XML_LANG, pElem->getAttribute(XML_LANG), attr);
	addOptional(XML_STYLE, pElem->getAttribute(XML_STYLE), attr);
	addOptional(XML_TITLE, pElem->getAttribute(XML_TITLE), attr);
}


void Widget::addOptional(const std::string& id, const std::string& value, Attributes& attr)
{
	if (value.empty())
		eraseAttribute(id, attr);
	else
		addAttribute(id, value, attr);
}


void Widget::addAttribute(const std::string& id, const std::string& value, Attributes& attr)
{
	std::pair<Attributes::iterator, bool> ok = attr.insert(std::make_pair(id, value));
	if (!ok.second)
		ok.first->second = value;
}


const std::string& Widget::getValue(const std::string& id) const
{
	Attributes::const_iterator it = findAttr(id);
	if (it == end())
		return VAL_EMPTY;
	return it->second;
}


void Widget::preAccept(Visitor& v)
{
	v.preVisit(*this);
}


Poco::AutoPtr<Widget> Widget::find(Poco::AutoPtr<Widget> widget, const std::string& id)
{
	if (!widget)
		return widget; // return null pointer

	if (widget->getAttrID() == id)
		return widget;

	return widget->find(id);
}

} } // namespace Poco::WebWidgets
