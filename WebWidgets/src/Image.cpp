//
// Image.cpp
//
// $Id: //poco/Main/WebWidgets/src/Image.cpp#3 $
//
// Library: WebWidgets
// Package: WebGUI
// Module:  Image
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/WebWidgets/Image.h"
#include "Poco/WebWidgets/Visitor.h"
#include "Poco/DOM/Element.h"
#include "Poco/NumberParser.h"


namespace Poco {
namespace WebWidgets {


const std::string Image::FACTORY_ID("image");
const std::string Image::XML_ALT("alt");
const std::string Image::XML_SRC("src");
const std::string Image::XML_WIDTH("width");
const std::string Image::XML_HEIGHT("height");


Image::Image(const Poco::URI& uri, const std::string& text, Poco::UInt32 width, Poco::UInt32 height):
	_uri(uri),
	_width(width),
	_height(height)
{
	addAttribute(XML_SRC, uri.toString());
	addAttribute(XML_ALT, text);
}


Image::Image(const Poco::XML::Element* pElem):
	Widget(pElem),
	_uri(pElem->getAttribute(XML_SRC)),
	_width(0),
	_height(0)
{
	addAttribute(XML_SRC, pElem->getAttribute(XML_SRC));
	addAttribute(XML_ALT, pElem->getAttribute(XML_ALT));
	const std::string& w = pElem->getAttribute(XML_WIDTH);
	Poco::NumberParser::tryParseUnsigned(w, _width);
	const std::string& h = pElem->getAttribute(XML_HEIGHT);
	Poco::NumberParser::tryParseUnsigned(h, _height);
}


Image::~Image()
{
}


void Image::accept(Visitor& v)
{
	v.visit(*this);
}


Poco::AutoPtr<Widget> Image::clone() const
{
	Poco::AutoPtr<Widget> ptr = new Image(_uri, findAttr(XML_ALT)->second, _width, _height);
	ptr->setAttributes(getAttributes());
	return ptr;
}


} } // namespace Poco::WebWidgets
