//
// FileHandler.cpp
//
// $Id: //poco/Main/WebWidgets/src/FileHandler.cpp#1 $
//
// Library: WebWidgets
// Package: HTTPHandler
// Module:  FileHandler
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/WebWidgets/FileHandler.h"
#include "Poco/Exception.h"
#include "Poco/StreamCopier.h"
#include "Poco/Path.h"
#include <fstream>


namespace Poco {
namespace WebWidgets {


std::map<std::string, std::string> FileHandler::EXTENSIONMAPPING(FileHandler::initExtensions());


FileHandler::FileHandler()
{
}


FileHandler::~FileHandler()
{
}


void FileHandler::handleRequest(Poco::Net::HTTPServerRequest& request, Poco::Net::HTTPServerResponse& response)
{
	const std::string& uri = request.getURI();
	if (uri.find("..") != std::string::npos)
		throw Poco::PathSyntaxException("Illegal entry \"..\" in path");

	std::size_t pos = uri.rfind('.');
	std::string fileType;
	if (pos != std::string::npos)
	{
		fileType = uri.substr(pos+1);
	}
	std::string file = mapUriToFile(uri);
	std::ifstream in(file.c_str());
	response.setChunkedTransferEncoding(true);
	if (in)
	{
		std::map<std::string, std::string>::const_iterator it = EXTENSIONMAPPING.find(fileType);
		if (fileType.empty() || it == EXTENSIONMAPPING.end())
		{
			response.setContentType("text/html");
		}
		else
			response.setContentType(it->second);

		std::ostream& out = response.send();
		Poco::StreamCopier::copyStream(in, out);
	}
	else
	{
		response.setStatusAndReason(Poco::Net::HTTPResponse::HTTP_NOT_FOUND);
		std::ostream& out = response.send();
		out << "<HTML><HEAD><TITLE>Not Found</TITLE></HEAD><BODY><H1>File Not Found</H1></BODY></HTML>";
	}
}


std::string FileHandler::mapUriToFile(const std::string& uri) const
{
	Poco::Path p((uri[0] == '/')?uri.substr(1):uri);
	p.makeFile();
	return p.toString();
}


std::map<std::string, std::string> FileHandler::initExtensions()
{
	std::map<std::string, std::string> ext;
	ext.insert(std::make_pair("", "text/html"));
	ext.insert(std::make_pair("htm", "text/html"));
	ext.insert(std::make_pair("html", "text/html"));
	ext.insert(std::make_pair("bmp", "image/bmp"));
	ext.insert(std::make_pair("gif", "image/gif"));
	ext.insert(std::make_pair("jpe", "image/jpeg"));
	ext.insert(std::make_pair("jpg", "image/jpeg"));
	ext.insert(std::make_pair("jpeg", "image/jpeg"));
	ext.insert(std::make_pair("log", "text/plain"));
	ext.insert(std::make_pair("txt", "text/plain"));
	ext.insert(std::make_pair("png", "image/png"));
	ext.insert(std::make_pair("ico", "image/x-icon"));
	ext.insert(std::make_pair("xml", "text/xml"));
	ext.insert(std::make_pair("css", "text/css"));
	ext.insert(std::make_pair("rss", "application/rss+xml"));
	ext.insert(std::make_pair("js", "text/javascript"));
	return ext;
}

} } // namespace Poco::WebWidgets
