//
// Form.cpp
//
// $Id: //poco/Main/WebWidgets/src/Form.cpp#2 $
//
// Library: WebWidgets
// Package: WebGUI
// Module:  Form
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/WebWidgets/Form.h"
#include "Poco/WebWidgets/Visitor.h"
#include "Poco/DOM/Element.h"
#include "Poco/String.h"


namespace Poco {
namespace WebWidgets {


const std::string Form::FACTORY_ID("form");
const std::string Form::XML_ACTION("action");
const std::string Form::XML_METHOD("method");
const std::string Form::XML_REDIRECT("redirect");
const std::string Form::VAL_GET("get");
const std::string Form::VAL_POST("post");


Form::Form(const Poco::URI& action, const Poco::URI& redirect, Method m, const std::vector<Poco::AutoPtr<Widget> >& children):
	IndexedPanel(children),
	_action(action),
	_redirect(redirect),
	_method(m)
{
}


Form::Form(const Poco::XML::Element* pElem):
	IndexedPanel(pElem),
	_action(pElem->getAttribute(XML_ACTION)),
	_redirect(),
	_method(M_GET)
{
	const std::string& elem = pElem->getAttribute(XML_METHOD);
	if (!elem.empty() && Poco::toLower(elem) == VAL_POST)
		_method = M_POST;

	const std::string& redirect = pElem->getAttribute(XML_REDIRECT);
	if (redirect.empty())
	{
		_redirect = _action;
	}
	else
	{
		_redirect = Poco::URI(redirect);
	}
}


Form::~Form()
{
}


void Form::accept(Visitor& v)
{
	v.visit(*this);
}


const std::string& Form::getMethodStr() const
{
	if (_method == M_GET)
		return VAL_GET;
	return VAL_POST;
}


Poco::AutoPtr<Widget> Form::clone() const
{
	Poco::AutoPtr<Widget> ptr = new Form(_action, _redirect, _method, cloneChildren());
	ptr->setAttributes(getAttributes());
	return ptr;
}


} } // namespace Poco::WebWidgets
