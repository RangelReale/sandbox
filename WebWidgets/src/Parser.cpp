//
// Parser.cpp
//
// $Id: //poco/Main/WebWidgets/src/Parser.cpp#3 $
//
// Library: WebWidgets
// Package: WebParser
// Module:  Parser
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/WebWidgets/Parser.h"
#include "Poco/WebWidgets/Label.h"
#include "Poco/WebWidgets/HTML.h"
#include "Poco/WebWidgets/Image.h"
#include "Poco/WebWidgets/FlowPanel.h"
#include "Poco/WebWidgets/SimplePanel.h"
#include "Poco/WebWidgets/RootPanel.h"
#include "Poco/WebWidgets/Table.h"
#include "Poco/WebWidgets/HyperLink.h"
#include "Poco/WebWidgets/Button.h"
#include "Poco/WebWidgets/ImageButton.h"
#include "Poco/WebWidgets/TextArea.h"
#include "Poco/WebWidgets/TextField.h"
#include "Poco/WebWidgets/CheckBox.h"
#include "Poco/WebWidgets/ImageButton.h"
#include "Poco/WebWidgets/RadioButton.h"
#include "Poco/WebWidgets/Form.h"
#include "Poco/WebWidgets/StackPanel.h"
#include "Poco/WebWidgets/ComboBox.h"
#include "Poco/WebWidgets/ListView.h"
#include "Poco/WebWidgets/HidablePanel.h"
#include "Poco/WebWidgets/PwdField.h"
#include "Poco/Exception.h"
#include "Poco/DOM/Element.h"


namespace Poco {
namespace WebWidgets {


Parser::Parser()
{
	registerFactory(RootPanel::FACTORY_ID, new ParserFactoryImpl<RootPanel>());
	registerFactory(Label::FACTORY_ID, new ParserFactoryImpl<Label>());
	registerFactory(HTML::FACTORY_ID, new ParserFactoryImpl<HTML>());
	registerFactory(Image::FACTORY_ID, new ParserFactoryImpl<Image>());
	registerFactory(FlowPanel::FACTORY_ID, new ParserFactoryImpl<FlowPanel>());
	registerFactory(Table::FACTORY_ID, new ParserFactoryImpl<Table>());
	registerFactory(HyperLink::FACTORY_ID, new ParserFactoryImpl<HyperLink>());
	registerFactory(Button::FACTORY_ID, new ParserFactoryImpl<Button>());
	registerFactory(ImageButton::FACTORY_ID, new ParserFactoryImpl<ImageButton>());
	registerFactory(TextArea::FACTORY_ID, new ParserFactoryImpl<TextArea>());
	registerFactory(TextField::FACTORY_ID, new ParserFactoryImpl<TextField>());
	registerFactory(CheckBox::FACTORY_ID, new ParserFactoryImpl<CheckBox>());
	registerFactory(RadioButton::FACTORY_ID, new ParserFactoryImpl<RadioButton>());
	registerFactory(Form::FACTORY_ID, new ParserFactoryImpl<Form>());
	registerFactory(StackPanel::FACTORY_ID, new ParserFactoryImpl<StackPanel>());
	registerFactory(ComboBox::FACTORY_ID, new ParserFactoryImpl<ComboBox>());
	registerFactory(ListView::FACTORY_ID, new ParserFactoryImpl<ListView>());
	registerFactory(HidablePanel::FACTORY_ID, new ParserFactoryImpl<HidablePanel>());
	registerFactory(PwdField::FACTORY_ID, new ParserFactoryImpl<PwdField>());
}


Parser::~Parser()
{
}


Parser& Parser::instance()
{
	static Poco::SingletonHolder<Parser> sh;
	return *(sh.get());
}


void Parser::registerFactory(const std::string& id, ParserFactoryPtr pFac)
{
	bool ok = _factories.insert(std::make_pair(id, pFac)).second;
	if (!ok)
		throw Poco::ExistsException("Parser::registerFactory" + id);
}


void Parser::unregisterFactory(const std::string& id)
{
	_factories.erase(id);
}


Poco::AutoPtr<Widget> Parser::load(const Poco::XML::Element* pElem) const
{
	poco_check_ptr (pElem);
	Factories::const_iterator it = _factories.find(pElem->tagName());
	if (it == _factories.end())
		throw Poco::DataFormatException("Illegal XML tag (no factory known): " + pElem->tagName());
	return it->second->load(pElem);
}


} } // namespace Poco::WebWidgets
