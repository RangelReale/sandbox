//
// Button.cpp
//
// $Id: //poco/Main/WebWidgets/src/Button.cpp#2 $
//
// Library: WebWidgets
// Package: WebGUI
// Module:  Button
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/WebWidgets/Button.h"
#include "Poco/WebWidgets/Visitor.h"
#include "Poco/DOM/Element.h"
#include "Poco/String.h"


namespace Poco {
namespace WebWidgets {


const std::string Button::FACTORY_ID("button");
const std::string Button::XML_TYPE("type");
const std::string Button::VAL_RESET("reset");


Button::Button(const std::string& text, Type t): 
	AbstractButton(text),
	_type(t)
{
}


Button::Button(const Poco::XML::Element* pElem):
	AbstractButton(pElem),
	_type(TYPE_SUBMIT)
{
	const std::string& val = pElem->getAttribute(XML_TYPE);
	if (!val.empty())
	{
		if (Poco::toLower(val) == VAL_RESET)
			_type = TYPE_RESET;
	}
}


Button::~Button()
{
}


void Button::accept(Visitor& v)
{
	v.visit(*this);
}


Poco::AutoPtr<Widget> Button::clone() const
{
	Poco::AutoPtr<Widget> w = new Button(getText(), _type);
	w->setAttributes(getAttributes());
	// no parent!
	return w;
}


} } // namespace Poco::WebWidgets
