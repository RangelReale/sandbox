//
// RootPanel.cpp
//
// $Id: //poco/Main/WebWidgets/src/RootPanel.cpp#3 $
//
// Library: WebWidgets
// Package: WebGUI
// Module:  RootPanel
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/WebWidgets/RootPanel.h"
#include "Poco/WebWidgets/Parser.h"
#include "Poco/WebWidgets/XMLUtil.h"
#include "Poco/WebWidgets/Visitor.h"
#include "Poco/DOM/Element.h"



namespace Poco {
namespace WebWidgets {


const std::string RootPanel::FACTORY_ID("rootPanel");
const std::string RootPanel::XML_NAME("name");
const std::string RootPanel::XML_HEADER("header");
const std::string RootPanel::XML_CHILDREN("children");


RootPanel::RootPanel(const std::string& title, const std::vector<Poco::AutoPtr<Widget> >& children):
	IndexedPanel(children),
	_name(title),
	_ptrHeader()
{
}


RootPanel::RootPanel(const Poco::XML::Element* pElem):
	IndexedPanel(),
	_name(pElem->getAttribute(XML_NAME)),
	_ptrHeader()
{
	const Poco::XML::Element* pEv = XMLUtil::getEvents(pElem);
	if (pEv)
	{
		Widget* pThis = this;
		XMLUtil::initEvents(*pThis, pEv);
	}
	std::vector<const Poco::XML::Element*> header = XMLUtil::getNamedElementChildren(pElem, XML_HEADER);
	if (header.size() > 1)
		throw Poco::DataException("More than one header detected");
	else if (header.size() == 1)
	{
		header = XMLUtil::getNamedElementChildren(header[0], HTML::FACTORY_ID);
		if (header.size() > 1)
			throw Poco::DataException("More than one HTML entry in header detected");
		else if (header.size() == 1)
		{
			_ptrHeader = Parser::instance().load<HTML>(header[0]);
			_ptrHeader->setParent(this);
		}
	}
	std::vector<const Poco::XML::Element*> child = XMLUtil::getNamedElementChildren(pElem, XML_CHILDREN);
	if (child.size() > 1)
		throw Poco::DataException("More than one children entry detected");
	else if (child.size() == 1)
	{
		children() = XMLUtil::getAllWidgets(child[0], this);
	}
}


RootPanel::~RootPanel()
{
}


void RootPanel::accept(Visitor& v)
{
	v.visit(*this);
}


Poco::AutoPtr<Widget> RootPanel::find(const std::string& id) const
{
	Poco::AutoPtr<Widget> res = IndexedPanel::find(id);
	if (res.isNull() && _ptrHeader)
		return _ptrHeader->find(id);
	
	return res;
}


Poco::AutoPtr<Widget> RootPanel::clone() const
{
	Poco::AutoPtr<RootPanel> ptr = new RootPanel(_name, cloneChildren());
	ptr->setAttributes(getAttributes());
	if (_ptrHeader)
		ptr->setHeader(_ptrHeader->clone().cast<HTML>());
	return ptr;
}


} } // namespace Poco::WebWidgets
