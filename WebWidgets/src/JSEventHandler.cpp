//
// JSEventHandler.cpp
//
// $Id: //poco/Main/WebWidgets/src/JSEventHandler.cpp#3 $
//
// Library: WebWidgets
// Package: WebEvents
// Module:  JSEventHandler
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/WebWidgets/JSEventHandler.h"
#include "Poco/WebWidgets/MouseEventArgs.h"
#include "Poco/WebWidgets/MouseMovementArgs.h"
#include "Poco/WebWidgets/InputField.h"
#include "Poco/NumberParser.h"


namespace Poco {
namespace WebWidgets {


const std::string JSEventHandler::FORM_ID("id");
const std::string JSEventHandler::FORM_TYPE("type");
const std::string JSEventHandler::FORM_BUTTONS("buttons");
const std::string JSEventHandler::FORM_POSX("posX");
const std::string JSEventHandler::FORM_POSY("posY");
const std::string JSEventHandler::FORM_WINPOSX("windowPosX");
const std::string JSEventHandler::FORM_WINPOSY("windowPosY");
const std::string JSEventHandler::FORM_KEY("key");
const std::string JSEventHandler::FORM_SHIFT("shift");
const std::string JSEventHandler::FORM_CTRL("ctrl");
const std::string JSEventHandler::FORM_ALT("alt");
const std::string JSEventHandler::VAL_CLICK("click");
const std::string JSEventHandler::VAL_DBLCLICK("dblclick");
const std::string JSEventHandler::VAL_MOUSEUP("mouseup");
const std::string JSEventHandler::VAL_MOUSEDOWN("mousedown");
const std::string JSEventHandler::VAL_MOUSEOVER("mouseover");
const std::string JSEventHandler::VAL_MOUSEOUT("mouseout");
const std::string JSEventHandler::VAL_MOUSEMOVE("mousemove");
const std::string JSEventHandler::VAL_FOCUSENTER("focus");
const std::string JSEventHandler::VAL_FOCUSLOST("blur");
const std::string JSEventHandler::VAL_KEYUP("keyup");
const std::string JSEventHandler::VAL_KEYDOWN("keydown");
const std::string JSEventHandler::VAL_KEYPRESSED("keypressed");
const std::string JSEventHandler::VAL_SELECT("select");
const std::string JSEventHandler::VAL_CHANGE("change");


JSEventHandler::JSEventHandler(std::map<std::string, Widget*>& children):
	_widgets(children)
{
}


JSEventHandler::~JSEventHandler()
{
}


void JSEventHandler::handleRequest(Poco::Net::HTTPServerRequest& request, Poco::Net::HTTPServerResponse& response)
{
	static Handlers handlers;

	Poco::Net::HTMLForm form(request);
	Poco::Net::NameValueCollection::ConstIterator it = form.find(FORM_ID);
	if (it == form.end())
	{
		response.setStatusAndReason(Poco::Net::HTTPResponse::HTTP_INTERNAL_SERVER_ERROR, "Missing id");
		response.send();
		return;
	}
	IDToWidget::iterator itW = _widgets.find(it->second);
	if (itW == _widgets.end())
	{
		response.setStatusAndReason(Poco::Net::HTTPResponse::HTTP_INTERNAL_SERVER_ERROR, "Illegal id");
		response.send();
		return;
	}
	it = form.find(FORM_TYPE);
	if (it == form.end())
	{
		response.setStatusAndReason(Poco::Net::HTTPResponse::HTTP_INTERNAL_SERVER_ERROR, "Missing event type");
		response.send();
		return;
	}
	
	const std::string& type = it->second;
	try
	{
		Handlers::iterator it = handlers.find(type);
		if (it == handlers.end())
		{
			response.setStatusAndReason(Poco::Net::HTTPResponse::HTTP_INTERNAL_SERVER_ERROR, "Illegal event type");
			response.send();
			return;
		}

		(this->*(it->second))(form, itW->second);
	}
	catch(Poco::Exception& e)
	{
		response.setStatusAndReason(Poco::Net::HTTPResponse::HTTP_INTERNAL_SERVER_ERROR, e.displayText());
	}

	response.send();
}


void JSEventHandler::handleClick(const Poco::Net::HTMLForm& form, Widget* pWidget)
{
	poco_check_ptr (pWidget);
	MouseEventArgs evArgs = createMouseClickArgs(form, pWidget);
	pWidget->ESingleClick.notifyAsync(pWidget, evArgs);
}


void JSEventHandler::handleMouseUp(const Poco::Net::HTMLForm& form, Widget* pWidget)
{
	poco_check_ptr (pWidget);
	MouseEventArgs evArgs = createMouseClickArgs(form, pWidget);
	pWidget->EMouseUp.notifyAsync(pWidget, evArgs);
}


void JSEventHandler::handleMouseDown(const Poco::Net::HTMLForm& form, Widget* pWidget)
{
	poco_check_ptr (pWidget);
	MouseEventArgs evArgs = createMouseClickArgs(form, pWidget);
	pWidget->EMouseDown.notifyAsync(pWidget, evArgs);
}


void JSEventHandler::handleDblClick(const Poco::Net::HTMLForm& form, Widget* pWidget)
{
	poco_check_ptr (pWidget);
	MouseEventArgs evArgs = createMouseClickArgs(form, pWidget);
	pWidget->EDoubleClick.notifyAsync(pWidget, evArgs);
}


void JSEventHandler::handleMouseOut(const Poco::Net::HTMLForm& form, Widget* pWidget)
{
	poco_check_ptr (pWidget);
	MouseMovementArgs evArgs = createMouseMovementArgs(form, pWidget);
	pWidget->EMouseOut.notifyAsync(pWidget, evArgs);
}


void JSEventHandler::handleMouseOver(const Poco::Net::HTMLForm& form, Widget* pWidget)
{
	poco_check_ptr (pWidget);
	MouseMovementArgs evArgs = createMouseMovementArgs(form, pWidget);
	pWidget->EMouseOver.notifyAsync(pWidget, evArgs);
}


void JSEventHandler::handleMouseMove(const Poco::Net::HTMLForm& form, Widget* pWidget)
{
	poco_check_ptr (pWidget);
	MouseMovementArgs evArgs = createMouseMovementArgs(form, pWidget);
	pWidget->EMouseMove.notifyAsync(pWidget, evArgs);
}


void JSEventHandler::handleFocusEnter(const Poco::Net::HTMLForm& form, Widget* pWidget)
{
	poco_check_ptr (pWidget);
	MouseMovementArgs evArgs = createMouseMovementArgs(form, pWidget);
	pWidget->EFocusEnter.notifyAsync(pWidget, evArgs);
}


void JSEventHandler::handleFocusLost(const Poco::Net::HTMLForm& form, Widget* pWidget)
{
	poco_check_ptr (pWidget);
	MouseMovementArgs evArgs = createMouseMovementArgs(form, pWidget);
	pWidget->EFocusLost.notifyAsync(pWidget, evArgs);
}


void JSEventHandler::handleKeyUp(const Poco::Net::HTMLForm& form, Widget* pWidget)
{
	poco_check_ptr (pWidget);
	KeyEventArgs evArgs = createKeyEventArgs(form, pWidget);
	pWidget->EKeyUp.notifyAsync(pWidget, evArgs);
}


void JSEventHandler::handleKeyDown(const Poco::Net::HTMLForm& form, Widget* pWidget)
{
	poco_check_ptr (pWidget);
	KeyEventArgs evArgs = createKeyEventArgs(form, pWidget);
	pWidget->EKeyUp.notifyAsync(pWidget, evArgs);
}


void JSEventHandler::handleKeyPressed(const Poco::Net::HTMLForm& form, Widget* pWidget)
{
	poco_check_ptr (pWidget);
	KeyEventArgs evArgs = createKeyEventArgs(form, pWidget);
	pWidget->EKeyUp.notifyAsync(pWidget, evArgs);
}

void JSEventHandler::handleSelect(const Poco::Net::HTMLForm& form, Widget* pWidget)
{
	InputField* pIn = dynamic_cast<InputField*>(pWidget);
	poco_check_ptr (pIn);
	pIn->ESelect.notifyAsync(pIn, pIn);
}


void JSEventHandler::handleChange(const Poco::Net::HTMLForm& form, Widget* pWidget)
{
	InputField* pIn = dynamic_cast<InputField*>(pWidget);
	poco_check_ptr (pIn);
	pIn->ESelect.notifyAsync(pIn, pIn);
}


MouseEventArgs JSEventHandler::createMouseClickArgs(const Poco::Net::HTMLForm& form, Widget* id) const
{
	Poco::Net::NameValueCollection::ConstIterator it = form.find(FORM_BUTTONS);
	poco_assert (it != form.end());
	int val = Poco::NumberParser::parse(it->second);
	bool left = ((val & 1) > 0);
	bool middle = ((val & 4) > 0);
	bool right = ((val & 2) > 0);
	it = form.find(FORM_POSX);
	poco_assert (it != form.end());
	int posX = Poco::NumberParser::parse(it->second);
	it = form.find(FORM_POSY);
	poco_assert (it != form.end());
	int posY = Poco::NumberParser::parse(it->second);
	return MouseEventArgs(id, posX, posY, left, middle, right);
}


MouseMovementArgs JSEventHandler::createMouseMovementArgs(const Poco::Net::HTMLForm& form, Widget* id) const
{
	Poco::Net::NameValueCollection::ConstIterator it = form.find(FORM_POSX);
	poco_assert (it != form.end());
	int posX = Poco::NumberParser::parse(it->second);
	it = form.find(FORM_POSY);
	poco_assert (it != form.end());
	int posY = Poco::NumberParser::parse(it->second);
	it = form.find(FORM_WINPOSX);
	poco_assert (it != form.end());
	int winPosX = Poco::NumberParser::parse(it->second);
	it = form.find(FORM_WINPOSY);
	poco_assert (it != form.end());
	int winPosY = Poco::NumberParser::parse(it->second);
	return MouseMovementArgs(id, posX, posY, winPosX, winPosY);
}


KeyEventArgs JSEventHandler::createKeyEventArgs(const Poco::Net::HTMLForm& form, Widget* id) const
{
	Poco::Net::NameValueCollection::ConstIterator it = form.find(FORM_KEY);
	poco_assert (it != form.end());
	int keyCode = Poco::NumberParser::parse(it->second);
	it = form.find(FORM_ALT);
	poco_assert (it != form.end());
	bool alt = (Poco::NumberParser::parse(it->second) != 0);
	it = form.find(FORM_SHIFT);
	poco_assert (it != form.end());
	bool shift = (Poco::NumberParser::parse(it->second) != 0);
	it = form.find(FORM_CTRL);
	poco_assert (it != form.end());
	bool ctrl = (Poco::NumberParser::parse(it->second) != 0);

	return KeyEventArgs(id, keyCode, alt, shift, ctrl);
}


JSEventHandler::Handlers JSEventHandler::createHandlers()
{
	Handlers h;
	h.insert(std::make_pair(VAL_CLICK, &JSEventHandler::handleClick));
	h.insert(std::make_pair(VAL_DBLCLICK, &JSEventHandler::handleDblClick));
	h.insert(std::make_pair(VAL_MOUSEUP, &JSEventHandler::handleMouseUp));
	h.insert(std::make_pair(VAL_MOUSEDOWN, &JSEventHandler::handleMouseDown));
	h.insert(std::make_pair(VAL_MOUSEOUT, &JSEventHandler::handleMouseOut));
	h.insert(std::make_pair(VAL_MOUSEOVER, &JSEventHandler::handleMouseOver));
	h.insert(std::make_pair(VAL_MOUSEMOVE, &JSEventHandler::handleMouseMove));
	h.insert(std::make_pair(VAL_FOCUSENTER, &JSEventHandler::handleFocusEnter));
	h.insert(std::make_pair(VAL_FOCUSLOST, &JSEventHandler::handleFocusLost));
	h.insert(std::make_pair(VAL_KEYUP, &JSEventHandler::handleKeyUp));
	h.insert(std::make_pair(VAL_KEYDOWN, &JSEventHandler::handleKeyDown));
	h.insert(std::make_pair(VAL_KEYPRESSED, &JSEventHandler::handleKeyPressed));
	h.insert(std::make_pair(VAL_SELECT, &JSEventHandler::handleSelect));
	h.insert(std::make_pair(VAL_CHANGE, &JSEventHandler::handleChange));
	return h;
}

} } // namespace Poco::WebWidgets
