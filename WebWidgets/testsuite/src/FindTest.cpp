//
// FindTest.cpp
//
// $Id: //poco/Main/WebWidgets/testsuite/src/FindTest.cpp#2 $
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "FindTest.h"
#include "CppUnit/TestCaller.h"
#include "CppUnit/TestSuite.h"
#include "Poco/Path.h"
#include "Poco/File.h"
#include "Poco/WebWidgets/XMLUtil.h"
#include <fstream>


using namespace Poco::WebWidgets;


FindTest::FindTest(const std::string& name): CppUnit::TestCase(name)
{
}


FindTest::~FindTest()
{
}


void FindTest::findInRoot()
{
	Poco::AutoPtr<Widget> root = load("comboBox.xml");
	Poco::AutoPtr<Widget> c = Widget::find(root, "c1");
	poco_assert (c);
	c = Widget::find(root, "c2");
	poco_assert (c.isNull());
}


void FindTest::findInTable()
{
	Poco::AutoPtr<Widget> root = load("table.xml");
	Poco::AutoPtr<Widget> c = Widget::find(root, "i1");
	poco_assert (c);
	c = Widget::find(root, "i2");
	poco_assert (c.isNull());
}


void FindTest::findInForm()
{
	Poco::AutoPtr<Widget> root = load("form2.xml");
	Poco::AutoPtr<Widget> c = Widget::find(root, "f1");
	poco_assert (c);
	c = Widget::find(root, "b1");
	poco_assert (c);
	c = Widget::find(root, "b2");
	poco_assert (c);
	c = Widget::find(root, "c1");
	poco_assert (c);
	c = Widget::find(root, "c2");
	poco_assert (c);
	c = Widget::find(root, "ta1");
	poco_assert (c);
	c = Widget::find(root, "tf1");
	poco_assert (c);
	c = Widget::find(root, "b3");
	poco_assert (c);
}


Poco::AutoPtr<Poco::WebWidgets::Widget> FindTest::load(const std::string& file)
{
	Poco::Path dir("tests");
	std::string cwd(Poco::Path::current());
	Poco::Path cwdPath(cwd);
	Poco::Path p(cwdPath, dir);
	p.makeFile();
	bool found = false;
	while (!found && p.depth() > 0)
	{
		Poco::File f(p);
		if (f.exists())
			found = true;
		else
			p.popDirectory();
	}
	if (!found)
		throw Poco::FileNotFoundException(file);

	Poco::Path data(p, "data");
	data.makeDirectory();
	Poco::File dataDir(data);
	if (!dataDir.exists())
		throw Poco::FileNotFoundException(file);

	Poco::Path theFile(data, file);
	theFile.makeFile();
	Poco::File aFile(theFile);
	if (!aFile.exists())
		throw Poco::FileNotFoundException(file);

	std::ifstream in(theFile.toString().c_str());
	if (!in)
		throw Poco::FileNotFoundException(file);
	return XMLUtil::loadWidget(in);
}


void FindTest::setUp()
{
}


void FindTest::tearDown()
{
}


CppUnit::Test* FindTest::suite()
{
	CppUnit::TestSuite* pSuite = new CppUnit::TestSuite("FindTest");

	CppUnit_addTest(pSuite, FindTest, findInRoot);
	CppUnit_addTest(pSuite, FindTest, findInTable);
	CppUnit_addTest(pSuite, FindTest, findInForm);

	return pSuite;
}
