//
// ListView.h
//
// $Id: //poco/Main/WebWidgets/include/Poco/WebWidgets/ListView.h#3 $
//
// Library: WebWidgets
// Package: WebGUI
// Module:  ListView
//
// Definition of the ListView class.
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef WebWidgets_ListView_INCLUDED
#define WebWidgets_ListView_INCLUDED


#include "Poco/WebWidgets/WebWidgets.h"
#include "Poco/WebWidgets/ComboBox.h"
#include <set>


namespace Poco {
namespace WebWidgets {


class WebWidgets_API ListView: public ComboBox
	/// A ListView shows a list of clickable label entries. multi-selection is possible by setting multiple to true.
	/// Each listview must have a name and a size (ie. how any entries are shown), multiple is per default false
	/// and nothing is selected. Note that the index of the first entry starts with 0, entries in the select attribute
	/// can be komma or space seperated:
	///.....<listView name="list" size="3" multiple="true" select="0 2 4">
	///.........<label>1st</label>
	///.........<label>2nd</label>
	///.........<label>3rd</label>
	///.........<label>4th</label>
	///.........<label>5th</label>
	///.........<label>6th</label>
	///.....</listView>
{
public:
	static const std::string FACTORY_ID;
	static const std::string XML_MULTIPLE;
	static const std::string XML_SIZE;

	ListView(const std::string& uniqueName, int viewSize, bool multiple, const std::vector<Poco::AutoPtr<Label> >& children = std::vector<Poco::AutoPtr<Label> >());
		/// Creates the ListView.

	ListView(const Poco::XML::Element* pElem);
		/// Creates the ListView.

	virtual ~ListView();
		/// Destroys the ListView.

	virtual int getSelectedIndex() const;
		/// Returns the index of the first selected element. Returns -1 if nothing is selected.

	virtual void select(int idx);
		/// Selects an element if not yet selected. If multiple selection is turned off, it will
		/// deselect all other entries.

	int getViewSize() const;
		/// Number of entries shown at once

	void setViewSize(int size);

	bool getMultiple() const;

	void setMultiple(bool multiSelection);

	const std::set<int>& getSelectedIndizes() const;
		/// Returns all selected indizes

	void deselect(int idx);
		/// deselects an element

	void deselectAll();
		/// deselects all elements

	void accept(Visitor& v);

	Poco::AutoPtr<Widget> clone() const;

protected:
	ListView(const std::string& uniqueName, int viewSize, bool multiple, const std::vector<Poco::AutoPtr<Widget> >& children);
		/// Creates the ListView.

private:
	std::set<int> _selected;
	bool          _multiple;
	int           _size;
};


inline int ListView::getViewSize() const
{
	return _size;
}


inline void ListView::setViewSize(int size)
{
	_size = size;
}


inline bool ListView::getMultiple() const
{
	return _multiple;
}


inline void ListView::setMultiple(bool multiSelection)
{
	_multiple = multiSelection;
}



inline const std::set<int>& ListView::getSelectedIndizes() const
{
	return _selected;
}


inline void ListView::deselect(int idx)
{
	_selected.erase(idx);
}


inline void ListView::deselectAll()
{
	_selected.clear();
}


} } // namespace Poco::WebWidgets


#endif // WebWidgets_ListView_INCLUDED
