//
// IndexedPanel.h
//
// $Id: //poco/Main/WebWidgets/include/Poco/WebWidgets/IndexedPanel.h#3 $
//
// Library: WebWidgets
// Package: WebGUI
// Module:  IndexedPanel
//
// Definition of the IndexedPanel class.
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef WebWidgets_IndexedPanel_INCLUDED
#define WebWidgets_IndexedPanel_INCLUDED


#include "Poco/WebWidgets/WebWidgets.h"
#include "Poco/WebWidgets/ComplexPanel.h"
#include <vector>


namespace Poco {
namespace WebWidgets {


class WebWidgets_API IndexedPanel: public ComplexPanel
	/// An IndexedPanel stores a collection of Widgets
	/// and allows access by position
{
public:
	IndexedPanel(const std::vector<Poco::AutoPtr<Widget> >& children = std::vector<Poco::AutoPtr<Widget> >());
		/// Creates the IndexedPanel.

	IndexedPanel(const Poco::XML::Element* pElem);
		/// Creates the IndexedPanel by loading all subelements from pElem and converting them to a Widget.

	IndexedPanel(const Poco::XML::Element* pElem, const std::string& filter);
		/// Creates the IndexedPanel by loading all subelements from pElem that have the same name as filter,
		/// and by converting them to a Widget.

	virtual ~IndexedPanel();
		/// Destroys the IndexedPanel.

	void add(Poco::AutoPtr<Widget> ptrWidget);
		/// Adds a widget at the end of the panel

	const std::vector<Poco::AutoPtr<Widget> >& children() const;

	std::vector<Poco::AutoPtr<Widget> >& children();

	void accept(Visitor& v);

	void preAccept(Visitor& v);

	Poco::AutoPtr<Widget> find(const std::string& id) const;

	Poco::AutoPtr<Widget> clone() const;

protected:
	std::vector<Poco::AutoPtr<Widget> > cloneChildren() const;
		/// Returns a deep-copy of all children

private:
	std::vector<Poco::AutoPtr<Widget> > _children;
};


inline void IndexedPanel::add(Poco::AutoPtr<Widget> ptrWidget)
{
	_children.push_back(ptrWidget);
}


inline const std::vector<Poco::AutoPtr<Widget> >& IndexedPanel::children() const
{
	return _children;
}


inline std::vector<Poco::AutoPtr<Widget> >& IndexedPanel::children()
{
	return _children;
}


} } // namespace Poco::WebWidgets


#endif // WebWidgets_IndexedPanel_INCLUDED
