//
// XMLUtil.h
//
// $Id: //poco/Main/WebWidgets/include/Poco/WebWidgets/XMLUtil.h#6 $
//
// Library: WebWidgets
// Package: WebParser
// Module:  XMLUtil
//
// Definition of the XMLUtil class.
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef WebWidgets_XMLUtil_INCLUDED
#define WebWidgets_XMLUtil_INCLUDED


#include "Poco/WebWidgets/WebWidgets.h"
#include "Poco/WebWidgets/Widget.h"
#include "Poco/WebWidgets/JSDelegate.h"
#include "Poco/WebWidgets/JavaScriptEvent.h"
#include "Poco/DOM/Element.h"
#include "Poco/AutoPtr.h"
#include "Poco/NumberParser.h"
#include <vector>
#include <istream>


namespace Poco {
namespace WebWidgets {


class WebWidgets_API XMLUtil
	/// XMLUtil class contains helper methods for parsing XML documents
{
public:
	static const std::string VAL_TRUE;
	static const std::string VAL_FALSE;
	static const std::string TAG_EVENTS;
	static const std::string TAG_DELEGATE;
	static const std::string ATTR_FUNCTION;
	static const std::string ATTR_FILE;

	static Poco::AutoPtr<Widget> loadWidget(std::istream& in);
		/// Parses the XML behind the input stream and converts it into a widget

	static std::vector<const Poco::XML::Element*> getAllElementChildren(const Poco::XML::Element* pElem);
		/// Loads all children of pElem which are of type element, excluding events children!

	static std::vector<const Poco::XML::Element*> getNamedElementChildren(const Poco::XML::Element* pElem, const std::string& tagName);
		/// Loads all children of pElem which are of type element and have the given tagName

	static std::vector<Poco::AutoPtr<Widget> > getAllWidgets(const Poco::XML::Element* pElem, Widget* pParent);
		/// Loads all children of pElem which are of type element and converts them to Widgets. Excludes events

	static std::vector<Poco::AutoPtr<Widget> > getWidgets(const Poco::XML::Element* pElem, const std::string& childName, Widget* pParent);
		/// Loads all children of pElem which are of type element, are named childName and converts them to Widgets

	static Poco::AutoPtr<Widget> createWidget(const Poco::XML::Element* pElem, Widget* pParent);
		/// Creates a widget from an element, sets the parent

	static std::string getText(const Poco::XML::Element* pElem);
		/// Returns the inner text of pElem

	static void initEvents(Widget& widget, const Poco::XML::Element* pEvents);
		// Initializes the events of widget. Expects a not null pEvents pointer with the tagName "events"

	static const Poco::XML::Element* getEvents(const Poco::XML::Element* pElem);
		/// Returns 0 if no events, otherwise returns the events child

	static bool getBoolAttr(const Poco::XML::Element* pElem , const std::string& attrName);
		/// Returns the boolean value of an attr, exception if not found or illegal string value

	static bool getBoolAttr(const Poco::XML::Element* pElem , const std::string& attrName, bool defaultValue);
		/// Returns the boolean value of an attr, returns defaultValue if not found or illegal string value.

	template<typename T> 
	static T getNumericAttr(const Poco::XML::Element* pElem , const std::string& attrName)
		/// Returns the numeric value of an attr, exception if not found or illegal string value
	{
		const std::string& strVal = pElem->getAttribute(attrName);
		return Poco::NumberParser::parse(strVal);
	}

	template<typename T> 
	static T getNumericAttrUnsigned(const Poco::XML::Element* pElem , const std::string& attrName)
		/// Returns the numeric value of an attr, exception if not found or illegal string value
	{
		const std::string& strVal = pElem->getAttribute(attrName);
		return Poco::NumberParser::parseUnsigned(strVal);
	}

	template<typename T> 
	static T getNumericAttr(const Poco::XML::Element* pElem , const std::string& attrName, T defaultValue)
		/// Returns the numeric value of an attr, returns defaultValue if not found or illegal string value.
	{
		const std::string& strVal = pElem->getAttribute(attrName);
		T val(defaultValue);
		Poco::NumberParser::tryParse(strVal, val);
		return val;
	}

	template<typename T> 
	static T getNumericAttrUnsigned(const Poco::XML::Element* pElem , const std::string& attrName, T defaultValue)
		/// Returns the numeric value of an attr, returns defaultValue if not found or illegal string value.
	{
		const std::string& strVal = pElem->getAttribute(attrName);
		T val(defaultValue);
		Poco::NumberParser::tryParseUnsigned(strVal, val);
		return val;
	}
	
	template<typename T>
	static void add(JavaScriptEvent<T>& ev, const std::vector<JSDelegate>& delegates)
	{
		std::vector<JSDelegate>::const_iterator it = delegates.begin();
		std::vector<JSDelegate>::const_iterator itEnd = delegates.end();
		for (; it != itEnd; ++it)
			ev.add(*it);
	}

	template <typename T>
	static std::vector<Poco::AutoPtr<Widget> > castToWidget(const std::vector<Poco::AutoPtr<T> >& in)
	{
		std::vector<Poco::AutoPtr<Widget> > result;
		std::vector<Poco::AutoPtr<T> >::const_iterator it = in.begin();
		std::vector<Poco::AutoPtr<T> >::const_iterator itEnd = in.end();
		for (; it != itEnd; ++it)
		{
			result.push_back(*it);
		}
		return result;
	}

private:
	static void getEventDelegates(const Poco::XML::Element* pEvents, const std::string& tagName, std::vector<JSDelegate>& result);
		// Clears result, then converts all delegates from the child of pEvents named tagName to JSDelegate.

	static void createDelegates(const std::vector<const Poco::XML::Element*>& xml, std::vector<JSDelegate>& result);
		/// Adds the delegates from xml. result is NOT cleared prior!
private:
	XMLUtil();
	XMLUtil(const XMLUtil&);
	XMLUtil& operator=(const XMLUtil&);
	~XMLUtil();
};


} } // namespace Poco::WebWidgets


#endif // WebWidgets_XMLUtil_INCLUDED
