//
// ComboBox.h
//
// $Id: //poco/Main/WebWidgets/include/Poco/WebWidgets/ComboBox.h#3 $
//
// Library: WebWidgets
// Package: WebGUI
// Module:  ComboBox
//
// Definition of the ComboBox class.
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef WebWidgets_ComboBox_INCLUDED
#define WebWidgets_ComboBox_INCLUDED


#include "Poco/WebWidgets/WebWidgets.h"
#include "Poco/WebWidgets/IndexedPanel.h"
#include "Poco/WebWidgets/Label.h"


namespace Poco {
namespace WebWidgets {


class WebWidgets_API ComboBox: public IndexedPanel
	/// ComboBox class offers a drop-down menu.
	/// It can only have children of type "label". All other entries are ignored. The select attribute can be used to
	/// preselect an element. Note that the first element has index 0!
	///     <comboBox name="combo" select="2">
	///         <label>1st</label>
	///         <label>2nd</label>
	///         <label>3rd</label>
	///         <label>4th</label>
	///     </comboBox>
{
public:
	static const std::string FACTORY_ID;
	static const std::string XML_SELECT;

	ComboBox(const std::string& uniqueName, const std::vector<Poco::AutoPtr<Label> >& children = std::vector<Poco::AutoPtr<Label> >(), int selected = -1);
		/// Creates the ComboBox.

	ComboBox(const Poco::XML::Element* pElem);
		/// Creates the ComboBox.

	virtual ~ComboBox();
		/// Destroys the ComboBox.

	virtual int getSelectedIndex() const;
		/// Returns the index of the selected element. Returns -1 if nothing is selected.

	virtual void select(int idx);
		/// Selects the element at pos idx

	void accept(Visitor& v);

	const std::string& getName() const;

	void setName(const std::string& name);

	Poco::AutoPtr<Widget> clone() const;

protected:
	ComboBox(const std::string& uniqueName, const std::vector<Poco::AutoPtr<Widget> >& children = std::vector<Poco::AutoPtr<Widget> >(), int selected = -1);
		/// Creates the ComboBox.

private:
	std::string _name;
	int _selected;
};


inline int ComboBox::getSelectedIndex() const
{
	return _selected;
}


inline void ComboBox::select(int idx)
{
	_selected = idx;
}


inline const std::string& ComboBox::getName() const
{
	return _name;
}


inline void ComboBox::setName(const std::string& name)
{
	_name = name;
}


} } // namespace Poco::WebWidgets


#endif // WebWidgets_ComboBox_INCLUDED
