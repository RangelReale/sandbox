//
// HTMLVisitor.h
//
// $Id: //poco/Main/WebWidgets/include/Poco/WebWidgets/HTMLVisitor.h#8 $
//
// Library: WebWidgets
// Package: WebVisitor
// Module:  HTMLVisitor
//
// Definition of the HTMLVisitor class.
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef WebWidgets_HTMLVisitor_INCLUDED
#define WebWidgets_HTMLVisitor_INCLUDED


#include "Poco/WebWidgets/WebWidgets.h"
#include "Poco/WebWidgets/Visitor.h"
#include "Poco/WebWidgets/Widget.h"
#include "Poco/WebWidgets/Form.h"
#include "Poco/WebWidgets/InputField.h"
#include "Poco/WebWidgets/JavaScriptEvent.h"
#include "Poco/WebWidgets/JSDelegate.h"
#include "Poco/AutoPtr.h"
#include "Poco/String.h"

#include "Poco/URI.h"
#include <vector>
#include <list>
#include <set>


namespace Poco {
namespace WebWidgets {


class WebWidgets_API HTMLVisitor: public Visitor
	/// HTMLVisitor converts a GUI description into HTML code
{
public:
	static const std::string TAG_DIV;
	static const std::string TAG_HTML;
	static const std::string TAG_HEAD;
	static const std::string TAG_TITLE;
	static const std::string TAG_IMG;
	static const std::string TAG_BODY;
	static const std::string TAG_TABLE;
	static const std::string TAG_THEAD;
	static const std::string TAG_TBODY;
	static const std::string TAG_TFOOT;
	static const std::string TAG_PRE;
	static const std::string TAG_A;
	static const std::string TAG_INPUT;
	static const std::string TAG_TEXTAREA;
	static const std::string TAG_FORM;
	static const std::string TAG_SELECT;
	static const std::string TAG_OPTION;
	static const std::string ATTR_ID;
	static const std::string ATTR_HREF;
	static const std::string ATTR_TYPE;
	static const std::string ATTR_VALUE;
	static const std::string ATTR_SRC;
	static const std::string ATTR_ALT;
	static const std::string ATTR_COLS;
	static const std::string ATTR_ROWS;
	static const std::string ATTR_SIZE;
	static const std::string ATTR_MAXLENGTH;
	static const std::string ATTR_NAME;
	static const std::string ATTR_CHECKED;
	static const std::string ATTR_ONCLICK;
	static const std::string VAL_SPACE;
	static const std::string VAL_TABLECELLEMPTY;
	static const std::string VAL_SUBMIT;
	static const std::string VAL_RESET;
	static const std::string VAL_IMAGE;
	static const std::string VAL_ONCLICK;
	static const std::string VAL_TEXT;
	static const std::string VAL_CHECKBOX;
	static const std::string VAL_RADIO;
	static const std::string VAL_SELECTED;
	static const std::string VAL_MULTIPLE;
	static const std::string VAL_PASSWORD;
	static const std::string XML_BR;
	static const std::string XML_A_OPEN;
	static const std::string XML_A_CLOSE;
	static const std::string XML_P_OPEN;
	static const std::string XML_P_CLOSE;
	static const std::string XML_TR_OPEN;
	static const std::string XML_TR_CLOSE;
	static const std::string XML_TH_OPEN;
	static const std::string XML_TH_CLOSE;
	static const std::string XML_TD_OPEN;
	static const std::string XML_TD_CLOSE;
	static const std::string PRE_OPEN;
	static const std::string PRE_CLOSE;
	static const std::string CLOSE;
	static const std::string FULLCLOSE;
	static const std::string ASSIGNQUOTE;
	static const std::string QUOTE;
	static const std::string CLASS_BUTTON;
	static const std::string CLASS_CHECKBOX;
	static const std::string CLASS_COMBOBOX;
	static const std::string CLASS_IMAGE;
	static const std::string CLASS_IMAGEBUTTON;
	static const std::string CLASS_LISTVIEW;
	static const std::string CLASS_RADIOBUTTON;
	static const std::string CLASS_TABLE;
	static const std::string CLASS_TEXTAREA;
	static const std::string CLASS_TEXTFIELD;
	static const std::string CLASS_PASSWORD;
	static const std::string FILE_APPINF_JS;
	static const std::string EVENT_SINGLECLICK;
	static const std::string EVENT_DOUBLECLICK;
	static const std::string EVENT_MOUSEDOWN;
	static const std::string EVENT_MOUSEUP;
	static const std::string EVENT_MOUSEOVER;
	static const std::string EVENT_MOUSEOUT;
	static const std::string EVENT_MOUSEMOVE;
	static const std::string EVENT_FOCUSENTER;
	static const std::string EVENT_FOCUSLOST;
	static const std::string EVENT_KEYUP;
	static const std::string EVENT_KEYDOWN;
	static const std::string EVENT_KEYPRESSED;
	static const std::string EVENT_SELECT;
	static const std::string EVENT_CHANGE;


	Poco::BasicEvent<std::pair<Poco::URI, Widget*> > EWidget;
		///Event contains the owner (the uri) and the widget

	Poco::BasicEvent<std::pair<Poco::URI, Form*> > EContainsForm;
		///Event contains the owner (the uri) and the form object

	Poco::BasicEvent<std::pair<Form*, InputField*> > EHasInputField;
		/// Events contains the InputField and the form to which it belongs

	Poco::BasicEvent<std::pair<Form*, CheckBox*> > EHasCheckBox;
		/// Events contains the CheckBox and the form to which it belongs


	HTMLVisitor(std::ostream& out, const Poco::URI& rootAddress);
		/// Creates the HTMLVisitor.

	virtual ~HTMLVisitor();
		/// Destroys the HTMLVisitor.

	void visit(Label& label);
		/// Generates code for a label

	void visit(HTML& raw);
		/// Generates code for a raw HTML element

	void visit(RootPanel& main);
		/// Generates code for the RootPanel class

	void visit(Image& img);
		/// Generates code for an image

	void visit(FlowPanel& flow);
		/// Generates code for a FlowPanel

	void visit(Table& table);
		/// Generates code for a Table

	void visit(HyperLink& link);
		/// Generates code for a HyperLink

	void visit(Button& but);
		/// Generates code for a Button

	void visit(ImageButton& but);
		/// Generates code for a ImageButton

	void visit(TextArea& txt);
		/// Generates code for a TextArea

	void visit(TextField& txt);
		/// Generates code for a TextField

	void visit(CheckBox& but);
		/// Generates code for a CheckBox

	void visit(RadioButton& but);
		/// Generates code for a RadioButton

	void visit(Form& f);
		/// Generates code for a Form

	void visit(IndexedPanel& p);
		/// Generates code for a IndexedPanel

	void visit(StackPanel& p);
		/// Generates code for a StackPanel

	void visit(ComboBox& p);
		/// Generates code for a ComboBox

	void visit(ListView& l);
		/// Generates code for a ListView

	void visit(HidablePanel& l);
		/// Generates code for a HidablePanel

	void visit(PwdField& l);
		/// Generates code for a PwdField

	void preVisit(Widget& widget);

	void preVisit(SimplePanel& widget);

	void preVisit(IndexedPanel& widget);

	void preVisit(HidablePanel& l);

	void preVisit(RootPanel& main);

	void preVisit(InputField& input);

private:
	void writeOpenTag(const std::string& tag);
		/// Writes <tag>

	void writeCloseTag(const std::string& tag);
		/// Writes </tag>

	void writeTag(const std::string& tag);
		/// Writes <tag/>

	void writeOpenWithAttributes(const std::string& tag, const Widget::Attributes& attr);
		/// Writes <tag attr="a" attr2="ba">

	void writeOpenWithAttributes(const std::string& tag, const Widget& widget);
		/// Writes <tag attr="a" attr2="ba">

	void writeTagWithAttributes(const std::string& tag, const Widget& widget);
		/// Writes <tag attr="a" attr2="ba"/>

	void writeTagWithAttributes(const std::string& tag, const Widget::Attributes& attr);
		/// Writes <tag attr="a" attr2="ba"/>

	void writeAttributes(const Widget::Attributes& attr);

	void accept(const std::vector<Poco::AutoPtr<Widget> >& widgets);
		/// calls accept on each member of the list

	void preAccept(const std::vector<Poco::AutoPtr<Widget> >& widgets);
		/// calls accept on each member of the list

	void addJavaScript(const std::string& js);

	void addToOnLoad(const std::string& js);

	void writeJavaScript();

	void writeSingleLine(const std::string& code, int& indentation);

	void writeJSIncludes(int indent);

	void writeIndent(int indent);

	std::string onClickMethodName(const std::string& id);

	void assertHasID(Widget& w);

	void addJavaScriptInclude(const std::string& js);

	template<typename TArgs>
	void handleEvent(Widget& widget, JavaScriptEvent<TArgs>& ev, const std::string& eventType)
	{
		if (ev.hasJavaScriptHandlers() || ev.hasLocalHandlers())
		{
			// if we have exactly one delegate, it is simple but if we have more than one
			// we need to generate a wrapper method that calls all delegates sequentially.
			// we assume that the method signature of the delegates is correct
			const std::set<JSDelegate>& del = ev.jsDelegates();
			std::set<JSDelegate>::const_iterator it = del.begin();
			std::set<JSDelegate>::const_iterator itEnd = del.end();
			for (; it != itEnd; ++it)
			{
				addJavaScriptInclude(it->jsFile());
			}

			addJavaScript("function " + generateMultiEventHandlerName(widget, eventType) + "(ev) {");
			addJavaScript("if (!ev) {");
			addJavaScript("ev = window.event;");
			addJavaScript("}");
			it = del.begin();
			itEnd = del.end();
			for (; it != itEnd; ++it)
			{
				addJavaScript(it->functionName()+"(ev);");
			}
			if (ev.hasLocalHandlers())
			{
				// add a callback to the server
				std::string addr = _rootAddress.toString() + "/events";
				Poco::replaceInPlace(addr, "//", "/");

				if (eventType == EVENT_SINGLECLICK || 
					eventType == EVENT_DOUBLECLICK || 
					eventType == EVENT_MOUSEDOWN || 
					eventType == EVENT_MOUSEUP)
					addJavaScript("mouseEventCallBack(ev, \"" + addr + "\");");
				else if (eventType == EVENT_MOUSEOVER || 
					eventType == EVENT_MOUSEOUT || 
					eventType == EVENT_MOUSEMOVE || 
					eventType == EVENT_FOCUSENTER || 
					eventType == EVENT_FOCUSLOST)
					addJavaScript("mouseMoveEventCallBack(ev, \"" + addr + "\");");
				else if (eventType == EVENT_KEYUP ||
					eventType == EVENT_KEYDOWN ||
					eventType == EVENT_KEYPRESSED)
					addJavaScript("keyboardEventCallBack(ev, \"" + addr + "\");");
				else
					addJavaScript("eventCallBack(ev, \"" + addr + "\");");
			}
			addJavaScript("}");
		}
	}

	template<typename TArgs>
	void handleCallbackGeneration(Widget& widget, JavaScriptEvent<TArgs>& ev, const std::string& eventType, Widget::Attributes& attr)
	{
		if (ev.hasJavaScriptHandlers() || ev.hasLocalHandlers())
		{
			std::string fctName = generateMultiEventHandlerName(widget, eventType);
			attr.insert(std::make_pair(eventType, fctName+"(event)"));
		}
	}

	void handleWidgetCallback(Widget& widget, Widget::Attributes& attr);

	static std::string autoID();
		/// Automatically generates an id

	static std::string generateMultiEventHandlerName(const Widget& widget, const std::string& eventType);

	static std::string generateServerEventHandlerName(const Widget& widget);

	static void handleCallbackGeneration(Widget& widget, const std::string& eventType, Widget::Attributes& attr);
		/// Adds the function attribute to attr


private:
	std::ostream& _out;
	Poco::URI     _rootAddress;
	Form*         _pActiveForm;
	std::list<std::string> _javaScriptHeader;
	std::list<std::string> _javaScriptOnLoad;
	std::set<std::string>  _javaScriptIncludes;
};


inline void HTMLVisitor::writeOpenWithAttributes(const std::string& tag, const Widget& widget)
{
	writeOpenWithAttributes(tag, widget.getAttributes());
}


inline void HTMLVisitor::writeTagWithAttributes(const std::string& tag, const Widget& widget)
{
	writeTagWithAttributes(tag, widget.getAttributes());
}


inline void HTMLVisitor::writeOpenTag(const std::string& tag)
{
	_out << PRE_OPEN << tag << CLOSE;
}


inline void HTMLVisitor::writeCloseTag(const std::string& tag)
{
	_out << PRE_CLOSE << tag << CLOSE;
}


inline void HTMLVisitor::writeTag(const std::string& tag)
{
	_out << PRE_OPEN << tag << FULLCLOSE;
}


inline void HTMLVisitor::addJavaScript(const std::string& js)
{
	_javaScriptHeader.push_back(js);
}


inline void HTMLVisitor::addJavaScriptInclude(const std::string& js)
{
	_javaScriptIncludes.insert(js);
}


inline void HTMLVisitor::addToOnLoad(const std::string& js)
{
	_javaScriptOnLoad.push_back(js);
}


inline std::string HTMLVisitor::onClickMethodName(const std::string& id)
{
	return VAL_ONCLICK + id;
}


inline void HTMLVisitor::assertHasID(Widget& w)
{
	if (w.getAttrID().empty())
		w.setAttrID(autoID());
}


} } // namespace Poco::WebWidgets


#endif // WebWidgets_HTMLVisitor_INCLUDED
