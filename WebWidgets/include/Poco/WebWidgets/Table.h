//
// Table.h
//
// $Id: //poco/Main/WebWidgets/include/Poco/WebWidgets/Table.h#3 $
//
// Library: WebWidgets
// Package: WebGUI
// Module:  Table
//
// Definition of the Table class.
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef WebWidgets_Table_INCLUDED
#define WebWidgets_Table_INCLUDED


#include "Poco/WebWidgets/WebWidgets.h"
#include "Poco/WebWidgets/Widget.h"
#include "Poco/WebWidgets/Panel.h"
#include "Poco/AutoPtr.h"
#include <vector>


namespace Poco {
namespace WebWidgets {


class WebWidgets_API Table: public Panel
	/// Table is a matrix of Widgets
	///     
	///     <table cols="5" rows="3" border="0" footer="false" header="true" width="200">
	///         <header id="" class="" style="" title=""/>
	///         <body id="" class="" style="" title=""/>
	///         <footer id="" class="" style="" title=""/>
	///         <cell row="0" col="0"> [some widget]</cell>
	///         <!-- col 1 will be empty-->
	///         <cell row="0" col="2"> [some widget]</cell>
	///     </table>
	/// cols is mandatory, rows, border, width, header and footer are optional, col and row index are numbers that start with 0
	/// if no col or row index is given, the Table will autoincrement the last used col/row value by 
	/// first incrementing the col, then on a column overflow the row.
	/// Note that if table.rows is set, the table will be truncated/resized to that rows value!
{
public:
	static const std::string FACTORY_ID;
	static const std::string XML_WIDTH;
	static const std::string XML_BORDER;
	static const std::string XML_HEADER;
	static const std::string XML_BODY;
	static const std::string XML_FOOTER;
	static const std::string VAL_COLS;
	static const std::string VAL_ROWS;
	static const std::string VAL_COL;
	static const std::string VAL_ROW;
	static const std::string VAL_CELL;
	static const std::string VAL_TABLEFOOTER;

	typedef std::vector<Poco::AutoPtr<Widget> > Row;
	typedef std::vector<Row> Content;

	Table(Poco::UInt32 numRows, Poco::UInt32 numCols, bool tableHasFooter, bool tableHasHeader = true, Poco::UInt32 borderStrength = 0, Poco::UInt32 width = 0);
		/// Creates the Table with the given dimension. Per default all table cells are empty

	Table(const Poco::XML::Element* pElem);
		/// Creates the Table from the XML element

	virtual ~Table();
		/// Destroys the Table.

	void addWidget(Poco::UInt32 row, Poco::UInt32 col, Poco::AutoPtr<Widget> ptrWidget);
		/// Adds a Widget to the Table, the table will be set as new parent of ptrWidget.
		/// Row and col must be smaller than the dimension of the table

	Poco::AutoPtr<Widget> removeWidget(Poco::UInt32 row, Poco::UInt32 col);
		/// Removes a Widget from the Table.

	Poco::AutoPtr<Widget> getWidget(Poco::UInt32 row, Poco::UInt32 col) const;
		/// Returns the Widget stored at the given position can return a Nullptr

	void appendRow(const Row& aRow);
		/// Inserts the row at the end of the table.

	std::size_t numberOfRows() const;
		/// Returns the number of rows

	std::size_t numberOfColumns() const;
		/// Returns the number of columns

	Poco::UInt32 getBorder() const;
		/// Returns the border thickness

	Poco::UInt32 getWidth() const;
		/// Returns the Width in Pixels

	bool hasFooter() const;
		/// Returns if the table has a footer row. If yes the last row of the table will be formatted like a footer

	bool hasHeader() const;
		/// Returns if the table has a footer row. If yes the last row of the table will be formatted like a footer

	const Table::Content& getContent() const;
		/// Returns the content of the table

	void accept(Visitor& v);

	void setHeaderAttributes(const Widget::Attributes& hdrAttr);
		/// sets attributes for the header of the table

	const Widget::Attributes& getHeaderAttributes() const;
		/// Returns the header attributes

	void setBodyAttributes(const Widget::Attributes& hdrAttr);
		/// sets attributes for the body of the table

	const Widget::Attributes& getBodyAttributes() const;
		/// Returns the body attributes

	void setFooterAttributes(const Widget::Attributes& hdrAttr);
		/// sets attributes for the footer of the table

	const Widget::Attributes& getFooterAttributes() const;
		/// Returns the footer attributes

	Poco::AutoPtr<Widget> find(const std::string& id) const;

	Poco::AutoPtr<Widget> clone() const;

private:
	void appendEmptyRow();

private:
	std::size_t  _cols;
	Poco::UInt32 _border;
	Poco::UInt32 _width;
	bool         _tableHasFooter;
	bool         _tableHasHeader;
	Content      _table;
	Widget::Attributes _headerAttr;
	Widget::Attributes _bodyAttr;
	Widget::Attributes _footerAttr;
};


inline std::size_t Table::numberOfRows() const
{
	return _table.size();
}


inline std::size_t Table::numberOfColumns() const
{
	return _cols;
}


inline Poco::UInt32 Table::getBorder() const
{
	return _border;
}


inline Poco::UInt32 Table::getWidth() const
{
	return _width;
}


inline bool Table::hasFooter() const
{
	return _tableHasFooter;
}


inline bool Table::hasHeader() const
{
	return _tableHasHeader;
}


inline const Table::Content& Table::getContent() const
{
	return _table;
}


inline void Table::setHeaderAttributes(const Widget::Attributes& hdrAttr)
{
	_headerAttr = hdrAttr;
}


inline const Widget::Attributes& Table::getHeaderAttributes() const
{
	return _headerAttr;
}


inline void Table::setBodyAttributes(const Widget::Attributes& bAttr)
{
	_bodyAttr = bAttr;
}


inline const Widget::Attributes& Table::getBodyAttributes() const
{
	return _bodyAttr;
}


inline void Table::setFooterAttributes(const Widget::Attributes& fAttr)
{
	_footerAttr = fAttr;
}


inline const Widget::Attributes& Table::getFooterAttributes() const
{
	return _footerAttr;
}


inline void Table::appendEmptyRow()
{
	_table.push_back(Row(_cols, Poco::AutoPtr<Widget>()));
}


} } // namespace Poco::WebWidgets


#endif // WebWidgets_Table_INCLUDED
