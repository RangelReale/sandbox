//
// HidablePanel.h
//
// $Id: //poco/Main/WebWidgets/include/Poco/WebWidgets/HidablePanel.h#4 $
//
// Library: WebWidgets
// Package: WebGUI
// Module:  HidablePanel
//
// Definition of the HidablePanel class.
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef WebWidgets_HidablePanel_INCLUDED
#define WebWidgets_HidablePanel_INCLUDED


#include "Poco/WebWidgets/SimplePanel.h"
#include "Poco/URI.h"


namespace Poco {
namespace WebWidgets {


class WebWidgets_API HidablePanel: public SimplePanel
	/// A HidablePanel decorates a panel and allows to hide it:
	///     
	///     <hidablePanel on="on.png" off="off.png" text="Some text" inline="true|false">
	///         <oneSingleChildWidget...>
	///     </hidablePanel>
{
public:
	static const std::string FACTORY_ID;
	static const std::string XML_ON;
	static const std::string XML_OFF;
	static const std::string XML_TEXT;
	static const std::string ATTR_INLINE;


	HidablePanel(Poco::AutoPtr<Widget> ptr, const Poco::URI& onImage, const Poco::URI& offImage, const std::string& text, bool inlineMode = false);
		/// Creates the HidablePanel. inlineMode defines how the HidablePanel is rendered when visible. If true we allow text to flow
		/// around it, otherwise it reserves the whole page length

	HidablePanel(const Poco::XML::Element* pElem);
		/// Creates the HidablePanel from XML.

	virtual ~HidablePanel();
		/// Destroys the HidablePanel.

	const Poco::URI& onImg() const;

	const Poco::URI& offImg() const;

	const std::string& text() const;

	bool inlineMode() const;

	void accept(Visitor& v);

	void preAccept(Visitor& v);

	Poco::AutoPtr<Widget> clone() const;

private:
	Poco::URI   _onImg;
	Poco::URI   _offImg;
	std::string _text;
	bool        _inlineMode;

};


inline const Poco::URI& HidablePanel::onImg() const
{
	return _onImg;
}


inline const Poco::URI& HidablePanel::offImg() const
{
	return _offImg;
}


inline const std::string& HidablePanel::text() const
{
	return _text;
}


inline bool HidablePanel::inlineMode() const
{
	return _inlineMode;
}


} } // namespace Poco::WebWidgets


#endif // WebWidgets_HidablePanel_INCLUDED
