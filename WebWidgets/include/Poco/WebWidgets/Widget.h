//
// Widget.h
//
// $Id: //poco/Main/WebWidgets/include/Poco/WebWidgets/Widget.h#7 $
//
// Library: WebWidgets
// Package: WebGUI
// Module:  Widget
//
// Definition of the Widget class.
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef WebWidgets_Widget_INCLUDED
#define WebWidgets_Widget_INCLUDED


#include "Poco/WebWidgets/WebWidgets.h"
#include "Poco/WebWidgets/GUIObject.h"
#include "Poco/WebWidgets/MouseEventArgs.h"
#include "Poco/WebWidgets/MouseMovementArgs.h"
#include "Poco/WebWidgets/KeyboardFocusArgs.h"
#include "Poco/WebWidgets/KeyEventArgs.h"
#include "Poco/WebWidgets/JavaScriptEvent.h"
#include <map>


namespace Poco {
namespace WebWidgets {


class WebWidgets_API Widget: public GUIObject
	/// Widget is the root class for all loadable GUI elements.
	/// All subclasses of Widget support the following attributes:
	///  * id
	///  * class
	///  * lang
	///  * style
	///  * title
	/// 
	/// To register events at a Widget via an XML configuration file, add a subchild named "events"
	/// to the widget:
	///     <widget>
	///         <events>
	///             <onclick>
	///             <ondblclick>
	///             <onmousedown>
	///             <onmouseup>
	///             <onmouseout>
	///             <onmouseover>
	///             <onmousemove>
	///             <onfocus>
	///             <onblur>
	///             <onkeyup>
	///             <onkeydown>
	///             <onkeypressed>
	///         </events>
	///     </widget>
	///
	/// An InputField supports additionally "onselect" and "onchange" events.
	/// 
	/// For each event one can add delegates. Note that currently it is only possible to add javascript
	/// method calls as delegates that expect as input an argument of type (event).
	///      <onclick>
	///          <delegate function="printMessage" file="additional.js"/>
	///          <delegate function="verifyInput" file="additional.js"/>
	///      </onclick>
	///
	/// The same delegates can be added manually in your program:
	///     Poco::AutoPtr<Button> ptrBut = new Button("Submit");
	///     ptrBut->ESingleClick += jsDelegate("printMessage", "additional.js");
	///     ptrBut->ESingleClick += jsDelegate("verifyInput",  "additional.js");
	///
	/// The generated HTML code will include the necessary javascript files and invoke the
	/// javascript methods in the same sequence they were declared.
	///
	/// Per default each widget has no local server listener. Adding server side listeners (ie. C++ callbacks)
	/// is similar to the way BasicEvents are treated and can only be done in your program code
	/// not via the XML file:
	///     Poco::AutoPtr<Button> ptrBut = new Button("Submit");
	///     ptrBut->ESingleClick += delegate(this, &HTTPFormServer::onClicked);
	///
	/// For each event that has a server side listener registered, the HTML code will automatically 
	/// generate a callback to the server. The invocation sequence is always first javascript client listener,
	/// then C++ server callback. Thus, only use server side callbacks when necessary! They will slow down
	/// your HTML GUI.

{
public:
	static const std::string XML_ID;
	static const std::string XML_CLASS;
	static const std::string XML_LANG;
	static const std::string XML_STYLE;
	static const std::string XML_TITLE;
	static const std::string VAL_EMPTY;

	JavaScriptEvent<MouseEventArgs> ESingleClick;
	JavaScriptEvent<MouseEventArgs> EDoubleClick;
	JavaScriptEvent<MouseEventArgs> EMouseDown;
	JavaScriptEvent<MouseEventArgs> EMouseUp;
	JavaScriptEvent<MouseMovementArgs> EMouseOver;
	JavaScriptEvent<MouseMovementArgs> EMouseOut;
	JavaScriptEvent<MouseMovementArgs> EMouseMove;
	JavaScriptEvent<KeyboardFocusArgs> EFocusEnter;
	JavaScriptEvent<KeyboardFocusArgs> EFocusLost;
	JavaScriptEvent<KeyEventArgs> EKeyUp;
	JavaScriptEvent<KeyEventArgs> EKeyDown;
	JavaScriptEvent<KeyEventArgs> EKeyPressed;

	typedef std::map<std::string, std::string> Attributes;

	Widget();
		/// Creates the Widget.

	Widget(const Poco::XML::Element* pElem);
		/// Creates the Widget.

	virtual ~Widget();
		/// Destroys the Widget.

	const std::string& getAttrID() const;
	const std::string& getAttrClass() const;
	const std::string& getAttrLang() const;
	const std::string& getAttrTitle() const;
	const std::string& getAttrStyle() const;

	void setAttrID(const std::string& val);
	void setAttrClass(const std::string& val);
	void setAttrLang(const std::string& val);
	void setAttrTitle(const std::string& val);
	void setAttrStyle(const std::string& val);

	Attributes::const_iterator end() const;
		/// Returns the end iterator of the Attributes map

	Attributes::const_iterator begin() const;
		/// Returns the begin iterator of the Attributes map

	const Attributes& getAttributes() const;
		/// Returns all attributes

	void setAttributes(const Attributes& attr);
		/// Erase all old attributes and set attr as new ones

	Widget* getParent() const;
		/// Returns the parent or null if we don't have a parent

	void setParent(Widget* pWidget);
		/// Sets the parent object.

	void preAccept(Visitor& v);

	virtual Poco::AutoPtr<Widget> clone() const = 0;
		/// Deep-copies the Widget and all of its children

	static Poco::AutoPtr<Widget> find(Poco::AutoPtr<Widget> widget, const std::string& id);
		/// Searches if the passed widget or any of its children has the passed id

protected:
	virtual Poco::AutoPtr<Widget> find(const std::string& id) const = 0;
		/// Searches recursively all children until it finds a Widget with the given id.
		/// Returns a null AutoPtr if nothing if none found.
		/// Due to the fact we return an AutoPtr, we cannot compare with the id of the "this" object.
		/// Use the static function for that

	void addOptional(const std::string& id, const std::string& value);
		/// Only adds/updates attributes with non-empty values
		/// An empty value will remove the attribute!

	void addAttribute(const std::string& id, const std::string& value);
		/// Add/updates an attribute value

	void eraseAttribute(const std::string& id);
		/// Erases an attribute value

	const std::string& getValue(const std::string& id) const;
		/// Returns a value for the given attribute id, if not found
		/// it returns an empty string

	Attributes::const_iterator findAttr(const std::string& id) const;
		/// Searches for the given attribute id, returns end() if not found

	static void parseUniversalAttributes(const Poco::XML::Element* pElem, Attributes& attr);
		/// Loads universal attributes and writes them to param attr

	static void addOptional(const std::string& id, const std::string& value, Attributes& attr);
		/// Only adds/updates attributes with non-empty values
		/// An empty value will remove the attribute!

	static void addAttribute(const std::string& id, const std::string& value, Attributes& attr);
		/// Add/updates an attribute value

	static void eraseAttribute(const std::string& id, Attributes& attr);
		/// Erases an attribute value

private:
	Widget* _pParent;
	Attributes _attr;

};


inline const Widget::Attributes& Widget::getAttributes() const
{
	return _attr;
}


inline Widget* Widget::getParent() const
{
	return _pParent;
}


inline void Widget::setParent(Widget* pWidget)
{
	_pParent = pWidget;
}


inline void Widget::addOptional(const std::string& id, const std::string& value)
{
	addOptional(id, value, _attr);
}


inline void Widget::addAttribute(const std::string& id, const std::string& value)
{
	addAttribute(id, value, _attr);
}


inline void Widget::eraseAttribute(const std::string& id)
{
	eraseAttribute(id, _attr);
}


inline void Widget::eraseAttribute(const std::string& id, Attributes& attr)
{
	attr.erase(id);
}


inline Widget::Attributes::const_iterator Widget::findAttr(const std::string& id) const
{
	return _attr.find(id);
}


inline Widget::Attributes::const_iterator Widget::end() const
{
	return _attr.end();
}


inline Widget::Attributes::const_iterator Widget::begin() const
{
	return _attr.begin();
}


inline const std::string& Widget::getAttrID() const
{
	return getValue(XML_ID);
}


inline const std::string& Widget::getAttrClass() const
{
	return getValue(XML_CLASS);
}


inline const std::string& Widget::getAttrLang() const
{
	return getValue(XML_LANG);
}


inline const std::string& Widget::getAttrTitle() const
{
	return getValue(XML_TITLE);
}


inline const std::string& Widget::getAttrStyle() const
{
	return getValue(XML_STYLE);
}


inline void Widget::setAttrID(const std::string& val)
{
	addAttribute(XML_ID, val);
}


inline void Widget::setAttrClass(const std::string& val)
{
	addAttribute(XML_CLASS, val);
}


inline void Widget::setAttrLang(const std::string& val)
{
	addAttribute(XML_LANG, val);
}


inline void Widget::setAttrTitle(const std::string& val)
{
	addAttribute(XML_TITLE, val);
}


inline void Widget::setAttrStyle(const std::string& val)
{
	addAttribute(XML_STYLE, val);
}


inline void Widget::setAttributes(const Attributes& attr)
{
	_attr = attr;
}


} } // namespace Poco::WebWidgets


#endif // WebWidgets_Widget_INCLUDED
