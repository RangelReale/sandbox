//
// CyclicBarrier.cpp
//
// $Id: //poco/1.3/Foundation/testsuite/src/CyclicBarrier.cpp#5 $
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Thread.h"
#include "Poco/CyclicBarrier.h"
#include "Poco/Random.h"

#include <iostream>
#if defined(__sun) && defined(__SVR4)
#define __EXTENSIONS__
#include <limits.h>
#endif


using Poco::Thread;
using Poco::Runnable;
using Poco::Event;
using Poco::CyclicBarrier;

//typedef Poco::CyclicBarrier<Poco::Mutex> MutexBarrier;
typedef Poco::CyclicBarrier<Poco::FastMutex> MutexBarrier;

MutexBarrier gBarrier(4,0);

class MyRunnable: public Runnable
{
public:
	MyRunnable(int wait = 0): _wait(wait)
	{
		while(rg.next(20)){
			rg.next(100);
		}
	}

	void run()
	{
		Thread::sleep(rg.next(10000));
		std::cout<< "enter wait\n";
		if(_wait > 0){
			gBarrier.wait(_wait);
		}else{
			gBarrier.wait();
		}
		std::cout<< "after wait\n";
	}

private:
	int		_wait;
	Poco::Random rg;
};


class ActionRunnable: public Runnable
{
public:
	ActionRunnable()
	{
	}

	void run()
	{
		std::cout<< "doing action\n";
	}
};

ActionRunnable action;

Poco::CyclicBarrier<Poco::Mutex> gActionBarrier(4, &action);

class MyActionRunnable: public Runnable
{
public:
	MyActionRunnable(int wait = 0): _wait(wait)
	{
	}

	void run()
	{
		Poco::Random rg;
		Thread::sleep(rg.next(10000));
		Thread* pThread = Thread::current();
		std::cout<< "action : enter wait\n";
		if(_wait > 0){
			gActionBarrier.wait(_wait);
		}else{
			gActionBarrier.wait();
		}
		std::cout<< "action : after wait\n";
	}

private:
	int		_wait;

};



void testCyclicBarrier()
{
	Thread thread1;
	Thread thread2;
	Thread thread3;
	Thread thread4;
	MyRunnable r;    

	thread1.start(r);
	thread2.start(r);
	thread3.start(r);
	thread4.start(r);

	thread1.join();
	thread2.join();
	thread3.join();
	thread4.join();
}

void testCyclicBarrierAction()
{
	Thread thread1;
	Thread thread2;
	Thread thread3;
	Thread thread4;
	MyActionRunnable r;    

	thread1.start(r);
	thread2.start(r);
	thread3.start(r);
	thread4.start(r);

	thread1.join();
	thread2.join();
	thread3.join();
	thread4.join();

}

int main()
{
	testCyclicBarrier();
	testCyclicBarrierAction();
	testCyclicBarrierAction();
}
