//
// CyclicBarrier.cpp
//
// $Id: //poco/1.3/Foundation/testsuite/src/CyclicBarrier.cpp#5 $
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Thread.h"
#include "Poco/Mailbox.h"
#include "Poco/Random.h"

#include <iostream>
#if defined(__sun) && defined(__SVR4)
#define __EXTENSIONS__
#include <limits.h>
#endif


using Poco::Thread;
using Poco::Runnable;
using Poco::Event;
using Poco::Mailbox;

typedef int TMessage;

typedef Poco::Mailbox<TMessage, Poco::Mutex> IntMailbox;

static IntMailbox gMailbox(10);

class Sender: public Runnable
{
public:
	Sender()
	{

	}

	void run()
	{
		try
		{
			while(true){
				TMessage msg = rg.next(100);
				std::cout << "sender: " << msg << std::endl;
				gMailbox.post(msg);
				Thread::sleep(rg.next(100));
			}
		}
		catch(...)
		{
			std::cout << "error\n";
		}
		

	}

private:
	Poco::Random rg;
};

class Receiver: public Runnable
{
public:
	Receiver()
	{
	}

	void run()
	{
		try
		{
			while(true){
				TMessage msg = gMailbox.pend();
				std::cout << "receiver: " << msg << std::endl;
			}
		}
		catch(...)
		{
			std::cout << "error\n";
		}
	}
};

void testBlockPostPend()
{
	Thread thread1;
	Thread thread2;
	Sender sender;    
	Receiver receiver;    

	thread1.start(sender);
	thread2.start(receiver);

	thread1.join();
	thread2.join();
}

int main()
{
	testBlockPostPend();
}
