//
// DatagramLocalSocketTest.cpp
//
// $Id: //poco/svn/Net/testsuite/src/DatagramLocalSocketTest.cpp#2 $
//
// Copyright (c) 2005-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "DatagramLocalSocketTest.h"
#include "CppUnit/TestCaller.h"
#include "CppUnit/TestSuite.h"
#include "UDPLocalEchoServer.h"
#include "Poco/Sockets/DatagramSocket.h"
#include "Poco/Sockets/SocketAddress.h"
#include "Poco/Sockets/SocketException.h"
#include "Poco/Timespan.h"
#include "Poco/Stopwatch.h"


using Poco::Sockets::Socket;
using Poco::Sockets::DatagramSocket;
using Poco::Sockets::SocketAddress;
using Poco::Sockets::Address;
using Poco::Timespan;
using Poco::Stopwatch;
using Poco::TimeoutException;
using Poco::InvalidArgumentException;
using Poco::IOException;
#include <iostream>

DatagramLocalSocketTest::DatagramLocalSocketTest(const std::string& name): CppUnit::TestCase(name)
{
}


DatagramLocalSocketTest::~DatagramLocalSocketTest()
{
}


void DatagramLocalSocketTest::testEcho()
{
	UDPLocalEchoServer echoServer;
	DatagramSocket ss(SocketAddress("/tmp/poco.client.udp.sock"), true);
	
	SocketAddress addr(echoServer.address().toString());
	ss.connect(addr);
	int n = ss.sendBytes("hello", 5);
	assert (n == 5);
	char buffer[256] = { 0 };
	n = ss.receiveBytes(buffer, sizeof(buffer));
	assert (n == 5);
	assert (std::string(buffer, n) == "hello");
	ss.close();
}


void DatagramLocalSocketTest::testSendToReceiveFrom()
{
	SocketAddress serverAddr("/tmp/poco.server.udp.sock");
	UDPLocalEchoServer echoServer(serverAddr);
	DatagramSocket ss(Address::LOCAL);
	SocketAddress clientAddr("/tmp/poco.client.udp.sock");
	ss.bind(clientAddr, true);
	int n = ss.sendTo("hello", 5, serverAddr);
	assert (n == 5);
	char buffer[256];
	SocketAddress sa;
	n = ss.receiveFrom(buffer, sizeof(buffer), sa);
	assert (sa.host() == echoServer.address().host());
	assert (n == 5);
	assert (std::string(buffer, n) == "hello");
	ss.close();
}


void DatagramLocalSocketTest::setUp()
{
}


void DatagramLocalSocketTest::tearDown()
{
}


CppUnit::Test* DatagramLocalSocketTest::suite()
{
	CppUnit::TestSuite* pSuite = new CppUnit::TestSuite("DatagramLocalSocketTest");

	CppUnit_addTest(pSuite, DatagramLocalSocketTest, testEcho);
	CppUnit_addTest(pSuite, DatagramLocalSocketTest, testSendToReceiveFrom);

	return pSuite;
}
