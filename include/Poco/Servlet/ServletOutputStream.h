//
// ServletOutputStream.h
//
//
// Library: Servlet
// Package: Servlet
// Module:  ServletOutputStream
//
// Definition of the ServletOutputStream class.
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
//
// The code in this file is derived from Apache Tomcat project
// Copyright (c) 2004 The Apache Software Foundation.
// http://www.apache.org/licenses/LICENSE-2.0
// 


#ifndef Servlet_ServletOutputStream_INCLUDED
#define Servlet_ServletOutputStream_INCLUDED


#include "Poco/Servlet/ServletStream.h"
#include "Poco/Servlet/ServletBase.h"
#include "Poco/Mutex.h"


namespace Poco {
namespace Servlet {


class Servlet_API ServletOutputStream: public ServletIOS, public std::ostream
	/// Provides an output stream for sending data to the client.
{
public:
	ServletOutputStream(std::ostream& ostr);
		/// Creates the ServletOutputStream.
	
	virtual ~ServletOutputStream();
		/// Destroys the ServletOutputStream.

	void print(char c);
		/// Writes a char value to the client.

	void print(double d);
		/// Writes a double value to the client.

	void print(float f);
		/// Writes a float value to the client.

	void print(int i);
		/// Writes an integer value to the client.

	void print(long l);
		/// Writes a long value to the client.

	void print(const std::string& arg);
		/// Writes a string value to the client.
	
	void print(const char* arg);
		/// Writes a value to the client.

	void println();
		/// Writes a carriage return-line feed to the client.

	template<typename T>
	void println(const T& arg)
		/// Writes a value to the client, followed by a carriage return-line feed.
	{ 
		print(arg);
		println();
	}

	void close();

private:
	Poco::Mutex _mutex;
};


///
/// inlines
///

inline void ServletOutputStream::print(char c)
{ 
	Poco::Mutex::ScopedLock lock(_mutex);
	*this << c;
}


inline void ServletOutputStream::print(double d)
{ 
	Poco::Mutex::ScopedLock lock(_mutex);
	*this << d;
}


inline void ServletOutputStream::print(float f)
{ 
	Poco::Mutex::ScopedLock lock(_mutex);
	*this << f;
}


inline void ServletOutputStream::print(int i)
{ 
	Poco::Mutex::ScopedLock lock(_mutex);
	*this << i;
}


inline void ServletOutputStream::print(long l)
{ 
	Poco::Mutex::ScopedLock lock(_mutex);
	*this << l;
}


inline void ServletOutputStream::print(const std::string& arg)
{ 
	Poco::Mutex::ScopedLock lock(_mutex);
	std::operator<<(*this, arg); 
}


inline void ServletOutputStream::print(const char* pArg)
{ 
	Poco::Mutex::ScopedLock lock(_mutex);
	if (pArg) std::operator<<(*this, pArg); 
}


inline void ServletOutputStream::println()
{
	Poco::Mutex::ScopedLock lock(_mutex);
	*this << std::endl;
}


inline void ServletOutputStream::close()
{
	_buf.close();
}


} } // namespace Poco::Servlet


#endif // Servlet_ServletOutputStream_INCLUDED
