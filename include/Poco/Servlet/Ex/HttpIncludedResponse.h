//
// HttpIncludedResponse.h
//
//
// Library: ServletEx
// Package: Http
// Module:  HttpIncludedResponse
//
// Definition of the HttpIncludedResponse class.
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef Servlet_Http_HttpIncludedResponse_INCLUDED
#define Servlet_Http_HttpIncludedResponse_INCLUDED


#include "Poco/Servlet/ServletBase.h"
#include "Poco/Servlet/HttpServletResponseWrapper.h"


namespace Poco {
namespace Servlet {
namespace Ex {


class Servlet_API HttpIncludedResponse : public HttpServletResponseWrapper
	/// Provides a wrapper suitable for inclusion. 
	/// The wrapper can not modify headers, path elements or status code.
{
public:

	HttpIncludedResponse(HttpServletResponse& response);
		/// Constructs response wrapper.
 
	 ~HttpIncludedResponse();
		/// Destroys response wrapper.

	 void addCookie(const Cookie& cookie);
 		/// The default behavior of this method is to call 
		/// addCookie(Cookie cookie) on the wrapped response object.

	 std::string encodeURL(const std::string& url);
 		/// The default behavior of this method is to call 
		/// encodeURL(const std::string& url) on the wrapped response object.

	 std::string encodeRedirectURL(const std::string& url);
 		/// The default behavior of this method is to return 
		/// encodeRedirectURL(const std::string& url) on the wrapped response object.

	 void sendError(int sc, const std::string& msg);
 		/// The default behavior of this method is to call 
		/// sendError(int sc, String msg) on the wrapped response object.

	 void sendError(int sc);
 		/// The default behavior of this method is to call sendError(int sc)
 		/// on the wrapped response object.

	 void sendRedirect(const std::string& location);
 		/// The default behavior of this method is to return 
		/// sendRedirect(const std::string& location) on the wrapped response object.

	 void setDateHeader(const std::string& name, long date);
 		/// The default behavior of this method is to call 
		/// setDateHeader(const std::string& name, long date)
 		/// on the wrapped response object.
 
	 void addDateHeader(const std::string& name, long date);
 		/// The default behavior of this method is to call 
 		/// addDateHeader(const std::string& name, long date)
 		/// on the wrapped response object.

	 void setHeader(const std::string& name, const std::string& value);
 		/// The default behavior of this method is to return 
 		/// setHeader(const std::string& name, String value)
 		/// on the wrapped response object.
 
	 void addHeader(const std::string& name, const std::string& value);
 		/// The default behavior of this method is to return 
		/// addHeader(const std::string& name, String value)
 		/// on the wrapped response object.

	 void setIntHeader(const std::string& name, int value);
 		/// The default behavior of this method is to call 
		/// setIntHeader(const std::string& name, int value)
 		/// on the wrapped response object.

	 void addIntHeader(const std::string& name, int value);
 		/// The default behavior of this method is to call 
		/// addIntHeader(const std::string& name, int value)
 		/// on the wrapped response object.

	 void setStatus(int sc);
 		/// The default behavior of this method is to call setStatus(int sc)
 		/// on the wrapped response object.

	 void setStatus(int sc, const std::string& sm);
 		/// The default behavior of this method is to call 
		/// setStatus(int sc, String sm)on the wrapped response object.

private: 
	HttpIncludedResponse(const HttpIncludedResponse&);
};


///
/// inlines
///


inline void HttpIncludedResponse::addCookie(const Cookie& cookie) 
{
}


inline std::string HttpIncludedResponse::encodeURL(const std::string& url) 
{
	return url;
}


inline std::string HttpIncludedResponse::encodeRedirectURL(const std::string& url) 
{
	return url;
}


inline void HttpIncludedResponse::sendError(int sc, const std::string& msg) 
{
}


inline void HttpIncludedResponse::sendError(int sc) 
{
}


inline void HttpIncludedResponse::sendRedirect(const std::string& location) 
{
}


inline void HttpIncludedResponse::setDateHeader(const std::string& name, long date) 
{
}


inline void HttpIncludedResponse::addDateHeader(const std::string& name, long date) 
{
}


inline void HttpIncludedResponse::setHeader(const std::string& name, const std::string& value) 
{
}


inline void HttpIncludedResponse::addHeader(const std::string& name, const std::string& value) 
{
}


inline void HttpIncludedResponse::setIntHeader(const std::string& name, int value) 
{
}


inline void HttpIncludedResponse::addIntHeader(const std::string& name, int value) 
{
}


inline void HttpIncludedResponse::setStatus(int sc) 
{
}


inline void HttpIncludedResponse::setStatus(int sc, const std::string& sm) 
{
}


} } } // namespace Poco::Servlet::Ex


#endif //Servlet_Http_HttpIncludedResponse_INCLUDED
