//
// HttpServletDispatcher.h
//
//
// Library: ServletEx
// Package: Http
// Module:  HttpServletDispatcher
//
// Definition of the HttpServletDispatcher class.
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef ServletEx_Http_HttpServletDispatcher_INCLUDED
#define ServletEx_Http_HttpServletDispatcher_INCLUDED


#include "Poco/Servlet/ServletBase.h"
#include "Poco/Servlet/Servlet.h"
#include "Poco/Servlet/Ex/ServletDispatcher.h"
#include "Poco/Servlet/Ex/FilterDispatcher.h"
#include "Poco/Servlet/Ex/SessionManager.h"
#include "Poco/Servlet/Ex/ServletProvider.h"
#include "Poco/Servlet/HttpServletRequest.h"
#include "Poco/Servlet/HttpServletResponse.h"
#include "Poco/Servlet/ServletContext.h"
#include "Poco/Path.h"
#include "Poco/Mutex.h"
#include "Poco/Exception.h"
#include <map>


namespace Poco {
namespace Servlet {
namespace Ex {


class Servlet_API HttpServletDispatcher : public ServletDispatcher
{
public:
	typedef std::map<std::string, std::string> MimeMap;

	HttpServletDispatcher(FilterDispatcher* pFilterDispatcher=0, SessionManager* pSessionManager=0);
		/// Constructor.

	~HttpServletDispatcher();
		/// Destructor.

	virtual void dispatch(ServletRequest& request, ServletResponse& response, const std::string& path="");
		/// Dispatch a call to appropriate servlet.

	const MimeMap& getMimeMap() const;
		/// Returns the MIME map.

	std::string mimeType(const std::string& extension) const;
		/// Returns MIME type for the specified extension.

	void addMediaType(const std::string& extension, const std::string& type);
		/// Adds media type for specified extension.

	bool isStaticFileRequest(const std::string& path);
		// The supplied path is the requested path. 
		// Function returns true if request is for a static file.
		// If the file extension is mapped to a servlet, the existence of
		// physical file with that extension must not hide the
		// servlet handling it, so even if the file exists, false is returned.
		

	void handleFileRequest(const std::string& abspath, HttpServletResponse& response);
		/// Handles file requests. The requests served by this method can be of two kinds:
		///
		///  1) Requests for files in a context known by the container (called from dispatch()).
		///     These are only handled in this function if there is no servlet mapped to the
		///     requested file extension. If there is mapping to a servlet, then the request is 
		///     passed to the apropriate servlet and this function is not called.
		///
		///  2) Requests for files on a "global" level. These files are known only to the server
		///     (and not known to the container) and are served directly by the server (by calling 
		///     this method) without interaction with container.
		///
		/// If ifModifiedSince parametr is non-empty string, the

private:
	bool isSystemFileRequest(HttpServletRequest& request);
	void handleServletRequest(ServletContext* psc, 
		HttpServletRequest& request, 
		HttpServletResponse& response, 
		const std::string& path="");

	FilterDispatcher* _pFilterDispatcher;
	MimeMap           _mimeMap;
	Mutex             _mutex;
};


///
/// inlines
///


inline void HttpServletDispatcher::addMediaType(const std::string& extension, const std::string& type)
{
	_mimeMap.insert(MimeMap::value_type(extension, type));
}


} } } // namespace Poco::Servlet::Ex


#endif //ServletEx_Http_HttpServletDispatcher_INCLUDED
