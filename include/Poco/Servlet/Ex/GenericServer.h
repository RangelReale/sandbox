//
// GenericServer.h
//
//
// Library: ServletEx
// Package: Servlet
// Module:  GenericServer
//
// Definition of the GenericServer class.
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef ServletEx_GenericServer_INCLUDED
#define ServletEx_GenericServer_INCLUDED


#include "Poco/Servlet/Ex/GenericServerConfig.h"
#include "Poco/Servlet/ServletBase.h"
#include "Poco/Logger.h"
#include "Poco/Exception.h"
#include <string>


namespace Poco {
namespace Servlet {
namespace Ex {


class Servlet_API GenericServer
{
public:
	GenericServer(Poco::Logger* pLogger=0);
		/// Creates GenericServer.

	virtual ~GenericServer();
		/// Destroys GenericServer.

	virtual void init(Poco::Logger* pLogger);
		///Does nothing. When overriden, initializes the server.

	virtual void start() = 0;
		///Runs the server. Must be overriden.

	virtual void stop() = 0;
		///Stops the server. Must be overriden.

	virtual void destroy();
		///Does nothing. When overriden, destroys the server.

	Poco::Logger& logger();
		///Returns the logger. Throws NullPointerException if logger is null.

	void fatal(const std::string& msg);
		/// If the logger is not null, calls fatal method.

	void critical(const std::string& msg);
		/// If the logger is not null, calls critical method.

	void error(const std::string& msg);
		/// If the logger is not null, calls error method.

	void warning(const std::string& msg);
		/// If the logger is not null, calls warning method.

	void notice(const std::string& msg);
		/// If the logger is not null, calls notice method.

	void information(const std::string& msg);
		/// If the logger is not null, calls information method.

	void debug(const std::string& msg);
		/// If the logger is not null, calls debug method.

	void trace(const std::string& msg);
		/// If the logger is not null, calls trace method.

private:
	Poco::Logger* _pLogger;
};


///
/// inlines
///


inline void GenericServer::fatal(const std::string& msg)
{
	if(_pLogger) _pLogger->fatal(msg);
}


inline void GenericServer::critical(const std::string& msg)
{
	if(_pLogger) _pLogger->critical(msg);
}


inline void GenericServer::error(const std::string& msg)
{
	if(_pLogger) _pLogger->error(msg);
}


inline void GenericServer::warning(const std::string& msg)
{
	if(_pLogger) _pLogger->warning(msg);
}


inline void GenericServer::notice(const std::string& msg)
{
	if(_pLogger) _pLogger->notice(msg);
}


inline void GenericServer::information(const std::string& msg)
{
	if(_pLogger) _pLogger->information(msg);
}


inline void GenericServer::debug(const std::string& msg)
{
	if(_pLogger) _pLogger->debug(msg);
}


inline void GenericServer::trace(const std::string& msg)
{
	if(_pLogger) _pLogger->trace(msg);
}


inline Poco::Logger& GenericServer::logger()
{
	if(_pLogger) return *_pLogger;
	else throw Poco::NullPointerException("Logger not initialized.");
}


} } } // namespace Poco::Servlet::Ex


#endif //ServletEx_GenericServer_INCLUDED
