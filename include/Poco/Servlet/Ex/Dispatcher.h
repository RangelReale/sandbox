//
// Dispatcher.h
//
//
// Library: ServletEx
// Package: Servlet
// Module:  Dispatcher
//
// Definition of the Dispatcher class.
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef ServletEx_Dispatcher_INCLUDED
#define ServletEx_Dispatcher_INCLUDED


#include "Poco/Servlet/Ex/ServletProvider.h"
#include "Poco/Servlet/Ex/FilterProvider.h"
#include "Poco/Servlet/ServletRequest.h"
#include "Poco/Servlet/ServletResponse.h"
#include "Poco/Servlet/ServletContext.h"
#include "Poco/Servlet/ServletBase.h"
#include <map>


namespace Poco {
namespace Servlet {
namespace Ex {


class SessionManager;
class ServletProvider;
class PathMapping;


class Servlet_API Dispatcher
{
public:
	Dispatcher();
		/// Creates Dispatcher.

	virtual ~Dispatcher();
		/// Destroys Dispatcher.

	void registerContext(const std::string& name, ServletContext* pApp);
		/// Registers context with this dispatcher by inserting it into
		/// the context map.

	bool isRegistered(const std::string& name) const;
		/// Returns true if the named context is registered.

	void unregisterContext(const std::string& name);
		/// Unregisters context and erases it from context map.

	void addMapping(const std::string& contextName, const PathMapping& mapping);
		/// Add path-servlet to the dispatcher's mapping.
		/// This method assumes that path does not contain context name.

	std::string defaultEntity(const std::string& contextName) const;
		/// Return default servlet for the named context

	std::string resolve(const std::string& contextName, const std::string& path) const;
		/// Resolve the name of the entity mapped to the given path.
		/// This method assumes that path does not contain context name.

	std::string getDefaultServlet(const std::string& contextName, const std::string& path="/") const;
		/// Returns the default servlet for the named context, or "" if there is
		/// no default servlet.

protected:
	typedef std::map<std::string, ServletContext*> ContextMap;
		/// [name] - [context] map

	typedef std::map<std::string, PathMapping*> ContextMappingMap;
		/// [context name] - [path mapping] map

	std::string removeSeparators(const std::string& name) const;
		/// Contexts correspond to paths but are internally kept by name only.
		/// This method checks names for separators, removes them if any are found and
		/// returns copy of the name without separators.
		/// Examples: 
		///		- removeSeparators("/context") returns "context"
		///		- removeSeparators("//context/") returns "context"

	std::string getRegisteredName(const std::string& contextName) const;

	static const char PATH_SEPARATOR;

	ContextMap _contextMap;
	ContextMappingMap _mapping;
};


} } } // namespace Poco::Servlet::Ex


#endif //ServletEx_Dispatcher_INCLUDED
