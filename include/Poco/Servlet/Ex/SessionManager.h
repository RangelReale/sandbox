//
// SessionManager.h
//
//
// Library: ServletEx
// Package: Servlet
// Module:  SessionManager
//
// Definition of the SessionManager class.
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef ServletEx_SessionManager_INCLUDED
#define ServletEx_SessionManager_INCLUDED


#include "Poco/Servlet/ServletBase.h"
#include "Poco/Servlet/HttpSession.h"
#include "Poco/Mutex.h"
#include "Poco/Timer.h"
#include <string>
#include <map>


namespace Poco {
namespace Servlet {
namespace Ex {


class Poco::Servlet::HttpSessionListener;


class Servlet_API SessionManager
		///	HttpSession manager. Contains all sessions
		///	for a container.
		/// Default purge interval is 60 seconds.
		/// SessionManager will iterate through all the
		/// sessions it manages every [purgeInterval] seconds
		/// and delete invalid sessions.
{
public:
	SessionManager(long maxInactiveInterval=HttpSession::INDEFINITE,
		HttpSessionListener* pListener=NULL,
		long maxSessions=512,
		long purgeInterval=60);
		/// Constructor. 

	const HttpSession& makeSession();
		/// Creates new session with maxInactiveInterval and
		/// returns the reference to the newly created session.

	const HttpSession& session(const std::string& id);
		/// If id is empty string, InvalidArgumentException is thrown.
		/// 
		/// If id is non-empty string and the session with 
		/// specified id is found and the found session is valid, 
		/// the reference to the requested session is returned.
		/// 
		/// If the session is found, but is invalid, 
		/// InvalidArgumentException is thrown.
		/// 
		/// If the session with specified id is not found, 
		/// NotFoundException is thrown.
		/// 
		/// Returns reference to found session.

	bool exists(const std::string& id) const;
		/// Returns true if session exists.

	bool isValid(const std::string& id) const;
		/// Returns true if session is valid.

	bool destroySession(const std::string& id);
		/// Explicitly destroys sesion with specified id.
		/// Returns true if session is found and destroyed, false otherwise.

	int sessionCount() const;
		/// Returns number of sessions this manager manages.

	~SessionManager();
		/// Destructor.

protected:
	typedef std::map<std::string, HttpSession*> SessionMap;

	void onTimer(Poco::Timer& timer);
		/// Periodically iterates the session map and 
		/// purges invalid sessions.

	virtual HttpSession& newSession(long maxInactiveInterval) = 0;
		/// Creates a new session. If maxInactiveInterval is 
		/// zero, the session never expires.

	void invalidateAllSessions();
		/// Invalidates all sessions managed by this manager.

	void destroyAllSessions();
		/// Destroys all sessions managed by this manager.

	SessionMap                     _sessionMap;
	long                           _maxInactiveInterval;
	long                           _maxSessions;
	static Mutex                   _mutex;
	Timer*                         _pTimer;
	TimerCallback<SessionManager>* _pCallback;
	HttpSessionListener*           _pSessionListener;
};


///
/// inlines
///


inline int SessionManager::sessionCount() const
{
	return (int) _sessionMap.size();
}


} } } // namespace Poco::Servlet::Ex


#endif //ServletEx_SessionManager_INCLUDED
