//
// ServletRequest.h
//
//
// Library: Servlet
// Package: Servlet
// Module:  ServletRequest
//
// Definition of the ServletRequest class.
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
//
// The code in this file is derived from Apache Tomcat project
// Copyright (c) 2004 The Apache Software Foundation.
// http://www.apache.org/licenses/LICENSE-2.0
// 


#ifndef Servlet_ServletRequest_INCLUDED
#define Servlet_ServletRequest_INCLUDED


#include "Poco/Servlet/ServletException.h"
#include "Poco/Servlet/ServletInputStream.h"
#include "Poco/Servlet/RequestDispatcher.h"
#include "Poco/Servlet/ServletContext.h"
#include "Poco/Servlet/ServletBase.h"
#include "Poco/Servlet/BufferedReader.h"
#include <string>
#include <vector>
#include <map>


namespace Poco {
namespace Servlet {


class Servlet_API ServletRequest 
	/// Defines an object to provide client request information to a servlet. The servlet
	/// container creates a ServletRequest object and passes it as an argument to the
	/// servlet’s service method.
	/// A ServletRequest object provides data including parameter name and values,
	/// attributes, and an input stream. Interfaces that extend ServletRequest can provide
	/// additional protocol-specific data.
{
public:
	typedef std::map<std::string, Object*> AttributeMap;
	typedef std::map<std::string, std::string> ParameterMap;
	typedef ParameterMap Parameters;
	typedef std::pair<std::string,std::string> Parameter;

	ServletRequest();
		/// Creates request.

	virtual ~ServletRequest();
		/// Destroys request.

	virtual const Object* getAttribute(const std::string& name) const = 0;
		/// Returns the value of the named attribute as an Object, or null if no attribute
		/// of the given name exists.
		/// Attributes can be set two ways. The servlet container may set attributes to
		/// make available custom information about a request.

	virtual std::vector<std::string> getAttributeNames() const = 0;
		/// Returns a vector containing the names of the attributes available to
		/// this request. This method returns an empty vector if the request has no
		/// attributes available to it.

	virtual std::string getCharacterEncoding() const = 0;
		/// Returns the name of the character encoding used in the body of this request.
		/// Returns empty string if the request does not specify a character encoding.

	virtual int getContentLength() const = 0;
		/// Returns the length, in bytes, of the request body and made available by the
		/// input stream, or -1 if the length is not known. For HTTP servlets, same as the
		/// value of the CGI variable CONTENT_LENGTH.

	virtual std::string getContentType() const = 0;
		/// Returns the MIME type of the body of the request, or empty string 
		/// if the type is not known. For HTTP servlets, same as the value of the CGI 
		/// variable CONTENT_TYPE.

	virtual ServletInputStream& getInputStream() = 0; 
		/// Retrieves the body of the request as binary data using a
		/// ServletInputStream . Either this method or getReader() may be called to
		/// read the body, not both.

	virtual std::string getLocalAddr() const = 0;
		/// Returns the Internet Protocol (IP) address of the interface on which the
		/// request was received.

	virtual std::locale  getLocale() const = 0;
		/// Returns the preferred Locale that the client will accept content in, based on
		/// the Accept-Language header. If the client request doesn’t provide an Accept-
		/// Language header, this method returns the default locale for the server.
    
	virtual const std::vector<std::locale>& getLocales() const = 0;
		/// Returns a vector of locale objects indicating, in decreasing order
		/// starting with the preferred locale, the locales that are acceptable to the client
		/// based on the Accept-Language header. If the client request doesn’t provide an
		/// Accept-Language header, this method returns a vector containing
		/// one Locale, the default locale for the server.

	virtual std::string getLocalName() const = 0;
		/// Returns the host name of the Internet Protocol (IP) interface on which the
		/// request was received.

	virtual int getLocalPort() const = 0;
		/// Returns the Internet Protocol (IP) port number of the interface on which the
		/// request was received.

	virtual std::string getParameter(const std::string& name) const = 0;
		/// Returns the value of a request parameter as a string, or "" if the parameter
		/// does not exist. Request parameters are extra information sent with the
		/// request. For HTTP servlets, parameters are contained in the query string or
		/// posted form data.
		/// You should only use this method when you are sure the parameter has only
		/// one value. If the parameter might have more than one value, use
		/// getParameterValues(string) .
		/// If you use this method with a multivalued parameter, the value returned is
		/// equal to the first value in the array returned by getParameterValues.
		/// If the parameter data was sent in the request body, such as occurs with an
		/// HTTP POST request, then reading the body directly via getInputStream()
		/// or getReader() can interfere with the execution of this method.

	virtual ParameterMap getParameterMap() const = 0;
		/// Returns a map of the parameters of this request. Request parameters
		/// are extra information sent with the request. For HTTP servlets, parameters
		/// are contained in the query string or posted form data.

	virtual std::vector<std::string> getParameterNames() const = 0;
		/// Returns an vector of strings containing the names of the
		/// parameters contained in this request. If the request has no parameters, the
		/// method returns an empty vector.

	virtual std::vector<std::string> getParameterValues(const std::string& name) const = 0;
		/// Returns a vector of string objects containing all of the values the given
		/// request parameter has, or empty vector if the parameter does not exist.

	virtual std::string getProtocol() const = 0;
		/// Returns the name and version of the protocol the request uses in the form
		/// protocol/majorVersion.minorVersion, for example, HTTP/1.1. For HTTP
		/// servlets, the value returned is the same as the value of the CGI variable
		/// SERVER_PROTOCOL.

	virtual const BufferedReader& getReader() = 0;
		/// Retrieves the body of the request as character data using a BufferedReader.
		/// The reader translates the character data according to the character encoding
		/// used on the body. Either this method or getInputStream() may be called to
		/// read the body, not both.

	std::string getRealPath(const std::string& path) const;
		/// Deprecated. As of Version 2.1 of the Servlet API, use
		/// ServletContext.getRealPath(std::string) instead.
	
	virtual std::string getRemoteAddr() const = 0;
		/// Returns the Internet Protocol (IP) address of the client or last proxy that sent
		/// the request. For HTTP servlets, same as the value of the CGI variable
		/// REMOTE_ADDR.

	virtual std::string getRemoteHost() const = 0;
		/// Returns the fully qualified name of the client or the last proxy that sent the
		/// request. If the engine cannot or chooses not to resolve the hostname (to
		/// improve performance), this method returns the dotted-string form of the IP
		/// address. For HTTP servlets, same as the value of the CGI variable REMOTE_HOST.

	virtual int getRemotePort() const = 0;
		/// Returns the Internet Protocol (IP) source port of the client or last proxy that
		/// sent the request.

	virtual RequestDispatcher& getRequestDispatcher(const std::string& path) = 0;
		/// Returns a RequestDispatcher object that acts as a wrapper for the resource
		/// located at the given path. A RequestDispatcher object can be used to forward
		/// a request to the resource or to include the resource in a response. The
		/// resource can be dynamic or static.
		/// The pathname specified may be relative, although it cannot extend outside the
		/// current servlet context. If the path begins with a “/” it is interpreted as relative
		/// to the current context root. 

	virtual std::string getScheme() const = 0;
		/// Returns the name of the scheme used to make this request, for example, http,
		/// https, or ftp. Different schemes have different rules for constructing URLs,
		/// as noted in RFC 1738.

	virtual std::string getServerName() const = 0;
		/// Returns the host name of the server to which the request was sent. It is the
		/// value of the part before “:” in the Host header value, if any, or the resolved
		/// server name, or the server IP address.

	virtual int getServerPort() const = 0;
		/// Returns the port number to which the request was sent. It is the value of the
		/// part after “:” in the Host header value, if any, or the server port where the client
		/// connection was accepted on.

	virtual bool isSecure() const = 0;
		/// Returns a boolean indicating whether this request was made using a secure
		/// channel, such as HTTPS.

	virtual void removeAttribute(const std::string& name) = 0;
		/// Removes an attribute from this request. This method is not generally needed
		/// as attributes only persist as long as the request is being handled.

	virtual void setAttribute(const std::string& name, Object* a) = 0;
		/// Stores an attribute in this request. Attributes are reset between requests. This
		/// method is most often used in conjunction with RequestDispatcher .
		/// If the object passed in is null, the effect is the same as calling
		/// removeAttribute(String) .
		/// It is warned that when the request is dispatched from the servlet resides in a
		/// different web application by RequestDispatcher, the object set by this
		/// method may not be correctly retrieved in the caller servlet.

	virtual void setCharacterEncoding(const std::string& env) = 0;
		/// Overrides the name of the character encoding used in the body of this
		/// request. This method must be called prior to reading request parameters or
		/// reading input using getReader().
};


///
/// inlines 
///

inline std::string ServletRequest::getRealPath(const std::string& path) const
{ 
	throw ServletException("Deprecated. Use ServletContext.getRealPath(String)");
}


class ServletRequestAttributeEvent
	/// This is the event class for notifications of changes to the attributes of Servlet-
	/// Request in an application.
{
public: 
	ServletRequestAttributeEvent(const ServletContext& sc, 
		const ServletRequest& request, 
		const std::string& name, Object& value){}
		/// Construct a ServletRequestAttributeEvent giving the servlet context of this
		/// web application, the ServletRequest whose attributes are changing and the
		/// name and value of the attribute.

	virtual std::string getName() const = 0;
		/// Return the name of the attribute that changed on the ServletRequest

	virtual const Object* getValue() const = 0;
		/// Returns the value of the attribute that has been added, removed or replaced. If
		/// the attribute was added, this is the value of the attribute. If the attribute was
		/// removed, this is the value of the removed attribute. If the attribute was
		/// replaced, this is the old value of the attribute.
};


class ServletRequestAttributeListener
	/// A ServletRequestAttributeListener can be implemented by the developer interested
	/// in being notified of request attribute changes. Notifications will be generated
	/// while the request is within the scope of the web application in which the
	/// listener is registered. A request is defined as coming into scope when it is about to
	/// enter the first servlet or filter in each web application, as going out of scope when
	/// it exits the last servlet or the first filter in the chain.
{
	virtual void attributeAdded(const ServletRequestAttributeEvent& srae) = 0;
		/// Notification that a new attribute was added to the servlet request. Called after
		/// the attribute is added.

	virtual void attributeRemoved(const ServletRequestAttributeEvent& srae) = 0;
		/// Notification that a new attribute was removed from the servlet request.
		/// Called after the attribute is removed.

	virtual void attributeReplaced(const ServletRequestAttributeEvent& srae) = 0;
		/// Notification that an attribute was replaced on the servlet request. Called after
		/// the attribute is replaced.
};

class ServletRequestEvent
	/// Events of this kind indicate lifecycle events for a ServletRequest. The source of
	/// the event is the ServletContext of this web application.
{
public:
	ServletRequestEvent(const ServletContext& sc, const ServletRequest& request) {}
		/// Construct a ServletRequestEvent for the given ServletContext and ServletRequest.

	virtual const ServletContext& getServletContext() const = 0;
		/// Returns the ServletContext of this web application.

	virtual const ServletRequest& getServletRequest() const = 0;
		/// Returns the ServletRequest that is changing.
};


class ServletRequestListener
	/// A ServletRequestListener can be implemented by the developer interested in
	/// being notified of requests coming in and out of scope in a web component. A
	/// request is defined as coming into scope when it is about to enter the first servlet or
	/// filter in each web application, as going out of scope when it exits the last servlet
	/// or the first filter in the chain.
{
	virtual void requestDestroyed(const ServletRequestEvent& rre) = 0;
		/// The request is about to go out of scope of the web application.

	virtual void requestInitialized(const ServletRequestEvent& rre) = 0;
		/// The request is about to come into scope of the web application.
};


} } // namespace Poco::Servlet


#endif // Servlet_ServletRequest_INCLUDED
