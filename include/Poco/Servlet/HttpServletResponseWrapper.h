//
// HttpServletResponseWrapper.h
//
//
// Library: Servlet
// Package: Http
// Module:  HttpServletResponseWrapper
//
// Definition of the HttpServletResponseWrapper class.
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
//
// The code in this file is derived from Apache Tomcat project
// Copyright (c) 2004 The Apache Software Foundation.
// http://www.apache.org/licenses/LICENSE-2.0
// 


#ifndef Servlet_Http_HttpServletResponseWrapper_INCLUDED
#define Servlet_Http_HttpServletResponseWrapper_INCLUDED


#ifdef _MSC_VER
//disable MSVC "inherits ... via dominance" warning
# pragma warning(disable : 4250)
#endif


#include "Poco/Servlet/ServletResponseWrapper.h"
#include "Poco/Servlet/HttpServletResponse.h"


namespace Poco {
namespace Servlet {


class Servlet_API HttpServletResponseWrapper : 
	public ServletResponseWrapper, public HttpServletResponse 
	/// Provides a convenient implementation of the HttpServletResponse interface that
	/// can be subclassed by developers wishing to adapt the response from a Servlet.
	/// This class implements the Wrapper or Decorator pattern. Methods default to
	/// calling through to the wrapped response object.
{
public:

	HttpServletResponseWrapper(HttpServletResponse& response);
		/// Constructs response wrapper.
 
	virtual ~HttpServletResponseWrapper();
		/// Destroys response wrapper.

	virtual void addCookie(const Cookie& cookie);
 		/// The default behavior of this method is to call 
		/// addCookie(Cookie cookie) on the wrapped response object.

	virtual bool containsHeader(const std::string& name);
		/// The default behavior of this method is to call 
		/// containsHeader(const std::string& name) on the wrapped response object.

	virtual std::string encodeURL(const std::string& url);
 		/// The default behavior of this method is to call 
		/// encodeURL(const std::string& url) on the wrapped response object.

	virtual std::string encodeRedirectURL(const std::string& url);
 		/// The default behavior of this method is to return 
		/// encodeRedirectURL(const std::string& url) on the wrapped response object.

	std::string encodeUrl(const std::string& url);
 		/// The default behavior of this method is to call 
		/// encodeUrl(const std::string& url) on the wrapped response object.

	std::string encodeRedirectUrl(const std::string& url);
 		/// The default behavior of this method is to return 
		/// encodeRedirectUrl(const std::string& url) on the wrapped response object.

	virtual void sendError(int sc, const std::string& msg);
 		/// The default behavior of this method is to call 
		/// sendError(int sc, String msg) on the wrapped response object.

	virtual void sendError(int sc);
 		/// The default behavior of this method is to call sendError(int sc)
 		/// on the wrapped response object.

	virtual void sendRedirect(const std::string& location);
 		/// The default behavior of this method is to return 
		/// sendRedirect(const std::string& location) on the wrapped response object.

	virtual void setDateHeader(const std::string& name, long date);
 		/// The default behavior of this method is to call 
	   /// setDateHeader(const std::string& name, long date)
 		/// on the wrapped response object.
 
	virtual void addDateHeader(const std::string& name, long date);
 		/// The default behavior of this method is to call 
	   /// addDateHeader(const std::string& name, long date)
 		/// on the wrapped response object.

	virtual void setHeader(const std::string& name, const std::string& value);
 		/// The default behavior of this method is to return 
	   /// setHeader(const std::string& name, String value)
 		/// on the wrapped response object.
 
	virtual void addHeader(const std::string& name, const std::string& value);
 		/// The default behavior of this method is to return 
		/// addHeader(const std::string& name, String value)
 		/// on the wrapped response object.

	virtual void setIntHeader(const std::string& name, int value);
 		/// The default behavior of this method is to call 
		/// setIntHeader(const std::string& name, int value)
 		/// on the wrapped response object.

	virtual void addIntHeader(const std::string& name, int value);
 		/// The default behavior of this method is to call 
		/// addIntHeader(const std::string& name, int value)
 		/// on the wrapped response object.

	virtual void setStatus(int sc);
 		/// The default behavior of this method is to call setStatus(int sc)
 		/// on the wrapped response object.

	virtual void setStatus(int sc, const std::string& sm);
 		/// The default behavior of this method is to call 
		/// setStatus(int sc, String sm)on the wrapped response object.

private: 
	HttpServletResponseWrapper(const HttpServletResponseWrapper&);

	HttpServletResponse& _response;	
};


} } // namespace Poco::Servlet


#endif //Servlet_Http_HttpServletResponseWrapper_INCLUDED
