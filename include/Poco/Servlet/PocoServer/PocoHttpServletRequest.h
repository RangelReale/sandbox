//
// PocoHttpServletRequest.h
//
//
// Library: PocoServer
// Package: PocoServerCore
// Module:  PocoHttpServletRequest
//
// Definition of the PocoHttpServletRequest class.
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef PocoServer_HttpServletRequest_INCLUDED
#define PocoServer_HttpServletRequest_INCLUDED


#include "PocoServer.h"
#include "Poco/Servlet/HttpServletRequest.h"
#include "Poco/Servlet/Cookie.h"
#include "Poco/Servlet/Ex/HttpServletDispatcher.h"
#include "Poco/Servlet/Ex/HttpRequestDispatcher.h"
#include "Poco/Net/HTTPServerRequest.h"
#include "Poco/Net/NameValueCollection.h"
#include "Poco/URI.h"
#include "Poco/Exception.h"


namespace Poco {
namespace Servlet {
namespace PocoServer {


class PocoServer_API PocoHttpServletRequest : public HttpServletRequest
{
public:
	PocoHttpServletRequest(Poco::Net::HTTPServerRequest& request, 
		Poco::Servlet::Ex::HttpServletDispatcher* pDispatcher=0,
		const std::string rootPath="");
	~PocoHttpServletRequest();

	/// ServletRequest overrides:
	const Object* getAttribute(const std::string& name) const;
	std::vector<std::string> getAttributeNames() const;
	std::string getCharacterEncoding() const;
	int getContentLength() const;
	std::string getContentType() const;
	ServletInputStream& getInputStream();
	std::string getLocalAddr() const;
	std::locale  getLocale() const;
	const std::vector<std::locale>& getLocales() const;
	std::string getLocalName() const;
	int getLocalPort() const;
	std::string getParameter(const std::string& name) const;
	ServletRequest::ParameterMap getParameterMap() const;
	std::vector<std::string> getParameterNames() const;
	std::vector<std::string> getParameterValues(const std::string& name) const;
	std::string getProtocol() const;
	BufferedReader& getReader() ;
	std::string getRemoteAddr() const;
	std::string getRemoteHost() const;
	int getRemotePort() const;
	RequestDispatcher& getRequestDispatcher(const std::string& path);
	std::string getScheme() const ;
	std::string getServerName() const;
	int getServerPort() const ;
	bool isSecure() const ;
	void removeAttribute(const std::string& name) ;
	void setAttribute(const std::string& name, Object* a);
	void setCharacterEncoding(const std::string& enc);

	/// HttpServletRequest overrides:
	std::string getAuthType();
	const std::vector<Cookie>& getCookies() const;
	long getDateHeader(const std::string& name);
	std::string getHeader(const std::string& name);
	std::vector<std::string> getHeaders(const std::string& name);
	std::vector<std::string> getHeaderNames();
	int getIntHeader(const std::string& name);
	std::string getMethod();
	std::string getPathInfo();
	std::string getPathTranslated() const;
	std::string getContextPath() const;
	std::string getQueryString();
	std::string getRemoteUser();
	bool isUserInRole(const std::string& role);
	//java.security.Principal getUserPrincipal() { }
	std::string getRequestedSessionId() const;
	std::string getRequestURI();
	std::string getRequestURL();
	std::string getServletPath();
	const HttpSession* getSession(bool create);
	const HttpSession* getSession();
	bool isRequestedSessionIdValid() const;
	bool isRequestedSessionIdFromCookie() const;
	bool isRequestedSessionIdFromURL() const;
	bool isRequestedSessionIdFromUrl() const;

	// additional (non standard servlet API)
	void setSessionManager(Poco::Servlet::Ex::SessionManager* pManager);
	void setSession(const HttpSession* pSession);
	void setServletPath(const std::string& path);

private:
	typedef std::vector<Poco::Servlet::Ex::HttpRequestDispatcher*> RequestDispatherVec;

	void assignParameters();

	Poco::Net::HTTPServerRequest&             _request;
	ServletRequest::AttributeMap              _attributes;
	ServletRequest::ParameterMap              _parameters;
	mutable std::vector<Cookie>               _cookies;
	std::string                               _characterEncoding;
	std::vector<std::locale>                  _locales;
	mutable ServletInputStream                _istream;
	BufferedReader                            _reader;
	Poco::Servlet::Ex::SessionManager*        _pSessionManager;
	const HttpSession*                        _pSession;
	Poco::Servlet::Ex::HttpServletDispatcher* _pServletDispatcher;
	std::string                               _rootPath;
	RequestDispatherVec                       _reqDispatcherVec;
};


///
/// inlines
///


inline std::string PocoHttpServletRequest::getAuthType() 
{ 
	return _request.get(Poco::Net::HTTPRequest::AUTHORIZATION);
}


inline std::string PocoHttpServletRequest::getMethod() 
{ 
  return _request.getMethod();
}


inline void PocoHttpServletRequest::setSessionManager(Poco::Servlet::Ex::SessionManager* pManager)
{
	_pSessionManager = pManager;
}


inline void PocoHttpServletRequest::setSession(const HttpSession* pSession)
{
	_pSession = pSession;
}


} } } // namespace Poco::Servlet::PocoServer


#endif // PocoServer_HttpServletRequest_INCLUDED
