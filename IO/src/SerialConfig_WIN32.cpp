//
// SerialConfig_WIN32.cpp
//
// $Id: //poco/Main/template/class.cpp#8 $
//
// Library: IO
// Package: Serial
// Module:  SerialConfig
//
// Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/IO/SerialConfig_WIN32.h"
#include "Poco/Exception.h"
#include <sstream>


using Poco::InvalidArgumentException;


namespace Poco {
namespace IO {


const int SerialConfigImpl::MSEC = 1000;


SerialConfigImpl::SerialConfigImpl(int speed,
	int dataBits,
	char parity,
	StartBitsImpl startBits,
	StopBitsImpl stopBits,
	bool useXonXoff,
	unsigned char xOnChar,
	unsigned char xOffChar,
	bool useEOF,
	unsigned char eofChar,
	int bufferSize,
	int timeout): 
	_useXonXoff(useXonXoff), 
	_useEOF(useEOF), 
	_bufferSize(bufferSize)
{
	ZeroMemory(&_dcb, sizeof(DCB));

	_dcb.DCBlength = sizeof(DCB);
	_dcb.ByteSize = dataBits;
	_dcb.BaudRate = speed;

	setParityCharImpl(parity);
	_dcb.fParity = (('N' != parity) && ('n' != parity));
	
	_dcb.StopBits = stopBits;

	if (_useEOF) _dcb.EofChar = eofChar;

	if (useXonXoff)
	{
		_dcb.fOutX = TRUE;
		_dcb.fInX = TRUE;
		_dcb.XonChar = xOnChar;
		_dcb.XoffChar = xOffChar;
	}

	ZeroMemory(&_cto, sizeof(COMMTIMEOUTS));
	_cto.ReadIntervalTimeout = MAXDWORD ;
	_cto.ReadTotalTimeoutMultiplier = MAXDWORD;
	
	setTimeoutImpl(timeout);
}


char SerialConfigImpl::getParityCharImpl() const
{
	switch (_dcb.Parity)
	{
	case NONE_IMPL:
		return 'N';
	case ODD_IMPL:
		return 'O';
	case EVEN_IMPL:
		return 'E';
	case MARK_IMPL:
		return 'M';
	case SPACE_IMPL:
		return 'S';
	default:
		return 'N';
	}
}


void SerialConfigImpl::setParityCharImpl(char parityChar)
{
	switch (parityChar)
	{
	case 'n': case 'N':
		_dcb.Parity = NONE_IMPL; break;

	case 'o': case 'O':
		_dcb.Parity = ODD_IMPL; break;

	case 'e': case 'E':
		_dcb.Parity = EVEN_IMPL; break;

	case 'm': case 'M':
		_dcb.Parity = MARK_IMPL; break;

	case 's': case 'S':
		_dcb.Parity = SPACE_IMPL; break;

	default:
		{
			std::ostringstream os;
			os << "SerialConfigImpl::setParityCharImpl(" << parityChar << ')';
			throw InvalidArgumentException(os.str());
		}
	}
}


} } // namespace Poco::IO
