//
// Protocol.cpp
//
// $Id: //poco/1.2/IO/src/Protocol.cpp#2 $
//
// Library: IO
// Package: Protocol
// Module:  Protocol
//
// Copyright (c) 2005-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/IO/Protocol.h"
#include "Poco/SharedPtr.h"


using Poco::SharedPtr;


namespace Poco {
namespace IO {


Protocol::Protocol(AbstractChannel* pChannel): 
	_pChannel(pChannel), 
	_pNext(0), 
	_pBuffer(new std::string())
{
}


Protocol::Protocol(const Protocol& other)
{
	if (&other != this) *this = other;
}

	
Protocol& Protocol::operator = (const Protocol& other)
{
	if (&other != this)
	{
		_pNext = other._pNext;
		_pChannel = other._pChannel;
		_pBuffer = other._pBuffer;
	}

	return *this;
}


Protocol::~Protocol()
{
	_pNext = 0;
}


int Protocol::write(const char* buffer, std::size_t length, bool doSend)
{
	std::string buf(buffer, length);
	if (_pNext) _pNext->wrap(buf);
	writeRaw(wrap(buf));
	if (doSend) send();
	return (int) buf.size();
}


void Protocol::setNext(Protocol* pNewNext)
{
	_pNext = pNewNext;

	if (_pNext) 
	{
		if (_pNext->_pChannel != _pChannel)
			_pNext->_pChannel = _pChannel;
		if (_pNext->_pBuffer != _pBuffer)
			_pNext->_pBuffer = _pBuffer;

		poco_assert (_pNext->_pNext != _pNext);
	}
}


} } // namespace Poco::IO
