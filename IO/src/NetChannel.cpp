//
// NetChannel.cpp
//
// $Id: //poco/Main/IO/src/NetChannel.cpp#1 $
//
// Library: IO
// Package: Net
// Module:  NetChannel
//
// Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/IO/NetChannel.h"
#include "Poco/Exception.h"
#include "Poco/Net/SocketImpl.h"


using Poco::InvalidArgumentException;
using Poco::Net::SocketImpl;


namespace Poco {
namespace IO {


NetChannel::NetChannel(const std::string& name, const NetConfig& config): 
	_name(name), 
	_config(config),
	_pSocket(0)
{
	reconfigure(_config);
	open();
}


NetChannel::~NetChannel()
{
	delete _pSocket;
}


void NetChannel::reconfigure(const NetConfig& config)
{
	delete _pSocket;
	_pSocket = 0;
	_config = config;

	if (isStream())
		_pSocket = new Poco::Net::StreamSocket();
	else if (isDatagram())
		_pSocket = new Poco::Net::DatagramSocket();
	else 
		throw InvalidArgumentException();

	poco_check_ptr (_pSocket);
}


void NetChannel::open()
{
	const Poco::Timespan& ts = _config.timeout();
	
	if (isStream() && ts.totalMicroseconds())
		socketImpl()->connect(_config.address(), ts);
	else
		socketImpl()->connect(_config.address());
}


std::string& NetChannel::read(std::string& buffer)
{
	buffer.clear();
	int bufSize = socketImpl()->getReceiveBufferSize();
	char* pBuffer = new char[bufSize+1];
	memset(pBuffer, 0, bufSize+1);

	try
	{
		int n = read(pBuffer, bufSize);
		buffer.assign(pBuffer, n);
	}
	catch (Poco::Exception&)
	{
		delete [] pBuffer;
		throw;
	}
	
	delete [] pBuffer;
	return buffer;
}


char NetChannel::read()
{
	char c;
	read(&c, 1);
	return c;
}


int NetChannel::read(char* pBuffer, std::size_t length)
{
	int received = 0;
	socketImpl()->setBlocking(false);

	try
	{
		if (!socketImpl()->poll(_config.timeout(), SocketImpl::SELECT_READ)) 
			throw Poco::TimeoutException("read timed out", socketImpl()->address().toString());
		received = socketImpl()->receiveBytes(pBuffer, (int) length);
	}
	catch (Poco::Exception&)
	{
		socketImpl()->setBlocking(true);
		throw;
	}

	socketImpl()->setBlocking(true);
	return received;
}


int  NetChannel::write(char c)
{
	return write(&c, 1);
}


int NetChannel::write(const char* pBuffer, std::size_t length)
{
	int sent = 0;
	socketImpl()->setBlocking(false);

	try
	{
		if (!socketImpl()->poll(_config.timeout(), SocketImpl::SELECT_WRITE)) 
			throw Poco::TimeoutException("read timed out", socketImpl()->address().toString());
		sent = socketImpl()->sendBytes(pBuffer, (int) length);
	}
	catch (Poco::Exception&)
	{
		socketImpl()->setBlocking(true);
		throw;
	}
	
	socketImpl()->setBlocking(true);
	return sent;
}


int NetChannel::write(const std::string& data)
{
	return write(data.data(), (int) data.size());
}


} } // namespace Poco::IO
