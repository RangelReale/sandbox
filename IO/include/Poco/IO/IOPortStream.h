//
// IOPortStream.h
//
// $Id: //poco/Main/Data/include/Poco/IO/IOPortStream.h#1 $
//
// Library: IO
// Package: IO
// Module:  IOPortStream
//
// Definition of the IOPortStream class.
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef IO_IOPortStream_INCLUDED
#define IO_IOPortStream_INCLUDED


#include "Poco/Foundation.h"
#include "Poco/UnbufferedStreamBuf.h"
#include "Poco/IO/IOPort.h"
#include <istream>
#include <ostream>


namespace Poco {
namespace IO {



template <class P, class C>
class IOPortStreamBuf: public UnbufferedStreamBuf
	/// This is the streambuf class used for reading from and writing to a IOPort.
{
public:	
	IOPortStreamBuf(Poco::IO::IOPort<P, C>& port): _port(port)
		/// Creates a IOPortStreamBuf with the given IOPort.
	{
	}

	~IOPortStreamBuf()
		/// Destroys the IOPortStreamBuf.
	{
	}
		
	void close()
		/// Closes the port.
	{
		_port.close();
	}

protected:
	int_type readFromDevice()
	{
		return charToInt(_port.read());
	}

	int_type writeToDevice(char c)
	{
		return _port.write(c);
	}

private:
	Poco::IO::IOPort<P, C>& _port;
};


template <class P, class C>
class IOPortIOS: public virtual std::ios
	/// The base class for IOPortInputStream and
	/// IOPortOutputStream.
	///
	/// This class is needed to ensure the correct initialization
	/// order of the stream buffer and base classes.
{
public:
	IOPortIOS(IOPort<P, C>& port, openmode mode) :_buf(port)
		/// Creates the IOPortIOS with the given IOPort.
	{
		poco_ios_init(&_buf);
	}
		
	~IOPortIOS()
		/// Destroys the IOPortIOS.
	{
	}
		
	IOPortStreamBuf<P, C>* rdbuf()
		/// Returns a pointer to the internal IOPortStreamBuf.
	{
		return &_buf;
	}
		
protected:
	IOPortStreamBuf<P, C> _buf;
};


template <class P, class C>
class IOPortOutputStream: public IOPortIOS<P, C>, public std::ostream
	/// An output stream for writing to a IOPort.
{
public:
	IOPortOutputStream(IOPort<P, C>& port):
		IOPortIOS<P, C>(port, std::ios::out),
		std::ostream(&_buf)
		/// Creates the IOPortOutputStream with the given IOPort.
	{
	}

	~IOPortOutputStream()
		/// Destroys the IOPortOutputStream.
		///
		/// Flushes the buffer, but does not close the port.
	{
	}
};


template <class P, class C>
class IOPortInputStream: public IOPortIOS<P, C>, public std::istream
	/// An input stream for reading from a IOPort.
	///
	/// Using formatted input from a IOPortInputStream
	/// is not recommended, due to the read-ahead behavior of
	/// istream with formatted reads.
{
public:
	IOPortInputStream(IOPort<P, C>& port):
		IOPortIOS<P, C>(port, std::ios::in),
		std::istream(&_buf)
		/// Creates the IOPortInputStream with the given IOPort.
	{
	}

	~IOPortInputStream()
		/// Destroys the IOPortInputStream.
	{
	}
};


} } // namespace Poco::IO


#endif // IO_IOPortStream_INCLUDED
