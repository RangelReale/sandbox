//
// NetChannel.h
//
// $Id: //poco/Main/Data/include/Poco/IO/NetChannel.h#1 $
//
// Library: IO
// Package: Net
// Module:  NetChannel
//
// Definition of the NetChannel class.
//
// Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef IO_NetChannel_INCLUDED
#define IO_NetChannel_INCLUDED


#include "Poco/IO/IO.h"
#include "Poco/IO/Channel.h"
#include "Poco/IO/NetConfig.h"
#include "Poco/Net/Socket.h"
#include "Poco/Net/SocketImpl.h"
#include "Poco/Net/StreamSocket.h"
#include "Poco/Net/DatagramSocket.h"


namespace Poco {
namespace IO {


class IO_API NetChannel
{
public:
	NetChannel(const std::string& name, const NetConfig& config);
	~NetChannel();
	void init();
	void reconfigure(const NetConfig& config);
	void open();
	void close();
	char read();
	int read(char* pBuffer, std::size_t length);
	std::string& read(std::string& buffer);
	int write(char c);
	int write(const char* pBuffer, std::size_t length);
	int write(const std::string& data);
	const std::string& getName() const;
	
	bool NetChannel::isStream();
	bool NetChannel::isDatagram();

private:
	NetChannel(const NetChannel&);
	const NetChannel& operator=(const NetChannel&);

	Poco::Net::SocketImpl* socketImpl();

	std::string        _name;
	NetConfig          _config;
	Poco::Net::Socket* _pSocket;
};


//
// inlines
//


inline void NetChannel::init()
{
}


inline Poco::Net::SocketImpl* NetChannel::socketImpl()
{
	return _pSocket->impl();
}


inline void NetChannel::close()
{
	socketImpl()->close();
}


inline const std::string& NetChannel::getName() const
{
	return _name;
}


inline bool NetChannel::isStream()
{
	return NetConfig::STREAM == _config.type();
}


inline bool NetChannel::isDatagram()
{
	return NetConfig::DATAGRAM == _config.type();
}


typedef Channel<NetChannel, NetConfig> Network;


} } // namespace Poco::IO


#endif // IO_NetChannel_INCLUDED
