//
// SerialPort.h
//
// $Id: //poco/1.1.0/Foundation/include/Foundation/IOPort.h#1 $
//
// Library: IO
// Package: Serial
// Module:  SerialPort
//
// Definition of the SerialPort class.
//
// Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef IO_SerialPort_INCLUDED
#define IO_SerialPort_INCLUDED


#include "Poco/IO/IO.h"
#include "Poco/IO/SerialConfig.h"


#if defined(POCO_OS_FAMILY_WINDOWS)
#include "Poco/IO/SerialPort_WIN32.h"
#endif


namespace Poco {
namespace IO {


class IO_API SerialPort: protected SerialPortImpl
{
public:
	SerialPort(const std::string& name, const SerialConfig& config);
	~SerialPort();
	void init();
	void reconfigure(const SerialConfig& config);
	void open();
	void close();
	std::string& read(std::string& buffer);
	int write(const std::string& data);
	const std::string& getName() const;

private:
	SerialPort(const SerialPort&);
	const SerialPort& operator=(const SerialPort&);
};


//
// inlines
//
inline void SerialPort::reconfigure(const SerialConfig& config)
{
	reconfigureImpl(config);
}

inline void SerialPort::open()
{
	openImpl();
}


inline void SerialPort::close()
{
	closeImpl();
}


inline std::string& SerialPort::read(std::string& buffer)
{
	return readImpl(buffer);
}


inline int SerialPort::write(const std::string& data)
{
	return writeImpl(data);
}


inline const std::string& SerialPort::getName() const
{
	return getNameImpl();
}


} } // namespace Poco::IO


#endif // IO_SerialPort_INCLUDED
