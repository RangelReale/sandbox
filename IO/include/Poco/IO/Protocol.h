//
// Protocol.h
//
// $Id: //poco/1.2/IO/include/Poco/IO/Protocol.h#1 $
//
// Library: IO
// Package: Protocol
// Module:  Protocol
//
// Definition of the Protocol class.
//
// Copyright (c) 2005-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef IO_Protocol_INCLUDED
#define IO_Protocol_INCLUDED


#include "Poco/IO/IO.h"
#include "Poco/IO/AbstractChannel.h"
#include "Poco/RefCountedObject.h"
#include "Poco/AutoPtr.h"
#include "Poco/SharedPtr.h"


namespace Poco {
namespace IO {


class IO_API Protocol: public Poco::RefCountedObject
	/// Protocol is the common base class for protocol classes.
{
public:
	Protocol(AbstractChannel* pChannel);
		/// Creates the Protocol and attaches the given AbstractChannel.
		
	virtual ~Protocol();
		/// Destroys the Protocol.
	
	Protocol(const Protocol& other);
		/// Copy-creates protocol from other protocol.

	Protocol& Protocol::operator = (const Protocol& other);
		/// Assignment operator. 

	virtual int establish();
		/// Establishes the protocol conection.
		/// Must be overridden to establish the protocol connection.

	void writeRaw(const char* buffer, std::size_t length);
		/// Sends the given buffer through the channel exactly as supplied.

	void writeRaw(const std::string& buffer);
		/// Sends the given buffer through the channel exactly as supplied.
		/// If length is not zero and is less than or equal to the string length, 
		/// length bytes are sent. Otherwise, the number of bytes to be set is
		/// determined from the string length.
		
	int write(const char* buffer, std::size_t length, bool send = false);
		/// Wraps the given buffer. If send is true, buffer is sent through the channel.
		/// Returns the number of bytes sent.

	int write(const std::string& buffer);
		/// Wraps the given buffer and sends it through the channel.
		/// Returns the number of bytes sent.
	
	const std::string& readRaw();
		/// Returns the internal buffer without unwrapping it.

	virtual int terminate();
		/// Terminates the protocol connection.
		/// Must be overridden to do the appropriate protocol termination.

	void setNext(Protocol* pNewNext);
		/// Sets the next protocol in chain.

	int send();
		/// Sends the data over the wire.

	std::string& receive(std::string& buffer);
		/// Receives the data.

	void clear();
		/// Clears the internal buffer.

protected:
	Protocol* getNext();
		/// Gets the next protocol in chain.

	AbstractChannel& channel();
		/// Returns the reference to the underlying communication channel.

	virtual std::string& wrap(std::string& buffer) = 0;
	virtual std::string& unwrap(std::string& buffer) = 0;

private:
	Protocol();

	Poco::AutoPtr<Protocol>        _pNext;
	Poco::AutoPtr<AbstractChannel> _pChannel;
	Poco::SharedPtr<std::string>   _pBuffer;
};


///
/// inlines
///


inline int Protocol::send()
{
	std::string str = *_pBuffer;
	int ret = _pChannel->write(str);
	clear(); 
	return ret;
}


inline std::string& Protocol::receive(std::string& buffer)
{
	_pChannel->read(*_pBuffer);
	buffer = *_pBuffer;
	return unwrap(buffer);
}


inline void Protocol::writeRaw(const char* buffer, std::size_t length)
{
	_pBuffer->append(buffer, length);
}


inline void Protocol::writeRaw(const std::string& buffer)
{
	_pBuffer->append(buffer);
}


inline int Protocol::write(const std::string& buffer)
{
	return write(buffer.c_str(), buffer.size(), true);
}


inline const std::string& Protocol::readRaw()
{
	return *_pBuffer;
}


inline AbstractChannel& Protocol::channel()
{
	return *_pChannel;
}


inline Protocol* Protocol::getNext()
{
	return _pNext;
}


inline int Protocol::establish()
{
	return 0;
}


inline int Protocol::terminate()
{
	return 0;
}


inline void Protocol::clear()
{
	_pBuffer->clear();
}


} } // namespace Poco::IO


#endif // IO_Protocol_INCLUDED
