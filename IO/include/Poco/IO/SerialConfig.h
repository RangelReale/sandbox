//
// SerialConfig.h
//
// $Id: //poco/Main/template/class.h#8 $
//
// Library: IO
// Package: Serial
// Module:  SerialConfig
//
// Definition of the SerialConfig class.
//
// Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef IO_SerialConfig_INCLUDED
#define IO_SerialConfig_INCLUDED


#include "Poco/IO/IO.h"


#if defined(POCO_OS_FAMILY_WINDOWS)
#include "Poco/IO/SerialConfig_WIN32.h"
#endif


namespace Poco {
namespace IO {


class IO_API SerialConfig: private SerialConfigImpl
{
public:
	enum Parity
	{
		NONE  = NONE_IMPL,
		ODD   = ODD_IMPL,
		EVEN  = EVEN_IMPL,
		MARK  = MARK_IMPL,
		SPACE = SPACE_IMPL
	};

	enum StartBits
	{
		ONESTART  = ONESTOP_IMPL,
		ONE5START = ONE5STOP_IMPL,
		TWOSTART  = TWOSTOP_IMPL
	};

	enum StopBits
	{
		ONESTOP  = ONESTOP_IMPL,
		ONE5STOP = ONE5STOP_IMPL,
		TWOSTOP  = TWOSTOP_IMPL
	};

	SerialConfig();
	
	SerialConfig::SerialConfig(
		int speed,
		int dataBits = 8,
		Parity parity = NONE,
		StartBits startBits = ONESTART,
		StopBits stopBits = ONESTOP,
		bool useXonXoff = false,
		unsigned char xOnChar = 0x00,
		unsigned char xOffChar = 0xFF,
		bool useEOF = true,
		unsigned char eof = 0x0D,
		int bufferSize = 1,
		int timeout = 5000);

	void setSpeed(int speed);
	void setDataBits(int dataBits);
	void setParity(ParityImpl parity);
	void setStartBits(StartBitsImpl startBits);
	void setStopBits(StopBitsImpl stopBits);
	void setUseXonXoff(bool use);
	void setXonChar(unsigned char xOn);
	void setXoffChar(unsigned char xOff);
	void setUseEOF(bool useEOF);
	void setEOFChar(unsigned char eof);
	void setBufferSize(int size);
	void setTimeoutSeconds(int timeout);
	void setTimeout(int timeout);

	int getSpeed() const;
	int getDataBits() const;
	Parity getParity() const;
	char parityChar() const;
	StartBits getStartBits() const;
	StopBits getStopBits() const;
	bool getUseXonXoff() const;
	unsigned char getXonChar() const;
	unsigned char getXoffChar() const;
	bool getUseEOF() const;
	unsigned char getEOFChar() const;
	int getBufferSize() const;
	int getTimeoutSeconds() const;
	int getTimeout() const;
};


//
// inlines
//
inline void SerialConfig::setSpeed(int speed)
{
	setSpeedImpl(speed);
}


inline void SerialConfig::setDataBits(int dataBits)
{
	setDataBitsImpl(dataBits);
}


inline void SerialConfig::setParity(SerialConfigImpl::ParityImpl parity)
{
	setParityImpl(parity);
}


inline void SerialConfig::setStartBits(SerialConfigImpl::StartBitsImpl startBits)
{
	setStartBitsImpl(startBits);
}


inline void SerialConfig::setStopBits(SerialConfigImpl::StopBitsImpl stopBits)
{
	setStopBitsImpl(stopBits);
}


inline void SerialConfig::setUseXonXoff(bool use)
{
	setUseXonXoffImpl(use);
}


inline void SerialConfig::setXonChar(unsigned char c)
{
	setXonCharImpl(c);
}


inline void SerialConfig::setXoffChar(unsigned char c)
{
	setXoffCharImpl(c);
}


inline void SerialConfig::setUseEOF(bool useEOF)
{
	setUseEOFImpl(useEOF);
}


inline void SerialConfig::setEOFChar(unsigned char eof)
{
	setEOFCharImpl(eof);
}


inline void SerialConfig::setBufferSize(int size)
{
	setBufferSizeImpl(size);
}


inline void SerialConfig::setTimeoutSeconds(int timeout)
{
	setTimeoutSecondsImpl(timeout);
}


inline void SerialConfig::setTimeout(int timeout)
{
	setTimeoutImpl(timeout);
}


inline int SerialConfig::getSpeed() const
{
	return getSpeedImpl();
}


inline int SerialConfig::getDataBits() const
{
	return getDataBitsImpl();
}


inline SerialConfig::Parity SerialConfig::getParity() const
{
	return (Parity) getParityImpl();
}


inline char SerialConfig::parityChar() const
{
	return parityCharImpl();
}


inline SerialConfig::StartBits SerialConfig::getStartBits() const
{
	return (StartBits) getStartBitsImpl();
}


inline SerialConfig::StopBits SerialConfig::getStopBits() const
{
	return (StopBits) getStopBitsImpl();
}


inline bool SerialConfig::getUseXonXoff() const
{
	return getUseXonXoffImpl();
}


inline unsigned char SerialConfig::getXonChar() const
{
	return getXonCharImpl();
}


inline unsigned char SerialConfig::getXoffChar() const
{
	return getXoffCharImpl();
}


inline bool SerialConfig::getUseEOF() const
{
	return getUseEOFImpl();
}


inline unsigned char SerialConfig::getEOFChar() const
{
	return getEOFCharImpl();
}


inline int SerialConfig::getBufferSize() const
{
	return getBufferSizeImpl();
}


inline int SerialConfig::getTimeoutSeconds() const
{
	return getTimeoutSecondsImpl();
}


inline int SerialConfig::getTimeout() const
{
	return getTimeoutImpl();
}


} } // namespace Poco::IO


#endif // IO_SerialConfig_INCLUDED
