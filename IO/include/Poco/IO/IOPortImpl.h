//
// IOPortImpl.h
//
// $Id: //poco/Main/template/class.h#8 $
//
// Library: IO
// Package: IO
// Module:  IOPort
//
// Definition of the IOPortImpl class.
//
// Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef IO_IOPortImpl_INCLUDED
#define IO_IOPortImpl_INCLUDED


#include "Poco/IO/IO.h"


namespace Poco {
namespace IO {


template <class P, class C>
class IOPortImpl
{
protected:
	IOPortImpl(const std::string& name, const C& config): _port(name, config)
	{
	}

	virtual ~IOPortImpl()
	{
	}

	void initImpl()
	{
		return _port.initImpl();
	}

	void reconfigureImpl(const C& config)
	{
		return _port.reconfigureImpl(config);
	}

	void openImpl()
	{
		return _port.openImpl();
	}

	void closeImpl()
	{
		return _port.closeImpl();
	}

	std::string&  readImpl(std::string& buffer)
	{
		return _port.readImpl(buffer);
	}

	int writeImpl(const std::string& data)
	{
		return _port.writeImpl(data);
	}
	
	const std::string& getNameImpl() const
	{
		return _port.getNameImpl();
	}

private:
	P _port;
};


} } // namespace Poco::IO


#endif // IO_IOPortImpl_INCLUDED
