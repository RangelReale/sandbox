//
// IOPort.h
//
// $Id: //poco/Main/template/class.h#8 $
//
// Library: IO
// Package: IO
// Module:  IOPort
//
// Definition of the IOPort class.
//
// Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef IO_IOPort_INCLUDED
#define IO_IOPort_INCLUDED


#include "Poco/IO/IO.h"


namespace Poco {
namespace IO {


template <class P, class C>
class IOPort
	/// The IOPort class provides methods for working with a hardware I/O port.
{
public:
	IOPort(const std::string& name, const C& config): _port(name, config)
		/// Creates the I/O port.
	{
	}

	virtual ~IOPort()
		/// Destroys the I/O port.
	{
	}
		
	void init()
		/// Initializes the port.
	{
		return _port.init();
	}

	void reconfigure(const C& config)
		/// Initializes the port.
	{
		return _port.reconfigure(config);
	}

	void open()
		/// Opens the port.
	{
		return _port.open();
	}

	void close()
		/// Closes the port.
	{
		return _port.close();
	}

	std::string& read(std::string& buffer)
		/// Reads the data from the port.
	{
		return _port.read(buffer);
	}

	int write(const std::string& data)
		/// Writes the data to the port.
	{
		return _port.write(data);
	}

	const std::string& getName() const
		/// Returns the port name.
	{
		return _port.getName();
	}

private:
	IOPort();
	IOPort(const P&);
	const P& operator = (const P&);

	P _port;
};


} } // namespace Poco::IO


#endif // IO_IOPort_INCLUDED
