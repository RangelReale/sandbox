//
// TestChannel.h
//
// $Id: //poco/Main/IO/testsuite/src/TestChannel.h#1 $
//
// Definition of the TestChannel class.
//
// Copyright (c) 2008, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef TestChannel_INCLUDED
#define TestChannel_INCLUDED


#include "Poco/IO/Channel.h"


class TestChannel: public Poco::IO::Channel
{
public:
	TestChannel(std::string& buffer);
		/// Creates test channel.

	~TestChannel();
		/// Destroys test channel.

	void open();
		/// Opens the test chanel.

	void close();
		/// Closes the test channel.

private:
	int readData(char* pBuffer, int length);
	int readData(char*& pBuffer);
	int writeData(const char* buffer, int length);

	TestChannel(const TestChannel&);
	const TestChannel& operator=(const TestChannel&);

	std::string& _buffer;
};


//
// inlines
//


inline void TestChannel::open()
{
}


inline void TestChannel::close()
{
}


#endif // TestChannel_INCLUDED
