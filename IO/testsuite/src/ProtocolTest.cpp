//
// ProtocolTest.cpp
//
// $Id: //poco/Main/template/test.cpp#6 $
//
// Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "ProtocolTest.h"
#include "Poco/IO/Protocol.h"
#include "TestProtocol.h"
#include "Poco/IO/SerialConfig.h"
#include "Poco/IO/SerialChannel.h"
#include "Poco/AutoPtr.h"
#include "CppUnit/TestCaller.h"
#include "CppUnit/TestSuite.h"


using Poco::IO::SerialConfig;
using Poco::IO::SerialChannel;
using Poco::IO::Serial;
using Poco::AutoPtr;


ProtocolTest::ProtocolTest(const std::string& name): 
	CppUnit::TestCase(name),
	_serialConfig(SerialConfig::BAUD_RATE_9600, 
	SerialConfig::DATA_BITS_EIGHT, 
	'N', 
	SerialConfig::START_ONE,
	SerialConfig::STOP_ONE,
	SerialConfig::FLOW_CTRL_SOFTWARE,
	0x11,//xOn
	0x13,//xOff
	false,//use EOF
	0,//EOF 
	100,//buffer size
	100)//timeout
{
#if defined(POCO_OS_FAMILY_WINDOWS)
	_serialName1 = "COM1";
	_serialName2 = "COM2";
#elif defined(POCO_OS_FAMILY_UNIX)
	throw NotImplementedException("Not implemented");
#else
	throw NotImplementedException("Not implemented");
#endif
}


ProtocolTest::~ProtocolTest()
{
}


void ProtocolTest::testOne()
{
	TestProtocol tp1(new Serial(_serialName1, _serialConfig), 1);
	TestProtocol tp2(new Serial(_serialName2, _serialConfig), 1);

	std::string rawData = "<data1>123</data1>";

	tp1.write("123", 3);
	assert (tp1.readRaw() == rawData);
	tp1.send();
	assert (tp1.readRaw() == "");
	std::string str;
	tp2.receive(str);
	assert (tp2.readRaw() == rawData);
	assert ("123" == str);
    tp2.clear();
	assert (tp2.readRaw() == "");

	tp1.write("123");
	assert (tp1.readRaw() == "");
	tp2.receive(str);
	assert (tp2.readRaw() == rawData);
	assert ("123" == str);
}


void ProtocolTest::testTwo()
{
	AutoPtr<Serial> pCom1 = new Serial(_serialName1, _serialConfig);
	AutoPtr<Serial> pCom2 = new Serial(_serialName2, _serialConfig);

	AutoPtr<TestProtocol> pTp1 = new TestProtocol(pCom1, 1);
	AutoPtr<TestProtocol> pTp2 = new TestProtocol(pCom2, 2);

	pTp1->setNext(new TestProtocol(pCom1, 2));
	pTp2->setNext(new TestProtocol(pCom2, 1));

	std::string rawData = "<data1><data2>123</data2></data1>";

	pTp1->write("123", 3);
	assert (pTp1->readRaw() == rawData);
	pTp1->send();
	assert (pTp1->readRaw() == "");
	std::string str;
	pTp2->receive(str);
	assert (pTp2->readRaw() == rawData);
	assert ("123" == str);
    pTp2->clear();
	assert (pTp2->readRaw() == "");

	pTp1->write("123");
	assert (pTp1->readRaw() == "");
	pTp2->receive(str);
	assert (pTp2->readRaw() == rawData);
	assert ("123" == str);
}


void ProtocolTest::setUp()
{
}


void ProtocolTest::tearDown()
{
}


CppUnit::Test* ProtocolTest::suite()
{
	CppUnit::TestSuite* pSuite = new CppUnit::TestSuite("ProtocolTest");

	CppUnit_addTest(pSuite, ProtocolTest, testOne);
	CppUnit_addTest(pSuite, ProtocolTest, testTwo);

	return pSuite;
}
