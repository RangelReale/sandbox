//
// IOTest.cpp
//
// $Id: //poco/Main/template/test.cpp#6 $
//
// Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "IOTest.h"
#include "CppUnit/TestCaller.h"
#include "CppUnit/TestSuite.h"
#include "Poco/ActiveResult.h"
#include "Poco/IO/IOPort.h"
#include "Poco/IO/SerialConfig.h"
#include "Poco/IO/SerialPort.h"
#include "Poco/IO/ActivePort.h"
#include <iostream>

using Poco::ActiveResult;
using Poco::IO::IOPort;
using Poco::IO::SerialConfig;
using Poco::IO::SerialPort;
using Poco::IO::ActivePort;


IOTest::IOTest(const std::string& name): CppUnit::TestCase(name)
{
}


IOTest::~IOTest()
{
}


void IOTest::testSerial()
{
	// In order for this test to work, two serial ports connected 
	// with a null modem cable are needed.

	typedef IOPort<SerialPort, SerialConfig> SerialPort;
	SerialConfig config(9600, 
		8, 
		'N', 
		SerialConfig::StartBits::ONESTART,
		SerialConfig::StopBits::ONESTOP,
		true,//use xOn/xOff
		0x11,//xOn
		0x13,//xOff
		true,//use EOF
		0x0D,//EOF 
		10,//buffer size
		1000);//timeout

	std::string name1;
	std::string name2;

#if defined(POCO_OS_FAMILY_WINDOWS)
	name1 = "COM1";
	name2 = "COM2";
#elif defined(POCO_OS_FAMILY_UNIX)
	throw NotImplementedException("Not implemented");
#endif

	SerialPort com1(name1, config);
	SerialPort com2(name2, config);
	std::string str = "0123456789";
	com1.write(str);
	str = ""; assert("" == str);
	com2.read(str);	
	assert("0123456789" == str);
	
	config.setBufferSize(1);
	config.setSpeed(19200);
	com1.reconfigure(config);
	com2.reconfigure(config);
	com1.write(str);
	str = ""; assert("" == str);	
	com2.read(str);	
	assert("0123456789" == str);
	/*
	ActivePort<SerialPort> activePort(com2);
	ActiveResult<std::string> result = activePort.read(str);
	result.wait();
	assert("0123456789" == str);
	*/
}


void IOTest::setUp()
{
}


void IOTest::tearDown()
{
}


CppUnit::Test* IOTest::suite()
{
	CppUnit::TestSuite* pSuite = new CppUnit::TestSuite("IOTest");

	CppUnit_addTest(pSuite, IOTest, testSerial);

	return pSuite;
}
