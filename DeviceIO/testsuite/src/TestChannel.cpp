//
// TestChannel.cpp
//
// $Id: //poco/Main/DeviceIO/testsuite/src/TestChannel.cpp#1 $
//
// Copyright (c) 2008, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "TestChannel.h"


TestChannel::TestChannel(std::string& buffer): _buffer(buffer)
{
}


TestChannel::~TestChannel()
{
}


int TestChannel::readData(char* pBuffer, int length)
{
	std::memset(pBuffer, 0, length);
	std::size_t len = (length > _buffer.size()) ? _buffer.size() : length;
	std::memcpy(pBuffer, _buffer.c_str(), len);
	_buffer.clear();
	return static_cast<int>(len);
}


int TestChannel::readData(char*& pBuffer)
{
	std::size_t len = _buffer.size();
	pBuffer = static_cast<char*>(std::calloc(len, sizeof(char)));//! freed in parent call
	std::memcpy(pBuffer, _buffer.c_str(), len);
	_buffer.clear();
	return static_cast<int>(len);
}


int TestChannel::writeData(const char* pBuffer, int length)
{
	_buffer.append(pBuffer, length);
	return length;
}
