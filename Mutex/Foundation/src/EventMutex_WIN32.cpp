//
// EventMutex_WIN32.cpp
//
// $Id: //poco/svn/Foundation/src/EventMutex_WIN32.cpp#3 $
//
// Library: Foundation
// Package: Threading
// Module:  Mutex
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/EventMutex_WIN32.h"
#include "Poco/Timestamp.h"


namespace Poco {


EventMutex::EventMutex(): _activeCount(0), _event(0)
{
}


EventMutex::~EventMutex()
{
	void* const _oldEvent = POCO_INTERLOCKED_EXCHANGE_POINTER(&_event, 0);
	if (_oldEvent) CloseHandle(_oldEvent);
}


void* EventMutex::getEvent()
{
	void* currentEvent = interlockedReadAcquire(&_event);

	if(!currentEvent)
	{
		void* const newEvent = CreateEventW(0, AUTO_RESET_EVENT, EVENT_INITIALLY_RESET, 0);
		void* const oldEvent = POCO_INTERLOCKED_COMPARE_EXCHANGE_POINTER(&_event,newEvent,0);

		if(oldEvent!=0)
		{
			CloseHandle(newEvent);
			return oldEvent;
		}
		else return newEvent;
	}
	return currentEvent;
}


bool EventMutex::timedLock(long wait_until)
{
	if (0 == _interlockedbittestandset(&_activeCount, _lockFlagBit))
		return true;

	long oldCount = _activeCount;
	for (;;)
	{
		long const newCount = (oldCount&_lockFlagValue) ? (oldCount + 1) : (oldCount | _lockFlagValue);
		long const current = _InterlockedCompareExchange(&_activeCount, newCount, oldCount);
		if (current == oldCount) break;
		oldCount = current;
	}

	if(oldCount & _lockFlagValue)
	{
		bool lockAcquired = false;
		void* const sem = getEvent();

		do
		{
			if (WaitForSingleObject(sem, wait_until)!=0)
			{
				_InterlockedDecrement(&_activeCount);
				return false;
			}
			oldCount &= ~_lockFlagValue;
			oldCount |= _eventSetFlagValue;
			for(;;)
			{
				long const newCount = ((oldCount & _lockFlagValue) ? oldCount : ((oldCount-1) | _lockFlagValue)) & ~_eventSetFlagValue;
				long const current = _InterlockedCompareExchange(&_activeCount, newCount, oldCount);
				if (current == oldCount) break;
				oldCount = current;
			}
			lockAcquired =! (oldCount & _lockFlagValue);
		}
		while (!lockAcquired);
	}
	return true;
}


} // namespace Poco
