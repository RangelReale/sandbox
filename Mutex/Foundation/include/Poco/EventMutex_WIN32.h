//
// Mutex_WIN32.h
//
// $Id: //poco/svn/Foundation/include/Poco/EventMutex_WIN32.h#3 $
//
// Library: Foundation
// Package: Threading
// Module:  Mutex
//
// Definition of the EventMutex and FastEventMutex classes for WIN32.
//
// Copyright (c) 2004-2008, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// Based on:
//
//  basic_timed_mutex_win32.hpp
//
//  (C) Copyright 2006-8 Anthony Williams 
//
//  Distributed under the Boost Software License, Version 1.0. (See
//  accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)

#ifndef Foundation_EventMutex_WIN32_INCLUDED
#define Foundation_EventMutex_WIN32_INCLUDED


#include "Poco/Foundation.h"
#include "Poco/Exception.h"
#include "Poco/UnWindows.h"
#include <intrin.h>
#include "Poco/Interlocked.h"

namespace Poco {


class Foundation_API EventMutex
{
protected:
	EventMutex();
	~EventMutex();
	void lockImpl();
	bool tryLockImpl();
	bool tryLockImpl(long milliseconds);
	void unlockImpl();
	
private:
	bool timedLock(long wait_until);
	long interlockedReadAcquire(long volatile* x);
	void* interlockedReadAcquire(void* volatile* x);

	enum EventType
	{
		AUTO_RESET_EVENT = false,
		MANUAL_RESET_EVENT = true
	};

	enum InitialEventState
	{
		EVENT_INITIALLY_RESET = false,
		EVENT_INITIALLY_SET = true
	};

	void* getEvent();

	static const unsigned char _lockFlagBit = 31;
	static const unsigned char _eventSetFlagBit = 30;
	static const long          _lockFlagValue = 1 << _lockFlagBit;
	static const long          _eventSetFlagValue = 1 << _eventSetFlagBit;
	long                       _activeCount;
	void*                      _event;

	template <class T> friend class MutexImplT;
};


//
// inlines
//
inline void EventMutex::lockImpl()
{
	timedLock(INFINITE);
}


inline bool EventMutex::tryLockImpl()
{
	return 0 == _interlockedbittestandset(&_activeCount, _lockFlagBit);
}


inline void EventMutex::unlockImpl()
{
	long const offset=_lockFlagValue;
	long const old_count=_InterlockedExchangeAdd(&_activeCount,_lockFlagValue);
	if(!(old_count&_eventSetFlagValue) && (old_count>offset))
	{
		if(0 == _interlockedbittestandset(&_activeCount, _eventSetFlagBit))
			SetEvent(getEvent());
	}
}


inline bool EventMutex::tryLockImpl(long milliseconds)
{
	return timedLock(milliseconds);
}


inline long EventMutex::interlockedReadAcquire(long volatile* x)
{
	long const res = *x;
	_ReadWriteBarrier();
	return res;
}


inline void* EventMutex::interlockedReadAcquire(void* volatile* x)
{
	void* const res = *x;
	_ReadWriteBarrier();
	return res;
}


} // namespace Poco


#endif // Foundation_EventMutex_WIN32_INCLUDED
