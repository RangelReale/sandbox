//
// MutexTest.cpp
//
// $Id: //poco/svn/Foundation/testsuite/src/MutexTest.cpp#2 $
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "MutexTest.h"
#include "CppUnit/TestCaller.h"
#include "CppUnit/TestSuite.h"
#include "Poco/Thread.h"
#include "Poco/Runnable.h"
#include "Poco/CSMutex_WIN32.h"
#include "Poco/EventMutex_WIN32.h"
#include "Poco/Mutex_WIN32.h"
#include "Poco/Stopwatch.h"
#include "Poco/Timestamp.h"
#include "Poco/Exception.h"
#include <iostream>
#include <iomanip>


using Poco::Thread;
using Poco::Runnable;
using Poco::CSMutex;
using Poco::MutexImplT;
using Poco::EventMutex;
using Poco::Stopwatch;
using Poco::Timestamp;
using Poco::TimeoutException;


namespace
{
	typedef MutexImplT<EventMutex> EventMutexImpl;
	typedef MutexImplT<CSMutex> CSMutexImpl;
	const unsigned int loops = 1000;

	class CSTestMutex: private CSMutexImpl
	{
	public:
		typedef Poco::ScopedLock<CSTestMutex> ScopedLock;
		
		CSTestMutex() { }
		~CSTestMutex() { }

		void lock()
		{ return lockImpl(); }

		void lock(long milliseconds)
		{ tryLockImpl(milliseconds); }

		bool tryLock()
		{ return tryLockImpl(); }

		bool tryLock(long milliseconds)
		{ return tryLockImpl(milliseconds); }

		void unlock()
		{ unlockImpl(); }
	};

	class CSRunnable: public Poco::Runnable
	{
	public:
		CSRunnable() { }
		
		void run()
		{
			_sw.start();
			for (int i = 0; i < loops; ++i)
			{
				CSTestMutex::ScopedLock lock(_mutex);
				std::cout << i << "\r";
			}
			_sw.stop(); _tm += _sw.elapsedSeconds();
		}

	int time()
	{ return _tm; }

	private:
		static CSTestMutex _mutex;
		Stopwatch _sw;
		static int _tm;
	};

	CSTestMutex CSRunnable::_mutex;
	int CSRunnable::_tm = 0;

	class EventTestMutex: private EventMutexImpl
	{
	public:
		typedef Poco::ScopedLock<EventTestMutex> ScopedLock;
		
		EventTestMutex() { }
		~EventTestMutex() { }

		void lock()
		{ return lockImpl(); }

		void lock(long milliseconds)
		{ tryLockImpl(milliseconds); }

		bool tryLock()
		{ return tryLockImpl(); }

		bool tryLock(long milliseconds)
		{ return tryLockImpl(milliseconds); }

		void unlock()
		{ unlockImpl(); }
	};

	class EventRunnable: public Poco::Runnable
	{
	public:
		EventRunnable() { }
		
		void run()
		{
			_sw.start();
			for (int i = 0; i < loops; ++i)
			{
				EventTestMutex::ScopedLock lock(_mutex);
				std::cout << i << "\r";
			}
			_sw.stop(); _tm += _sw.elapsedSeconds();
		}

	int time()
	{ return _tm; }

	private:
		static EventTestMutex _mutex;
		Stopwatch _sw;
		static int _tm;
	};

	EventTestMutex EventRunnable::_mutex;
	int EventRunnable::_tm = 0;
}


MutexTest::MutexTest(const std::string& name): CppUnit::TestCase(name)
{
}


MutexTest::~MutexTest()
{
}


void MutexTest::testPerformance()
{
	const int nThreads = 10;
	CSRunnable csRunnable[nThreads];
	EventRunnable eventRunnable[nThreads];
	Poco::Thread t1[nThreads];
	Poco::Thread t2[nThreads];

	for (unsigned int i = 0; i < nThreads; ++i)
	{
		t1[i].start(csRunnable[i]);
		t2[i].start(eventRunnable[i]);
	}

	for (unsigned int i = 0; i < nThreads; ++i)
	{
		t1[i].join();
		t2[i].join();
	}

	std::cout << std::endl << "CS   :" << std::setw(20) << csRunnable[0].time() << " seconds" << std::endl;
	std::cout << "Event:" << std::setw(20) << eventRunnable[0].time() << " seconds" << std::endl;
}


void MutexTest::setUp()
{
}


void MutexTest::tearDown()
{
}


CppUnit::Test* MutexTest::suite()
{
	CppUnit::TestSuite* pSuite = new CppUnit::TestSuite("MutexTest");

	CppUnit_addTest(pSuite, MutexTest, testPerformance);

	return pSuite;
}
