//
// sampleBasic.cpp
//
// $Id: //poco/1.3/Foundation/testsuite/src/sampleBasic.cpp#1 $
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#include "Poco/SharedArray.h"
#include "Poco/Bugcheck.h"
#include <iostream>
#include <set>

using Poco::SharedArray;

template<class T>
void ck( const T* v1, T v2 ) { poco_assert( *v1 == v2 ); }

namespace {
	int UDT_use_count;  // independent of pointer maintained counts
}

//  user defined type  -------------------------------------------------------//

class UDT {
	long value_;
public:
	explicit UDT( long value=0 ) : value_(value) { ++UDT_use_count; }
	~UDT() {
		--UDT_use_count;
		std::cout << "UDT with value " << value_ << " being destroyed\n";
	}
	long value() const { return value_; }
	void value( long v ) { value_ = v;; }
};  // UDT


void basicSample()
{
	poco_assert( UDT_use_count == 0 );  // reality check

	//  test shared_array with a built-in type
	char * cap = new char [ 100 ];
	SharedArray<char> ca ( cap );
	poco_assert( ca.get() == cap );
	poco_assert( cap == ca.get() );
	poco_assert( &ca[0] == cap );

	strcpy( ca.get(), "Hot Dog with mustard and relish" );
	poco_assert( strcmp( ca.get(), "Hot Dog with mustard and relish" ) == 0 );
	poco_assert( strcmp( cap, "Hot Dog with mustard and relish" ) == 0 );

	poco_assert( ca[0] == 'H' );
	poco_assert( ca[30] == 'h' );

	SharedArray<char> ca2 ( ca );
	SharedArray<char> ca3 ( ca2 );

	ca[0] = 'N';
	ca[4] = 'd';
	poco_assert( strcmp( ca.get(), "Not dog with mustard and relish" ) == 0 );
	poco_assert( strcmp( ca2.get(), "Not dog with mustard and relish" ) == 0 );
	poco_assert( strcmp( ca3.get(), "Not dog with mustard and relish" ) == 0 );
	ca2.reset();

	ca.reset();
	poco_assert( ca.get() == 0 );

	SharedArray<char> ca4;
	swap( ca3, ca4 );
	poco_assert( strcmp( ca4.get(), "Not dog with mustard and relish" ) == 0 );
	poco_assert( ca3.get() == 0 );

	std::set< SharedArray<char> > sca;
	sca.insert(ca4);
	poco_assert( sca.find(ca4) != sca.end() );
	poco_assert( sca.find(ca4) == sca.find( SharedArray<char>(ca4) ) );

	//  test shared_array with user defined type
	SharedArray<UDT> udta ( new UDT[3] );

	udta[0].value( 111 );
	udta[1].value( 222 );
	udta[2].value( 333 );
	SharedArray<UDT> udta2 ( udta );

	poco_assert( udta[0].value() == 111 );
	poco_assert( udta[1].value() == 222 );
	poco_assert( udta[2].value() == 333 );
	poco_assert( udta2[0].value() == 111 );
	poco_assert( udta2[1].value() == 222 );
	poco_assert( udta2[2].value() == 333 );
	udta2.reset();
	poco_assert( udta2.get() == 0 );

	poco_assert( UDT_use_count == 3 );  // reality check

	std::cout << "OK\n";

}

int main()
{
	basicSample();
}
