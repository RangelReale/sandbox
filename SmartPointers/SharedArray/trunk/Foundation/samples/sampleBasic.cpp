//
// SharedArrayTest.cpp
//
// $Id: //poco/1.3/Foundation/testsuite/src/SharedArrayTest.cpp#1 $
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#include "Poco/SharedArray.h"
#include <assert.h>
#include <iostream>

using Poco::SharedArray;
using Poco::NullPointerException;

namespace
{
    class TestObject
    {
    public:
        TestObject(const int& data = 0) : _data(data)
        {
            ++_count;
			std::cout << "current counter : " << _count << "\n";
        }

        virtual ~TestObject()
        {
            --_count;
            std::cout << "current counter : " << _count << "\n";
        }

        void set(const int& data)
        {
            _data = data;
        }

        int& data()
        {
            return _data;
        }

        static int count()
        {
            return _count;
        }

    private:
        int _data;
        static int _count;
    };

    int TestObject::_count = 0;
}

struct SharedArrayTest
{

    void testSharedArray()
    {
        SharedArray<TestObject> ptr1;
        poco_assert(ptr1.get() == 0);
        TestObject* pTO1 = new TestObject[10];
        for(int i = 0; i < 10; i++){
            pTO1[i].set(i);
        }

        ptr1 = pTO1;
        assert (ptr1.get() == pTO1);
        assert (ptr1 == pTO1);
        for(int i = 0; i< 10; i++){
            assert(ptr1[i].data() == i);
        }

        TestObject* pTO2 = new TestObject[20];
        for(int i = 20; i > 0; i--){
            pTO2[i].set(i);
        }
        SharedArray<TestObject> ptr2 = pTO2;
        SharedArray<TestObject> ptr3 = ptr1;
        SharedArray<TestObject> ptr4;
        assert (ptr1.get() == pTO1);
        assert (ptr1 == pTO1);
        assert (ptr2.get() == pTO2);
        assert (ptr2 == pTO2);
        assert (ptr3.get() == pTO1);
        assert (ptr3 == pTO1);

        assert (ptr1 == pTO1);
        assert (ptr1 != pTO2);
        assert (ptr1 < pTO2);
        assert (ptr1 <= pTO2);
        assert (ptr2 > pTO1);
        assert (ptr2 >= pTO1);

        assert (ptr1 == ptr3);
        assert (ptr1 != ptr2);
        assert (ptr1 < ptr2);
        assert (ptr1 <= ptr2);
        assert (ptr2 > ptr1);
        assert (ptr2 >= ptr1);

        ptr1.swap(ptr2);
        assert (ptr2 < ptr1);
        ptr2.swap(ptr1);

        try
        {
            assert (ptr4[0].data() == 1);
        }
        catch (NullPointerException&)
        {            
			std::cout << "catch NullPointerException. \n";
		}

        assert (!(ptr4 == ptr1));
        assert (!(ptr4 == ptr2));
        assert (ptr4 != ptr1);
        assert (ptr4 != ptr2);

        ptr4 = ptr2;
        assert (ptr4 == ptr2);
        assert (!(ptr4 != ptr2));

        assert (TestObject::count() == 30);
        ptr1 = 0;
        ptr2 = 0;
        ptr3 = 0;
        ptr4 = 0;
        assert (TestObject::count() == 0);

        {
            SharedArray<TestObject> ptr = new TestObject[2];
            assert (TestObject::count() == 2);
        }
        assert (TestObject::count() == 0);

    }

};

int main()
{

    SharedArrayTest test;
    test.testSharedArray();
}
