//
// sampleHandle.cpp
//
// Copyright (c) 2004-2008, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#include "Poco/SharedPtr.h"
#include "Poco/Debugger.h"
#include "Poco/Bugcheck.h"
#include <iostream>

using Poco::SharedPtr;

static const int MAX_LENGTH = 1024;

void write(const char* filename, const char* buf)
{
    // fp is used to test fclose;
    FILE* fp = 0;

    std::size_t length = strlen(buf);

    if(length<MAX_LENGTH)
    {
        std::size_t n = 0;
        {
            SharedPtr<FILE> p(fp = fopen("./a.txt", "w+"), fclose);
            poco_assert(p.get() != 0);
            n = fwrite(buf, length, 1, p.get());
            poco_assert(n == 1);

        }

        // read back must fail, since the file was closed.
        n = fread((void*)buf, sizeof(buf), 1, fp);
        poco_assert(n < 1);
    }
}

int main()
{
    write("./a.txt", "This is a handle test");
}
