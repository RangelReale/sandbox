//
// sampleIncompleteType.cpp
//
// Copyright (c) 2004-2008, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#include "sampleIncompleteType.h"

#include "Poco/Debugger.h"
#include "Poco/Bugcheck.h"

#include <iostream>

using Poco::SharedPtr;

int main()
{

    char buf[256] = {"This is a test for incomplete type SharedPtr."};
	std::size_t n = 0;

    // test other resource with customized functor deleter
    {
        SharedPtr<File> p = open("./a.txt", "w+");
        poco_assert(p.get() != 0);
        n = write(p, buf, sizeof(buf));
        poco_assert(n == 1);
        n = read(p, buf, sizeof(buf));
        poco_assert(n == 1);
    }

}

// -------------The concrete implentation can be defined somewhere ----------------------

class File
{

public:

	File(char const* name, char const* mode)
	{
		_fp = fopen(name, mode);
	}

	std::size_t write(void* data, std::size_t size)
	{
		return fwrite(data, size, 1, _fp);
	}

	std::size_t read(void* data, std::size_t size)
	{
		return fread(data, size, 1, _fp);
	}

	FILE* _fp;

};

int logFileCloser(File *fp)
{
	std::cout << "logFileCloser:: doing fclose" << std::endl;
	return fclose(fp->_fp);
}

Poco::SharedPtr<File> open(char const* name, char const* mode)
{
    return SharedPtr<File>(new File(name, mode), logFileCloser);
}

std::size_t write(Poco::SharedPtr<File> fp, void* data, std::size_t size)
{
    return fp->write(data, size) ;
}

std::size_t read(Poco::SharedPtr<File> fp, void* data, std::size_t size)
{
    return fp->read(data, size);
}

