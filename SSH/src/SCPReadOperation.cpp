//
// SCPReadOperation.cpp
//
// $Id: //poco/Main/SSH/src/SCPReadOperation.cpp#1 $
//
// Library: SSH
// Package: SCP
// Module:  SCPReadOperation
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/SSH/SCPReadOperation.h"
#include "Poco/SSH/SSHException.h"
#include "Poco/SSH/SSHSession.h"
#include "Poco/SSH/SSHSessionImpl.h"
#include "libssh2.h"


namespace Poco {
namespace SSH {


SCPReadOperation::SCPReadOperation(const Poco::Path& peerFile):
	_peerFile(peerFile.toString(Poco::Path::PATH_UNIX)),
	_peerFileSize(0),
	_bytesRead(0),
	_pChannel(0)
{
}


SCPReadOperation::~SCPReadOperation()
{
	close();
}


void SCPReadOperation::initImpl()
{
	struct stat fileinfo;
	_pChannel = libssh2_scp_recv(session().impl()->session(), _peerFile.c_str(), &fileinfo);
	if (!_pChannel)
		throw SCPException("Failed to acquire channel for SCPReadOperation");

	_peerFileSize = fileinfo.st_size;
	_bytesRead = 0;
}


void SCPReadOperation::closeImpl()
{
	if (_pChannel)
	{
		libssh2_channel_free(_pChannel);
		_pChannel = 0;
	}
}


int SCPReadOperation::read(void* buffer, int length)
{
	if (!isInitialized())
		return 0;
	if (_peerFileSize < _bytesRead)
		throw SCPException("Read too many bytes: Server returned illegal file size description");

	char* pBuffer = reinterpret_cast<char*>(buffer);

	if (bytesNotRead() < length)
		length = static_cast<int>(bytesNotRead());

	if (length == 0)
		return 0;

	int rc = libssh2_channel_read(_pChannel, pBuffer, length);
	if (rc > 0)
		_bytesRead += rc;

	return rc;
}


} } // namespace Poco::SSH
