//
// SSHChannelImplImpl.cpp
//
// $Id: //poco/Main/SSH/src/SSHChannelImpl.cpp#1 $
//
// Library: SSH
// Package: SSHCore
// Module:  SSHChannelImpl
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/SSH/SSHChannelImpl.h"
#include "Poco/SSH/SSHSession.h"
#include "Poco/SSH/SSHException.h"
#include "Poco/SSH/SSHSessionImpl.h"


namespace Poco {
namespace SSH {



SSHChannelImpl::SSHChannelImpl():
	_pChannel(0)
{
}


SSHChannelImpl::SSHChannelImpl(SSHSession& session):
	_pChannel(0)
{
	init(session);
}


SSHChannelImpl::~SSHChannelImpl()
{
	close();
}


void SSHChannelImpl::init(SSHSession& session)
{
	close();

	_pChannel = libssh2_channel_open_session(session.impl()->session());

	if (!_pChannel)
		throw SSHException("Failed to acquire channel for SSHTerminal");
}


void SSHChannelImpl::close()
{
	if (_pChannel)
	{
		libssh2_channel_send_eof(_pChannel);
		libssh2_channel_close(_pChannel);
		libssh2_channel_free(_pChannel);
		_pChannel = 0;
	}
	
}


} } // namespace Poco::SSH
