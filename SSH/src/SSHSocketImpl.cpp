//
// SSHSocketImpl.cpp
//
// $Id: //poco/Main/SSH/src/SSHSocketImpl.cpp#2 $
//
// Library: SSH
// Package: SSHSocket
// Module:  SSHSocketImpl
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/SSH/SSHSocketImpl.h"
#include "Poco/SSH/SSHSessionImpl.h"
#include "Poco/SSH/SSHException.h"
#include "Poco/SSH/SSHReadOperation.h"
#include "Poco/SSH/SSHWriteOperation.h"
#include "Poco/Net/SocketAddress.h"
#include "Poco/Net/SocketImpl.h"
#include "Poco/Net/StreamSocket.h"


using Poco::Net::SocketAddress;
using Poco::Net::SocketImpl;
using Poco::Net::StreamSocket;


namespace Poco {
namespace SSH {


SSHSocketImpl::SSHSocketImpl(SSHHostValidator& val, const std::string& userName, const std::string& pwd, SSHReadOperation* pRead, SSHWriteOperation* pWrite):
	_user(userName),
	_pwd(pwd),
	_pValidator(&val),
	_ptrSession(),
	_pRead(pRead),
	_pWrite(pWrite)
{
}


SSHSocketImpl::SSHSocketImpl(SSHHostValidator& val, SSHSession& ses, const std::string& userName, const std::string& pwd, SSHReadOperation* pRead, SSHWriteOperation* pWrite):
	_user(userName),
	_pwd(pwd),
	_pValidator(&val),
	_ptrSession(&ses, true),
	_pRead(pRead),
	_pWrite(pWrite)
{
}


SSHSocketImpl::SSHSocketImpl(SSHSession& ses, SSHReadOperation* pRead, SSHWriteOperation* pWrite):
	_user(),
	_pwd(),
	_pValidator(0),
	_ptrSession(&ses, true),
	_pRead(pRead),
	_pWrite(pWrite)
{
}


SSHSocketImpl::~SSHSocketImpl()
{
	close();
}


SocketImpl* SSHSocketImpl::acceptConnection(SocketAddress& clientAddr)
{
	throw SSHNotImplementedException("SSHSocketImpl::acceptConnection");
}


void SSHSocketImpl::connect(const SocketAddress& address)
{
	if (!_pValidator)
		throw SSHException("Cannot connect: no validator set");
	_ptrSession = new SSHSession(*_pValidator, address, _user, _pwd);
	newSessionSet();
}


void SSHSocketImpl::connect(const SocketAddress& address, const Poco::Timespan& timeout)
{
	if (!_pValidator)
		throw SSHException("Cannot connect: no validator set");
	StreamSocket sock;
	sock.connect(address, timeout);
	_ptrSession = new SSHSession(*_pValidator, sock, _user, _pwd);
	newSessionSet();
}


void SSHSocketImpl::connectNB(const SocketAddress& address)
{
	if (!_pValidator)
		throw SSHException("Cannot connect: no validator set");
	StreamSocket sock;
	sock.connectNB(address);
	_ptrSession = new SSHSession(*_pValidator, sock, _user, _pwd);
	newSessionSet();
}


void SSHSocketImpl::bind(const SocketAddress& address, bool reuseAddress)
{
	throw SSHNotImplementedException("SSHSocketImpl::bind");
}


void SSHSocketImpl::listen(int backlog)
{
	throw SSHNotImplementedException("SSHSocketImpl::listen");
}


void SSHSocketImpl::close()
{
	if (_pRead)
		delete _pRead;
	_pRead = 0;
	if (_pWrite)
		delete _pWrite;
	_pWrite = 0;

	_ptrSession = 0;
}


int SSHSocketImpl::sendBytes(const void* buffer, int length, int)
{
	if (!_pWrite)
		throw SSHException("SSHSocketImpl::sendBytes not allowed");
	if(!_pWrite->isInitialized())
		_pWrite->init(*_ptrSession);

	return _pWrite->write(buffer, length);
}


int SSHSocketImpl::receiveBytes(void* buffer, int length, int)
{
	if (!_pRead)
		throw SSHException("SSHSocketImpl::receiveBytes not allowed");
	if(!_pRead->isInitialized())
		_pRead->init(*_ptrSession);

	return _pRead->read(buffer, length);
}


int SSHSocketImpl::sendTo(const void* buffer, int length, const SocketAddress& address, int flags)
{
	throw SSHNotSupportedException("SSHSocketImpl::sendTo not meaningful with SSH");
}


int SSHSocketImpl::receiveFrom(void* buffer, int length, SocketAddress& address, int flags)
{
	throw SSHNotSupportedException("SSHSocketImpl::receiveFrom not meaningful with SSH");
}


void SSHSocketImpl::sendUrgent(unsigned char data)
{
	throw SSHNotSupportedException("SSHSocketImpl::sendUrgent not meaningful with SSH");
}


poco_socket_t SSHSocketImpl::sockfd()
{
	if (_ptrSession)
	{
		return _ptrSession->impl()->socket().impl()->sockfd();
	}
	return POCO_INVALID_SOCKET;
}


void SSHSocketImpl::newSessionSet()
{
	if (_pRead)
		_pRead->close();

	if(_pWrite)
		_pWrite->close();
}


} } // namespace Poco::SSH
