//
// SSHChannel.cpp
//
// $Id: //poco/Main/SSH/src/SSHChannel.cpp#1 $
//
// Library: SSH
// Package: SSHCore
// Module:  SSHChannel
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/SSH/SSHChannel.h"
#include "Poco/SSH/SSHChannelImpl.h"


namespace Poco {
namespace SSH {


SSHChannel::SSHChannel():
	_pImpl(new SSHChannelImpl())
{
}


SSHChannel::SSHChannel(SSHSession& session):
	_pImpl(new SSHChannelImpl(session))
{
}


SSHChannel::~SSHChannel()
{
	_pImpl->release();
}


SSHChannel::SSHChannel(const SSHChannel& other):
	_pImpl(other._pImpl)
{
	_pImpl->duplicate();
}


SSHChannel& SSHChannel::operator=(const SSHChannel& other)
{
	if (&other != this)
	{
		SSHChannel tmp(other);
		swap(tmp);
	}
	return *this;
}


void SSHChannel::swap(SSHChannel& other)
{
	_pImpl->release();
	_pImpl = other._pImpl;
	_pImpl->duplicate();
}


void SSHChannel::init(SSHSession& session)
{
	_pImpl->init(session);
}


void SSHChannel::close()
{
	_pImpl->close();
}


LIBSSH2_CHANNEL* SSHChannel::channel() const
{
	return _pImpl->channel();
}


} } // namespace Poco::SSH
