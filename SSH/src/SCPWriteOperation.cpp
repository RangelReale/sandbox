//
// SCPWriteOperation.cpp
//
// $Id: //poco/Main/SSH/src/SCPWriteOperation.cpp#1 $
//
// Library: SSH
// Package: SCP
// Module:  SCPWriteOperation
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/SSH/SCPWriteOperation.h"
#include "Poco/SSH/SSHSession.h"
#include "Poco/SSH/SSHSessionImpl.h"
#include "Poco/SSH/SSHException.h"


namespace Poco {
namespace SSH {


SCPWriteOperation::SCPWriteOperation(const Poco::File& localFile, const Poco::Path& peerFile):
	_localFile(localFile),
	_peerFile(peerFile.toString(Poco::Path::PATH_UNIX)),
	_localFileSize(0),
	_bytesWritten(0),
	_pChannel(0)
{
	// 0 sized files allowed? well, assume yes, so no size check
	poco_assert (localFile.exists());
}


SCPWriteOperation::SCPWriteOperation(std::size_t numBytes, const Poco::Path& peerFile):
	_localFile(),
	_peerFile(peerFile.toString(Poco::Path::PATH_UNIX)),
	_localFileSize(numBytes),
	_bytesWritten(0),
	_pChannel(0)
{
	poco_assert (numBytes >= 0);
}


SCPWriteOperation::~SCPWriteOperation()
{
	close();
}


void SCPWriteOperation::initImpl()
{
	// two cases: either we have a local file and _localFileSize is 0
	// or we have no local file, only a fileSize and we need to fake the fileinfo stat
	int mode = 0x1b6;
	if (!_localFile.path().empty() && _localFile.exists())
	{
		struct stat fileInfo;
		stat(_localFile.path().c_str(), &fileInfo);
		_localFileSize = fileInfo.st_size;
		mode = 0x1FF & fileInfo.st_mode;
	}

	_pChannel = libssh2_scp_send(session().impl()->session(), _peerFile.c_str(), mode, (unsigned long)_localFileSize);

	if (!_pChannel)
		throw SCPException("Failed to acquire channel for SCPWriteOperation");

	_bytesWritten = 0;
}


void SCPWriteOperation::closeImpl()
{
	if (_pChannel)
	{
		// copy in case an exception occurs
		LIBSSH2_CHANNEL* pChannel = _pChannel;
		_pChannel = 0;
		libssh2_channel_send_eof(pChannel);
		libssh2_channel_wait_eof(pChannel);
		libssh2_channel_wait_closed(pChannel);
		libssh2_channel_free(pChannel);
	}
}


int SCPWriteOperation::write(const void* buffer, int length)
{
	if (!isInitialized())
		return -1;
	if (_bytesWritten+length > _localFileSize)
		throw SCPException("Trying to write too many bytes");

	const char* pBuffer = reinterpret_cast<const char*>(buffer);

	int rc = libssh2_channel_write(_pChannel, pBuffer, length);
	if (rc > 0)
		_localFileSize += rc;
	return rc;
}


} } // namespace Poco::SSH
