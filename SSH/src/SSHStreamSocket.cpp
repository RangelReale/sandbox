//
// SSHStreamSocket.cpp
//
// $Id: //poco/Main/SSH/src/SSHStreamSocket.cpp#1 $
//
// Library: SSH
// Package: SSHSocket
// Module:  SSHStreamSocket
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/SSH/SSHStreamSocket.h"
#include "Poco/SSH/SSHStreamSocketImpl.h"
#include "Poco/Exception.h"


using Poco::Net::StreamSocket;


namespace Poco {
namespace SSH {


SSHStreamSocket::SSHStreamSocket(SSHHostValidator& val, const std::string& userName, const std::string& pwd, SSHReadOperation* pRead, SSHWriteOperation* pWrite): 
	StreamSocket(new SSHStreamSocketImpl(val, userName, pwd, pRead, pWrite))
{
}


SSHStreamSocket::SSHStreamSocket(SSHHostValidator& val, SSHSession& ses, const std::string& userName, const std::string& pwd, SSHReadOperation* pRead, SSHWriteOperation* pWrite): 
	StreamSocket(new SSHStreamSocketImpl(val, ses, userName, pwd, pRead, pWrite))
{
}


SSHStreamSocket::SSHStreamSocket(SSHSession& ses, SSHReadOperation* pRead, SSHWriteOperation* pWrite): 
	StreamSocket(new SSHStreamSocketImpl(ses, pRead, pWrite))
{
}


SSHStreamSocket::SSHStreamSocket(const Poco::Net::Socket& sock):
	StreamSocket(sock)
{
	if (!dynamic_cast<SSHStreamSocketImpl*>(impl()))
		throw InvalidArgumentException("Cannot assign incompatible socket");
}


SSHStreamSocket::~SSHStreamSocket()
{
}


SSHStreamSocket& SSHStreamSocket::operator = (const Socket& socket)
{
	if (dynamic_cast<SSHStreamSocketImpl*>(socket.impl()))
		StreamSocket::operator = (socket);
	else
		throw InvalidArgumentException("Cannot assign incompatible socket");
	return *this;
}


} } // namespace Poco::SSH
