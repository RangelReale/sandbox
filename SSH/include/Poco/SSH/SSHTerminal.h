//
// SSHTerminal.h
//
// $Id: //poco/Main/SSH/include/Poco/SSH/SSHTerminal.h#3 $
//
// Library: SSH
// Package: SSHTerminal
// Module:  SSHTerminal
//
// Definition of the SSHTerminal class.
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef SSH_SSHTerminal_INCLUDED
#define SSH_SSHTerminal_INCLUDED


#include "Poco/SSH/SSH.h"
#include "Poco/SSH/SSHChannel.h"
#include <map>


namespace Poco {
namespace SSH {


class SSHSession;


class SSH_API SSHTerminal
	/// An SSHTerminal allows to create remote sheels or execute remote commands via SSH
{
public:
	typedef std::map<std::string, std::string> EnvVariables;

	SSHTerminal();
		/// Creates an unconnected SSHTerminal. Call init later.

	SSHTerminal(SSHSession& session, const std::string& terminalEmulation = std::string(), const EnvVariables& environment = SSHTerminal::EnvVariables());
		/// Creates a connected SSHTerminal. Sets the environment variables at the peer

	~SSHTerminal();
		/// Destroys the SSHTerminal.

	void init(SSHSession& session, const std::string& terminalEmulation = std::string(), const EnvVariables& environment = SSHTerminal::EnvVariables());
		/// Connects a terminal to the remote peer and sets the given environment variables

	void close();
		/// Closes the Terminal

	void setEnvironmentVariable(const std::string& key, const std::string& value);
		/// Sets the environemnt varaible at the Terminal. The Terminal must be connected!

	SSHChannel openShell();
		/// Opens a shell at the peer. The returned SSHChannel can be used to create SSHChannelStream to the remote stdin, stdout, stderr.

	SSHChannel launch(const std::string& command);
		/// Executes the command at the remote peer

	void setBlocking(bool val);
		/// Sets a terminal's blocking mode

private:
	SSHTerminal(const SSHTerminal&);
	SSHTerminal& operator=(const SSHTerminal&);

private:
	SSHSession*      _pSession;
	SSHChannel       _channel;
};


} } // namespace Poco::SSH


#endif // SSH_SSHTerminal_INCLUDED
