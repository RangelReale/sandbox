//
// SSHStreamSocket.h
//
// $Id: //poco/Main/SSH/include/Poco/SSH/SSHStreamSocket.h#1 $
//
// Library: SSH
// Package: SSHSocket
// Module:  SSHStreamSocket
//
// Definition of the SSHStreamSocket class.
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef SSH_SSHStreamSocket_INCLUDED
#define SSH_SSHStreamSocket_INCLUDED


#include "Poco/SSH/SSH.h"
#include "Poco/Net/StreamSocket.h"


namespace Poco {
namespace SSH {


	class SSHHostValidator;
	class SSHReadOperation;
	class SSHWriteOperation;
	class SSHSession;


class SSH_API SSHStreamSocket: public Poco::Net::StreamSocket
	/// An SSH streaming socket
{
public:
	SSHStreamSocket(SSHHostValidator& val, const std::string& userName, const std::string& pwd, SSHReadOperation* pRead, SSHWriteOperation* pWrite);
		/// Creates an unconnected stream socket. Takes ownership of pRead and pWrite which can be null.
		///
		/// Before sending or receiving data, the socket
		/// must be connected with a call to connect().
		/// Set proper read and write operations to enable reading/writing.

	SSHStreamSocket(SSHHostValidator& val, SSHSession& ses, const std::string& userName, const std::string& pwd, SSHReadOperation* pRead, SSHWriteOperation* pWrite);
		/// Creates a stream socket and connects it to
		/// the SSHSession. Reconnect is possible. Takes ownership of pRead and pWrite which can be null.

	SSHStreamSocket(SSHSession& ses, SSHReadOperation* pRead, SSHWriteOperation* pWrite);
		/// Creates a stream socket and connects it to
		/// the SSHSession. No further connect is possible. Takes ownership of pRead and pWrite which can be null.

	SSHStreamSocket(const Poco::Net::Socket& sock);
		/// Creates the SSHStreamSocket with the SocketImpl
		/// from another socket. The SocketImpl must be
		/// a SSHStreamSocketImpl, otherwise an InvalidArgumentException
		/// will be thrown.

	virtual ~SSHStreamSocket();
		/// Destroys the SSHStreamSocket.

	SSHStreamSocket& operator = (const Socket& socket);
		/// Assignment operator.
		///
		/// Releases the socket's SocketImpl and
		/// attaches the SocketImpl from the other socket and
		/// increments the reference count of the SocketImpl.
};


} } // namespace Poco::SSH


#endif // SSH_SSHStreamSocket_INCLUDED
