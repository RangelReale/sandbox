//
// SSHSocketImpl.h
//
// $Id: //poco/Main/SSH/include/Poco/SSH/SSHSocketImpl.h#1 $
//
// Library: SSH
// Package: SSHSocket
// Module:  SSHSocketImpl
//
// Definition of the SSHSocketImpl class.
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef SSH_SSHSocketImpl_INCLUDED
#define SSH_SSHSocketImpl_INCLUDED


#include "Poco/SSH/SSH.h"
#include "Poco/SSH/SSHSession.h"
#include "Poco/AutoPtr.h"
#include "Poco/Timespan.h"
#include "Poco/Net/SocketDefs.h"


namespace Poco {
namespace Net {

	class SocketAddress;
	class SocketImpl;
}
}


namespace Poco {
namespace SSH {


	class SSHHostValidator;
	class SSHReadOperation;
	class SSHWriteOperation;


class SSH_API SSHSocketImpl
	/// Base class for all SSHSocket related activities. Server side methods like accept, bind are not implemented!
{
public:
	SSHSocketImpl(SSHHostValidator& val, const std::string& userName, const std::string& pwd, SSHReadOperation* pRead, SSHWriteOperation* pWrite);
		/// Creates an unconnected SSHSocketImpl. Takes ownership of pRead and pWrite, one of the pointers can be null.

	SSHSocketImpl(SSHHostValidator& val, SSHSession& ses, const std::string& userName, const std::string& pwd, SSHReadOperation* pRead, SSHWriteOperation* pWrite);
		/// Creates a connected SSHSocketImpl. Reconnecting possible. Takes ownership of pRead and pWrite, one of the pointers can be null.

	SSHSocketImpl(SSHSession& ses, SSHReadOperation* opRead, SSHWriteOperation* opWrite);
		/// Creates a connected SSHSocketImpl. No further connects are possible! Takes ownership of pRead and pWrite, one of the pointers can be null.

	~SSHSocketImpl();
		/// Destroys the SSHSocketImpl.

	Poco::Net::SocketImpl* acceptConnection(Poco::Net::SocketAddress& clientAddr);
		/// Get the next completed connection from the
		/// socket's completed connection queue.
		///
		/// If the queue is empty, waits until a connection
		/// request completes.
		///
		/// Returns a new TCP socket for the connection
		/// with the client.
		///
		/// The client socket's address is returned in clientAddr.
	
	void connect(const Poco::Net::SocketAddress& address);
		/// Initializes the socket and establishes a connection to 
		/// the TCP server at the given address.
		///
		/// Can also be used for UDP sockets. In this case, no
		/// connection is established. Instead, incoming and outgoing
		/// packets are restricted to the specified address.

	void connect(const Poco::Net::SocketAddress& address, const Poco::Timespan& timeout);
		/// Initializes the socket, sets the socket timeout and 
		/// establishes a connection to the TCP server at the given address.

	void connectNB(const Poco::Net::SocketAddress& address);
		/// Initializes the socket and establishes a connection to 
		/// the TCP server at the given address. Prior to opening the
		/// connection the socket is set to nonblocking mode.
	
	void bind(const Poco::Net::SocketAddress& address, bool reuseAddress = false);
		/// Bind a local address to the socket.
		///
		/// This is usually only done when establishing a server
		/// socket. TCP clients should not bind a socket to a
		/// specific address.
		///
		/// If reuseAddress is true, sets the SO_REUSEADDR
		/// socket option.
		
	void listen(int backlog = 64);
		/// Puts the socket into listening state.
		///
		/// The socket becomes a passive socket that
		/// can accept incoming connection requests.
		///
		/// The backlog argument specifies the maximum
		/// number of connections that can be queued
		/// for this socket.

	void close();
		/// Close the socket.
	
	int sendBytes(const void* buffer, int length, int flags = 0);
		/// Sends the contents of the given buffer through
		/// the socket. Any specified flags are ignored.
		///
		/// Returns the number of bytes sent, which may be
		/// less than the number of bytes specified.
	
	int receiveBytes(void* buffer, int length, int flags = 0);
		/// Receives data from the socket and stores it
		/// in buffer. Up to length bytes are received.
		///
		/// Returns the number of bytes received.
	
	int sendTo(const void* buffer, int length, const Poco::Net::SocketAddress& address, int flags = 0);
		/// Sends the contents of the given buffer through
		/// the socket to the given address.
		///
		/// Returns the number of bytes sent, which may be
		/// less than the number of bytes specified.
	
	int receiveFrom(void* buffer, int length, Poco::Net::SocketAddress& address, int flags = 0);
		/// Receives data from the socket and stores it
		/// in buffer. Up to length bytes are received.
		/// Stores the address of the sender in address.
		///
		/// Returns the number of bytes received.
	
	void sendUrgent(unsigned char data);
		/// Sends one byte of urgent data through
		/// the socket.
		///
		/// The data is sent with the MSG_OOB flag.
		///
		/// The preferred way for a socket to receive urgent data
		/// is by enabling the SO_OOBINLINE option.

	poco_socket_t sockfd();
		/// Returns the socket.

private:
	void newSessionSet();
		/// a new session was set, update members

private:
	std::string       _user;
	std::string       _pwd;
	SSHHostValidator* _pValidator;
	Poco::AutoPtr<SSHSession> _ptrSession;
	SSHReadOperation* _pRead;
	SSHWriteOperation* _pWrite;
};


} } // namespace Poco::SSH


#endif // SSH_SSHSocketImpl_INCLUDED
