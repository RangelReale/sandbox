//
// SCPReadOperation.h
//
// $Id: //poco/Main/SSH/include/Poco/SSH/SCPReadOperation.h#1 $
//
// Library: SSH
// Package: SCP
// Module:  SCPReadOperation
//
// Definition of the SCPReadOperation class.
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef SSH_SCPReadOperation_INCLUDED
#define SSH_SCPReadOperation_INCLUDED


#include "Poco/SSH/SSH.h"
#include "Poco/SSH/SSHReadOperation.h"
#include "Poco/Path.h"


namespace Poco {
namespace SSH {


class SSH_API SCPReadOperation: public SSHReadOperation
	/// Reads a file via SCP
{
public:
	SCPReadOperation(const Poco::Path& peerFile);
		/// Creates the SCPReadOperation.

	virtual ~SCPReadOperation();
		/// Destroys the SCPReadOperation.

	void initImpl();
		/// Initializes the operation, throws an exception if 
		/// initialization failed

	void closeImpl();
		/// Shutsdown the operation. After close isInitialized must return false

	int read(void* buffer, int length);
		/// Reads at most length bytes into buffer, returns number of bytes read.

	void updateSession(SSHSession& ses);
		/// Sets a new session for the operation

private:
	std::size_t bytesNotRead() const;
		/// Number of bytes still waiting to be read

private:
	std::string _peerFile;
	std::size_t _peerFileSize;
	std::size_t _bytesRead;
	LIBSSH2_CHANNEL* _pChannel;
};


inline std::size_t SCPReadOperation::bytesNotRead() const
{
	return _peerFileSize - _bytesRead;
}


} } // namespace Poco::SSH


#endif // SSH_SCPReadOperation_INCLUDED
