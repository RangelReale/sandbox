//
// CipherImpl.cpp
//
// $Id$
//
// Library: Crypto
// Package: CryptoCore
// Module:	CipherImpl
//
// Copyright (c) 2008, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Crypto/CryptoTransform.h"

#include "CipherImpl.h"

#include "Poco/Exception.h"
#include <openssl/err.h>


namespace Poco {
namespace Crypto {


static void throwError()
{
	unsigned long err;
	std::string msg;
	
	while ((err = ERR_get_error()))
	{
		if (!msg.empty())
			msg.append("; ");
		msg.append(ERR_error_string(err, 0));
	}

	throw Poco::IOException(msg);
}


class CryptoTransformImpl : public CryptoTransform
{
public:
	typedef Cipher::ByteVec ByteVec;

	enum Direction
	{
		DIR_ENCRYPT,
		DIR_DECRYPT
	};

	CryptoTransformImpl(
		const EVP_CIPHER* pCipher,
		const ByteVec&	  key,
		const ByteVec&	  iv,
		Direction		  dir);

	~CryptoTransformImpl();
	
	std::size_t blockSize() const;

	std::streamsize transform(
		const unsigned char* input,
		std::streamsize		 inputLength,
		unsigned char*		 output,
		std::streamsize		 outputLength);
	
	std::streamsize finalize(
		unsigned char*	output,
		std::streamsize length);

private:
	const EVP_CIPHER* _pCipher;
	EVP_CIPHER_CTX	  _ctx;
	ByteVec			  _key;
	ByteVec			  _iv;
};


CryptoTransformImpl::CryptoTransformImpl(
	const EVP_CIPHER* pCipher,
	const ByteVec&	  key,
	const ByteVec&	  iv,
	Direction		  dir) :
		_pCipher(pCipher),
		_key(key),
		_iv(iv)
{
	EVP_CipherInit(
		&_ctx,
		_pCipher,
		&_key[0],
		&_iv[0],
		(dir == DIR_ENCRYPT) ? 1 : 0);
}


CryptoTransformImpl::~CryptoTransformImpl()
{
	EVP_CIPHER_CTX_cleanup(&_ctx);
}


std::size_t CryptoTransformImpl::blockSize() const
{
	return EVP_CIPHER_CTX_block_size(&_ctx);
}


std::streamsize CryptoTransformImpl::transform(
	const unsigned char* input,
	std::streamsize		 inputLength,
	unsigned char*		 output,
	std::streamsize		 outputLength)
{
	poco_assert (outputLength >= (inputLength + blockSize() - 1));

	int rc = EVP_CipherUpdate(
		&_ctx,
		output,
		&outputLength,
		input,
		inputLength);

	if (rc == 0)
		throwError();

	return outputLength;
}


std::streamsize CryptoTransformImpl::finalize(
	unsigned char*	output,
	std::streamsize length)
{
	poco_assert (length >= blockSize());

	// Use the '_ex' version that does not perform implicit cleanup since we
	// will call EVP_CIPHER_CTX_cleanup() from the dtor as there is no
	// guarantee that finalize() will be called if an error occurred.
	int rc = EVP_CipherFinal_ex(&_ctx, output, &length);

	if (rc == 0)
		throwError();

	return length;
}


CipherImpl::CipherImpl(const EVP_CIPHER* pCipher) :
	_pCipher(pCipher),
	_name(EVP_CIPHER_name(pCipher)),
	_key(keySize()),
	_iv(ivSize())
{
}


CipherImpl::~CipherImpl()
{
}


Cipher::Mode CipherImpl::mode() const
{
	switch (EVP_CIPHER_mode(_pCipher))
	{
	case EVP_CIPH_STREAM_CIPHER:
		return MODE_STREAM_CIPHER;

	case EVP_CIPH_ECB_MODE:
		return MODE_ECB;

	case EVP_CIPH_CBC_MODE:
		return MODE_CBC;

	case EVP_CIPH_CFB_MODE:
		return MODE_CFB;

	case EVP_CIPH_OFB_MODE:
		return MODE_OFB;
	}
	throw Poco::IllegalStateException("Unexpected value of EVP_CIPHER_mode()");
}


void CipherImpl::generateKey(
	const std::string& password,
	const std::string& salt,
	int iterationCount)
{
	unsigned char keyBytes[EVP_MAX_KEY_LENGTH];
	unsigned char ivBytes[EVP_MAX_IV_LENGTH];

	// OpenSSL documentation specifies that the salt must be an 8-byte array.
	unsigned char saltBytes[8];

	if (!salt.empty())
	{
		int len = salt.size();
		// Create the salt array from the salt string
		for (int i = 0; i < 8; ++i)
			saltBytes[i] = salt.at(i % len);
		for (int i = 8; i < len; ++i)
			saltBytes[i % 8] ^= salt.at(i);
	}

	// Now create the key and IV, using the MD5 digest algorithm.
	int keySize = EVP_BytesToKey(
		_pCipher,
		EVP_md5(),
		(salt.empty() ? 0 : saltBytes),
		reinterpret_cast<const unsigned char*>(password.data()),
		password.size(),
		iterationCount,
		keyBytes,
		ivBytes);

	// Copy the buffers to our member byte vectors.
	_key.assign(keyBytes, keyBytes + keySize);

	if (ivSize() == 0)
		_iv.clear();
	else
		_iv.assign(ivBytes, ivBytes + ivSize());
}


CryptoTransform* CipherImpl::createEncryptor()
{
	return new CryptoTransformImpl(_pCipher, _key, _iv,
		CryptoTransformImpl::DIR_ENCRYPT);
}


CryptoTransform* CipherImpl::createDecryptor()
{
	return new CryptoTransformImpl(_pCipher, _key, _iv,
		CryptoTransformImpl::DIR_DECRYPT);
}


} } // namespace Poco::Crypto
