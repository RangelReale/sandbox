//
// PgSQLException.cpp
//
// $Id: //poco/1.4/Data/PgSQL/src/PgSQLException.cpp#1 $
//
// Library: Data
// Package: PgSQL
// Module:  PgSQLException
//
// Copyright (c) 2008, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Data/PgSQL/PgSQLException.h"
#include <stdio.h>
#include <libpq-fe.h>

namespace Poco {
namespace Data {
namespace PgSQL {


PgSQLException::PgSQLException(const std::string& msg) : Poco::Data::DataException(std::string("[PgSQL]: ") + msg)
{
}


PgSQLException::PgSQLException(const PgSQLException& exc) : Poco::Data::DataException(exc)
{
}


PgSQLException::~PgSQLException() throw()
{
}


/////
//
// ConnectionException
//
/////


ConnectionException::ConnectionException(const std::string& msg) : PgSQLException(msg)
{
}


ConnectionException::ConnectionException(const std::string& text, PgSQL* h) : PgSQLException(compose(text, h))
{
}


std::string ConnectionException::compose(const std::string& text, PgSQL* h)
{
	std::string str;
	str += "[Comment]: ";
	str += text;
	str += "\t[PgSQL_error]: ";
	str += PQerrorMessage(h);

	// TODO:
/*
	str += "\t[PgSQL_errno]: ";
	char buff[30];
	sprintf(buff, "%d", PgSQL_errno(h));
	str += buff;

	str += "\t[PgSQL_sqlstate]: ";
	str += PgSQL_sqlstate(h);
	*/
	return str;
}


/////
//
// TransactionException
//
/////


TransactionException::TransactionException(const std::string& msg) : ConnectionException(msg)
{
}


TransactionException::TransactionException(const std::string& text, PgSQL* h) : ConnectionException(text, h)
{
}


/////
//
// StatementException
//
/////


StatementException::StatementException(const std::string& msg) : PgSQLException(msg)
{
}


StatementException::StatementException(const std::string& text, PgSQL_STMT* h, const std::string& stmt) : PgSQLException(compose(text, h, stmt))
{
}


std::string StatementException::compose(const std::string& text, PgSQL_STMT* h, const std::string& stmt)
{
	std::string str;
	str += "[Comment]: ";
	str += text;

	if (h != 0)
	{
		str += "\t[PgSQL_stmt_error]: ";
		str += PQresultErrorMessage(h);

		// FIXME:
		/*
		str += "\t[PgSQL_stmt_errno]: ";
		char buff[30];
		sprintf(buff, "%d", PQresultErrorField(h, fieldCode));
		str += buff;
*/
		str += "\t[PgSQL_stmt_sqlstate]: ";
		str += PQresStatus(PQresultStatus(h));
	}

	if (stmt.length() > 0)
	{
		str += "\t[statemnt]: ";
		str += stmt;
	}

	return str;
}

} } } // namespace Poco::Data::PgSQL
