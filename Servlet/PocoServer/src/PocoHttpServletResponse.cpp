//
// PocoHttpServletResponse.cpp
//
// Library: PocoServer
// Package: PocoServerCore
// Module:  PocoHttpServletResponse
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Servlet/PocoServer/PocoHttpServletResponse.h"
#include "Poco/Servlet/Cookie.h"
#include "Poco/Servlet/PocoServer/CookieAdapter.h"
#include "Poco/Timestamp.h"
#include "Poco/DateTime.h"
#include "Poco/DateTimeFormat.h"
#include "Poco/DateTimeFormatter.h"
#include "Poco/NumberFormatter.h"
#include "Poco/TextEncoding.h"
#include "Poco/URI.h"
#include "Poco/Net/HTTPResponse.h"
#include "Poco/Net/HTTPServerResponse.h"
#include "Poco/Net/HTTPCookie.h"


using Poco::Net::HTTPServerSession;
using Poco::Net::HTTPResponse;
using Poco::Net::HTTPServerResponse;
using Poco::Net::HTTPCookie;


namespace Poco {
namespace Servlet {
namespace PocoServer {


PocoHttpServletResponse::PocoHttpServletResponse(HTTPServerResponse& response, 
	const std::string& enc):
	_response(response), 
	_pOutputStream(0), 
	_pPrintWriter(0), 
	_committed(false)
{
}


PocoHttpServletResponse::~PocoHttpServletResponse()
{
	delete _pOutputStream;
	delete _pPrintWriter;
}


/// ServletResponse overrides

void PocoHttpServletResponse::flushBuffer()
{
	getOutputStream().flush();
}


int PocoHttpServletResponse::getBufferSize()
{
	return ServletStreamBuf::STREAM_BUFFER_SIZE;
}


const std::string PocoHttpServletResponse::getCharacterEncoding() const 
{
	//TODO: has to do w/ poco encoding having names
	/*
	if(_pEncoding) return _pEncoding->getName();
	else return "";
	*/

	return "";
}


std::string PocoHttpServletResponse::getContentType()
{
	return "";
}


std::locale PocoHttpServletResponse::getLocale()
{
	std::locale l; 
	return l;
}


ServletOutputStream& PocoHttpServletResponse::getOutputStream() 
{
	if(!_pOutputStream)
	{
		_pOutputStream = new ServletOutputStream(_response.send());
		poco_check_ptr(_pOutputStream);
		_committed = true;
	}

	return *_pOutputStream;
}


PrintWriter& PocoHttpServletResponse::getWriter() 
{ 
	if(!_pPrintWriter)
		_pPrintWriter = new PrintWriter(getOutputStream());

	if(_pPrintWriter)
		return *_pPrintWriter; 
	else
		throw Poco::NullPointerException("PrintWriter");
}


bool PocoHttpServletResponse::isCommitted()
{
	return _committed;
}


void PocoHttpServletResponse::reset()
{
	//TODO
}


void PocoHttpServletResponse::resetBuffer()
{
	//TODO
}


void PocoHttpServletResponse::setBufferSize(int size)
{
	//TODO
}


void PocoHttpServletResponse::setCharacterEncoding(const std::string& charset)
{
	//TODO
}


void PocoHttpServletResponse::setContentLength(int len)
{
	_response.setContentLength(len);
}


void PocoHttpServletResponse::setContentType(const std::string& type)
{
	_response.setContentType(type);
}


void PocoHttpServletResponse::setLocale(const std::locale& loc)
{
	//TODO
}


/// HttpServletResponse overrides

void PocoHttpServletResponse::addCookie(const Cookie& ck) 
{
	CookieAdapter ca;
	_response.addCookie(ca.cookie(ck));
}


bool PocoHttpServletResponse::containsHeader(const std::string& name) 
{ 
	return _response.has(name);
}


std::string PocoHttpServletResponse::encodeURL(const std::string& url) 
{ 
	//TODO: session tracking encoded in url if cookies are not used
	std::string encoded, dummy;
	URI::encode(url, dummy, encoded);
	return encoded;
}


std::string PocoHttpServletResponse::encodeRedirectURL(const std::string& url) 
{ 
	return encodeURL(url);
}


void PocoHttpServletResponse::sendError(int sc, const std::string& msg) 
{ 
	poco_assert((sc >= HTTPResponse::HTTP_CONTINUE) ||
				(sc <= HTTPResponse::HTTP_VERSION_NOT_SUPPORTED));

	_response.setStatusAndReason(static_cast<HTTPResponse::HTTPStatus>(sc), msg);
	_response.send();
}


void PocoHttpServletResponse::sendError(int sc) 
{ 
	poco_assert((sc >= HTTPResponse::HTTP_CONTINUE) ||
				(sc <= HTTPResponse::HTTP_VERSION_NOT_SUPPORTED));

	_response.setStatus(static_cast<HTTPResponse::HTTPStatus>(sc));
	_response.send();
}


void PocoHttpServletResponse::sendRedirect(const std::string& location) 
{ 
	_response.redirect(location);
}


std::string PocoHttpServletResponse::formatDate(long date)
{
	Timestamp ts(date);
	return DateTimeFormatter::format(DateTime(ts), DateTimeFormat::HTTP_FORMAT);
}


void PocoHttpServletResponse::setDateHeader(const std::string& name, long date) 
{ 
	_response.set(name, formatDate(date));
}


void PocoHttpServletResponse::addDateHeader(const std::string& name, long date) 
{ 
	_response.add(name, formatDate(date));
}


void PocoHttpServletResponse::setHeader(const std::string& name, const std::string& value) 
{ 
	_response.set(name, value);
}


void PocoHttpServletResponse::addHeader(const std::string& name, const std::string& value) 
{ 
	_response.add(name, value);
}


void PocoHttpServletResponse::setIntHeader(const std::string& name, int value) 
{ 
	_response.set(name, NumberFormatter::format(value));
}


void PocoHttpServletResponse::addIntHeader(const std::string& name, int value) 
{ 
	_response.add(name, NumberFormatter::format(value));
}


void PocoHttpServletResponse::setStatus(int sc) 
{ 
	_response.setStatus((HTTPResponse::HTTPStatus) sc);
}


void PocoHttpServletResponse::setStatus(int sc, const std::string& sm) 
{ 
	_response.setStatusAndReason((HTTPResponse::HTTPStatus) sc, sm);
}


} } } // namespace Poco::Servlet::PocoServer
