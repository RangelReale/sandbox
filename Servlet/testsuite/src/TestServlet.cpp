//
// TestServlet.cpp
//
// Library: TestServlet
// Package: TestServlet
// Module:  TestServlet
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "TestServlet.h"
#include "ServletsManifest.h"
#include "Poco/Servlet/Ex/HttpRequestDispatcher.h"
#include "Poco/Timestamp.h"
#include "Poco/Timespan.h"
#include "Poco/DateTimeFormatter.h"
#include "Poco/DateTimeFormat.h"
#include <iomanip>
#include <iostream>
#include <sstream>


using Poco::Servlet::Ex::HttpRequestDispatcher;


namespace Poco {
namespace Servlet {


//TestServlet

TestServlet::TestServlet(): _counter(0), _sessionId("")
{
}


TestServlet::~TestServlet() 
{
}


void TestServlet::doGet(HttpServletRequest& req, HttpServletResponse& resp)
{ 
	std::ostringstream ss("");
	ss << ++_counter << ") TestServlet:" << std::endl;

	std::cout << ss.str() << std::endl;

	log(ss.str());

	log("TestServlet: This is a hello from TestServlet\n");

	ServletOutputStream& out = resp.getOutputStream();

	ss.str("");
	ss << "<html><body>Servlet access count: " << _counter;
	out.println(ss.str());

	if("" == _sessionId)
	{
		const HttpSession* pSession = req.getSession();
		
		if(pSession) _sessionId = pSession->getId();
	}

	out.println("<br> Servlet Name:" + getServletName());
	out.println("<br> Session Id:" + _sessionId);
	out.println("<hr>");

	std::vector<std::string> names = getInitParameterNames();
	std::vector<std::string>::iterator it = names.begin();
	out.println("<ul><b>Servlet Init Parameters:</b><br>");
	for(; it != names.end(); ++it)
	{
		ss.str("");
		ss << "<li><b>" << *it << "</b>: " << getInitParameter(*it) << "<br>";
		out.println(ss.str());
	}
	out.println("</ul>");

	names = req.getParameterNames();
	out.println("<ul><b>Request Parameters:</b><br>");
	it = names.begin();
	for(; it != names.end(); ++it)
	{
		ss.str("");
		ss << "<li><b>" << *it << "</b>:" << req.getParameter(*it) << "<br>";
		out.println(ss.str());
	}
	out.println("</ul>");

  out.println("</body></html>");
}


void TestServlet::doPost(HttpServletRequest& req, HttpServletResponse& resp)
{
	doGet(req, resp);
}


//SingletonTestServlet

SingletonTestServlet::SingletonTestServlet():_counter(0) 
{
}


SingletonTestServlet::~SingletonTestServlet() 
{
}


void SingletonTestServlet::doGet(HttpServletRequest& req, HttpServletResponse& resp)
{ 
	std::ostringstream ss("");
	ss << ++_counter << ") TestServlet:" << std::endl;

	std::cout << ss.str() << std::endl;

	log(ss.str());

	log("TestServlet: This is a hello from SingletonTestServlet\n");

	ServletOutputStream& out = resp.getOutputStream();

	ss.str("");
  ss << "<html><body>Hello world " << _counter;
	out.println(ss.str());

	out.println("<br> Another Hello World");
  out.println("</body></html>");
}


void SingletonTestServlet::doPost(HttpServletRequest& req, HttpServletResponse& resp)
{
	doGet(req, resp);
}


//DefaultTestServlet

DefaultTestServlet::DefaultTestServlet():_counter(0)
{
}


DefaultTestServlet::~DefaultTestServlet()
{
}


void DefaultTestServlet::doGet(HttpServletRequest& req, HttpServletResponse& resp)
{
	std::ostringstream ss("");
	ss << ++_counter << ") TestServlet:" << std::endl;

	log(ss.str());

	log("TestServlet: This is a log entry from DefaultTestServlet\n");

	ServletOutputStream& out = resp.getOutputStream();

	ss.str("");
	std::string sessionId = req.getSession()->getId();

	ss << "<html><body>Hello world #" << _counter
		 << "<br>from servlet [" << this->getServletName() 
		 << "]<br>Session ID: [" << sessionId << ']';
	out.println(ss.str());

	std::vector<std::string> names = getInitParameterNames();
	std::vector<std::string>::iterator it = names.begin();
	out.println("<ul><b>Servlet Init Parameters:</b><br>");
	for(; it != names.end(); ++it)
	{
		ss.str("");
		ss << "<li><b>" << *it << "</b>: " << getInitParameter(*it) << "<br>";
		out.println(ss.str());
	}
	out.println("</ul>");

	names = req.getParameterNames();
	out.println("<ul><b>Request Parameters:</b><br>");
	it = names.begin();
	for(; it != names.end(); ++it)
	{
		ss.str("");
		ss << "<li><b>" << *it << "</b>:" << req.getParameter(*it) << "<br>";
		out.println(ss.str());
	}
	out.println("</ul>");

  out.println("</body></html>");
}


void DefaultTestServlet::doPost(HttpServletRequest& req, HttpServletResponse& resp)
{
	doGet(req, resp);
}


//FormTestServlet

FormTestServlet::FormTestServlet():_counter(0)
{
}


FormTestServlet::~FormTestServlet()
{
}


void FormTestServlet::doGet(HttpServletRequest& req, HttpServletResponse& resp)
{
	ServletOutputStream& ostr = resp.getOutputStream();

	ostr <<
		"<html>\n"
		"<head>\n"
		"<title>POCO Form Server Sample</title>\n"
		"</head>\n"
		"<body>\n"
		"<h1>POCO Form Server Sample</h1>\n"
		"<h2>GET Form</h2>\n"
		"<form method=\"GET\" action=\"/ServletTest/FormTestServlet\">\n"
		"<input type=\"text\" name=\"text\" size=\"31\">\n"
		"<input type=\"submit\" value=\"GET\">\n"
		"</form>\n"
		"<h2>POST Form</h2>\n"
		"<form method=\"POST\" action=\"/ServletTest/FormTestServlet\">\n"
		"<input type=\"text\" name=\"text\" size=\"31\">\n"
		"<input type=\"submit\" value=\"POST\">\n"
		"</form>\n";
		
	ostr << "<h2>Request</h2><p>\n";
	ostr << "Method: " << req.getMethod() << "<br>\n";
	ostr << "URI: " << req.getRequestURI() << "<br>\n";
	
	std::vector<std::string> names = req.getParameterNames();
	std::vector<std::string>::iterator it = names.begin();
	for(; it != names.end(); ++it)
		ostr << *it << ":" << req.getParameter(*it);

	ostr << "</p>";

	ostr << "</body>\n";
}


void FormTestServlet::doPost(HttpServletRequest& req, HttpServletResponse& resp)
{
	doGet(req, resp);
}


//JSPTestServlet

JSPTestServlet::JSPTestServlet():_counter(0)
{
}


JSPTestServlet::~JSPTestServlet()
{
}


void JSPTestServlet::doGet(HttpServletRequest& req, HttpServletResponse& resp)
{
	std::ostringstream ss("");
	ss << ++_counter << ") JSPTestServlet:" << std::endl;

	log(ss.str());

	log("TestServlet: This is a log entry from JSPTestServlet\n");

	ServletOutputStream& out = resp.getOutputStream();

	ss.str("");
	ss << "<html><body>Hello world from JSPTestServlet " << _counter;
	out.println(ss.str());

	out << "<br> JSP functionality is in TO BE DONE status." << std::endl;
	out.print("</body></html>");
}


void JSPTestServlet::doPost(HttpServletRequest& req, HttpServletResponse& resp)
{
	doGet(req, resp);
}


//ForwardTestServlet

ForwardTestServlet::ForwardTestServlet()
{
}


ForwardTestServlet::~ForwardTestServlet()
{
}


void ForwardTestServlet::doGet(HttpServletRequest& req, HttpServletResponse& resp)
{
	HttpRequestDispatcher& rd = 
		static_cast<HttpRequestDispatcher&>(req.getRequestDispatcher("/ServletTest/ForwardedTestServlet"));
	rd.forward(req, resp);
}


//ForwardedTestServlet

ForwardedTestServlet::ForwardedTestServlet()
{
}


ForwardedTestServlet::~ForwardedTestServlet()
{
}


void ForwardedTestServlet::doGet(HttpServletRequest& req, HttpServletResponse& resp)
{
	ServletOutputStream& os = resp.getOutputStream();
	os << "<html><body>Forwarded Servlet.</body></html>";
}


//IncludeTestServlet

IncludeTestServlet::IncludeTestServlet()
{
}


IncludeTestServlet::~IncludeTestServlet()
{
}


void IncludeTestServlet::doGet(HttpServletRequest& req, HttpServletResponse& resp)
{
	ServletOutputStream& os = resp.getOutputStream();
	os << "<html><body>Include Servlet BEGIN >>";
	HttpRequestDispatcher* prd = 
		dynamic_cast<HttpRequestDispatcher*>(&req.getRequestDispatcher("/ServletTest/IncludedTestServlet"));
	poco_check_ptr(prd);
	prd->include(req, resp);
	os << "<< Include Servlet END</body></html>";
}


//IncludedTestServlet

IncludedTestServlet::IncludedTestServlet()
{
}


IncludedTestServlet::~IncludedTestServlet()
{
}


void IncludedTestServlet::doGet(HttpServletRequest& req, HttpServletResponse& resp)
{
	resp.getOutputStream() << "<br><b>Included Servlet</b><br>";
}


//RefreshTestServlet

RefreshTestServlet::RefreshTestServlet(): _hitCounter(0)
{
}


RefreshTestServlet::~RefreshTestServlet()
{
}


void RefreshTestServlet::doGet(HttpServletRequest& req, HttpServletResponse& resp)
{
	Timestamp now;
	std::string dt(DateTimeFormatter::format(now, DateTimeFormat::SORTABLE_FORMAT));
	Timespan ts(_started.elapsed());

	resp.setHeader("Transfer-Encoding", "chunked");
	resp.setContentType("text/html");

	resp.getOutputStream() 
		<< "<html><head><title>Poco Servlet Engine Test</title>"
		<< "<meta http-equiv=\"refresh\" content=\"1\"></head>"
		<< "<body>"
		<< "<p style=\"text-align: center; font-size: 48px;\">Current UTC time: "
		<< dt
		<< "</p>"
		<< "<p style=\"text-align: center; font-size: 48px;\">Elapsed: "
		<< std::setw(2) << std::setfill('0') << ts.hours() << ':' 
		<< std::setw(2) << std::setfill('0') << ts.minutes() << ':' 
		<< std::setw(2) << std::setfill('0') << ts.seconds()
		<< "</p>"
		<< "<p style=\"text-align: center; font-size: 48px;\">Hit Count: "
		<< ++_hitCounter
		<< "</p>"
		<< "</body></html>";
}


} } // namespace Poco::Servlet
