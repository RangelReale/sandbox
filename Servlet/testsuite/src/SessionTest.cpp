//
// SessionTest.cpp
//
// Library: TestSuite
// Package: Container
// Module:  SessionTest
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "SessionTest.h"
#include "Poco/Servlet/Container/HttpSessionImpl.h"
#include "Poco/Servlet/Container/SessionManagerImpl.h"
#include "Poco/Thread.h"
#include "CppUnit/TestCaller.h"
#include "CppUnit/TestSuite.h"
#include <ctime>


using Poco::Thread;
using Poco::Servlet::HttpSession;
using Poco::Servlet::HttpSessionEvent;
using Poco::Servlet::HttpSessionListener;
using Poco::Servlet::Container::HttpSessionImpl;
using Poco::Servlet::Container::SessionManagerImpl;


class TestHttpSessionListener : public HttpSessionListener
{
public:
	TestHttpSessionListener():_created(0), _destroyed(0)
	{
	}

	void sessionCreated (const HttpSessionEvent& se )
	{
		++ _created;
	}

	void sessionDestroyed (const HttpSessionEvent& se )
	{
		++_destroyed;
	}

	int createdCount()
	{
		return _created;
	}

	int destroyedCount()
	{
		return _destroyed;
	}

private:
	int _created;
	int _destroyed;
};

SessionTest::SessionTest(const std::string& name): CppUnit::TestCase(name)
{
}


SessionTest::~SessionTest()
{
}

void SessionTest::testHttpSessionImpl()
{
	time_t t = time(0);
	Thread::sleep(1000);
	HttpSessionImpl hsi;//no session expiration
	assert(hsi.getCreationTime() > t);
	assert(-1 == hsi.getMaxInactiveInterval());
	assert(hsi.isNew());
	assert(hsi.isValidNS());
	hsi.setLastAccessedTimeNS();
	assert(!hsi.isNew());
	t = time(0);
	hsi.setLastAccessedTimeNS(t);
	assert(t == hsi.getLastAccessedTime());
	hsi.setMaxInactiveInterval(1);//set session expiration
	Thread::sleep(1050);
	assert(!hsi.isValidNS());
	
	t = time(0);
	hsi.setLastAccessedTimeNS(t);//must silently reject
	assert(t != hsi.getLastAccessedTime());

	HttpSessionImpl hsi1(1);//session expiration
	assert(hsi1.isNew());
	assert(hsi1.isValidNS());
	Thread::sleep(1050);
	assert(!hsi1.isValidNS());
}

void SessionTest::testSessionManager()
{
	TestHttpSessionListener hsl;
	SessionManagerImpl sm(-1, &hsl, 512, 1);//no session expiration, purge every second
	const HttpSession& s1 = sm.makeSession();//never expires
	assert(s1.isNew());
	const HttpSession& s2 = sm.session(s1.getId());
	assert(!s1.isNew());
	assert(&s1 == &s2);
	assert(1 == sm.sessionCount());
	
	assert(sm.sessionCount() == hsl.createdCount());

	for(int i = 1; i <= 10; ++i)
		sm.makeSession();

	assert(11 == sm.sessionCount());
	assert(sm.sessionCount() == hsl.createdCount());
	assert(0 == hsl.destroyedCount());

	//kill the first session
	assert(sm.destroySession(s1.getId()));
	assert(10 == sm.sessionCount());
	assert(sm.sessionCount() == hsl.createdCount() - 1);

	TestHttpSessionListener hsl1;
	SessionManagerImpl sm1(1, &hsl1, 512, 1);//1 s expiration, purge every second
	for(int j = 1; j <= 10; ++j)
		sm1.makeSession();

	assert(10 == sm.sessionCount());
	assert(0 == hsl1.destroyedCount());

	Thread::sleep(3000);
	//all sessions must be gone
	assert(0 == sm1.sessionCount());
	assert(10 == hsl1.destroyedCount());
}

void SessionTest::setUp()
{
}


void SessionTest::tearDown()
{
}


CppUnit::Test* SessionTest::suite()
{
	CppUnit::TestSuite* pSuite = new CppUnit::TestSuite("SessionTest");

	CppUnit_addTest(pSuite, SessionTest, testHttpSessionImpl);
	CppUnit_addTest(pSuite, SessionTest, testSessionManager);
  
	return pSuite;
}

