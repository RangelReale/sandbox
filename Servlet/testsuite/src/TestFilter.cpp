//
// TestFilter.cpp
//
// Library: TestFilter
// Package: TestFilter
// Module:  TestFilter
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "TestFilter.h"
#include "FiltersManifest.h"


namespace Poco {
namespace Servlet {


FilteredRequest::FilteredRequest(HttpServletRequest& request):
	HttpServletRequestWrapper(request), 
	_servletInputStream(_istream),
	_reader(_servletInputStream)
{
}


ServletInputStream& FilteredRequest::getInputStream()
{
	return _servletInputStream;
}


const BufferedReader& FilteredRequest::getReader() const
{
	return _reader;
}


FilteredResponse::FilteredResponse(HttpServletResponse& response):
	HttpServletResponseWrapper(response), 
	_servletOutputStream(_ostream),
	_writer(_servletOutputStream)
{
}


ServletOutputStream& FilteredResponse::getOutputStream()
{
	return _servletOutputStream;
}


PrintWriter& FilteredResponse::getWriter()
{
	return _writer;
}


const std::string FilteredResponse::toString()
{
	return _ostream.str();
}


//TestFilter
TestFilter::TestFilter()
{
}


TestFilter::~TestFilter()
{
}


void TestFilter::init(const FilterConfig& filterConfig)
{
}


void TestFilter::doFilter(ServletRequest& request, ServletResponse& response, const FilterChain* pchain) const
{
	ServletOutputStream& out = response.getOutputStream();
	out.print("filter begin=> ");

	HttpServletResponse* pResponse = dynamic_cast<HttpServletResponse *>(&response);
	if(!pResponse)	throw ServletException("non-HTTP response");

	FilteredResponse fResponse(*pResponse);

	ServletOutputStream& fout =  pResponse->getOutputStream();
	fout << " [inside the filter] ";
	if(pchain) pchain->doFilter(request, fResponse);

	out.print(fResponse.toString());
	out.print(" <=filter end");
}


void TestFilter::destroy()
{
}


} } // namespace Poco::Servlet
