//
// Dispatcher.cpp
//
//
// Library: ServletEx
// Package: Servlet
// Module:  Dispatcher
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Servlet/Ex/Dispatcher.h"
#include "Poco/Servlet/Ex/ServletProvider.h"
#include "Poco/Servlet/Ex/PathMapping.h"
#include "Poco/Servlet/Servlet.h"
#include "Poco/Servlet/ServletContext.h"
#include "Poco/Servlet/ServletRequest.h"
#include "Poco/Servlet/ServletResponse.h"
#include "Poco/Path.h"
#include "Poco/Exception.h"


namespace Poco {
namespace Servlet {
namespace Ex {


const char Dispatcher::PATH_SEPARATOR = '/';


Dispatcher::Dispatcher()
{
}


Dispatcher::~Dispatcher()
{
}


std::string Dispatcher::getRegisteredName(const std::string& contextName) const
{
	std::string name = removeSeparators(contextName);
	if(!isRegistered(name)) return "";
	return name;
}


std::string Dispatcher::removeSeparators(const std::string& name) const
{
	std::string n(name);
	std::string::size_type pos;
	while((pos = n.find('/')) != n.npos) n.erase(pos, 1);
	return n;
}


void Dispatcher::registerContext(const std::string& name, ServletContext* pApp)
{
	poco_check_ptr(pApp);
	_contextMap.insert(std::make_pair(removeSeparators(name), pApp));
}


void Dispatcher::unregisterContext(const std::string& name)
{
	_contextMap.erase(removeSeparators(name));
}


bool Dispatcher::isRegistered(const std::string& name) const
{
	ContextMap::const_iterator it = _contextMap.find(removeSeparators(name));

	return it != _contextMap.end();
}


std::string Dispatcher::defaultEntity(const std::string& contextName) const
{
	std::string name = getRegisteredName(contextName);
	
	ContextMappingMap::const_iterator it = _mapping.find(name);
	if(it == _mapping.end()) return "";

	PathMapping* pmm = it->second;
	if(pmm) return pmm->resolveName("/");

	return "";
}


void Dispatcher::addMapping(const std::string& contextName, const PathMapping& mapping)
{
	std::string name = getRegisteredName(contextName);

	if("" != name)
	{
		ContextMappingMap::iterator it = _mapping.find(name);
		if(it != _mapping.end()) delete it->second;

		_mapping[name] = new PathMapping(mapping);
	}
	else
		throw InvalidArgumentException("Unknown context name:" + contextName);
}


std::string Dispatcher::resolve(const std::string& contextName, const std::string& path) const
{
	std::string name = getRegisteredName(contextName);

	if("" != name)
	{
		ContextMappingMap::const_iterator it = _mapping.find(name);
		if((it != _mapping.end()) && it->second) return it->second->resolveName(path);
	}

	return "";
}


std::string Dispatcher::getDefaultServlet(const std::string& contextName, const std::string& path) const
{
	std::string name = getRegisteredName(contextName);

	if("" != name)
	{
		ContextMappingMap::const_iterator it = _mapping.find(name);
		if((it != _mapping.end()) && it->second) return it->second->getDefaultServlet(path);
	}

	return "";
}


} } } // namespace Poco::Servlet::Ex
