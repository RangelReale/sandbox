//
// HttpServerConfig.cpp
//
//
// Library: ServletEx
// Package: Http
// Module:  HttpServerConfig
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Servlet/Ex/HttpServerConfig.h"


namespace Poco {
namespace Servlet {
namespace Ex {


HttpServerConfig::HttpServerConfig()
{
}


HttpServerConfig::HttpServerConfig(const std::string& name,
	const std::vector<std::string>& interfaces,
	const HttpServerConfig::AliasMap* pAliases,
	const std::string& globalDir):
	GenericServerConfig(name), 
	_globalDir(globalDir)
{
	_interfaces.assign(interfaces.begin(), interfaces.end());
	if (pAliases)
		_aliases.insert(pAliases->begin(), pAliases->end());
}


HttpServerConfig::HttpServerConfig(const HttpServerConfig& config):
	GenericServerConfig(config.getName()), 
	_globalDir(config.getGlobalDir())
{
	_interfaces.assign(config._interfaces.begin(), config._interfaces.end());
	_aliases.insert(config._aliases.begin(), config._aliases.end());
}


HttpServerConfig& HttpServerConfig::operator=(const HttpServerConfig& other)
{
	if(&other != this)
	{
		setName(other.getName());
		_interfaces.assign(other._interfaces.begin(), other._interfaces.end());
		_aliases.insert(other._aliases.begin(), other._aliases.end());
		setGlobalDir(other.getGlobalDir());
	}

	return *this;
}


const std::string& HttpServerConfig::getGlobalDir() const
{
	return _globalDir;
}


void HttpServerConfig::setGlobalDir(const std::string& globalDir)
{
	_globalDir = globalDir;
}


} } } // namespace Poco::Servlet::Ex
