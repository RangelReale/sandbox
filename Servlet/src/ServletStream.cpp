//
// ServletStream.cpp
//
//
// Library: Servlet
// Package: Servlet
// Module:  ServletStream
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// The code in this file is derived from Apache Tomcat project
// Copyright (c) 2004 The Apache Software Foundation.
// http://www.apache.org/licenses/LICENSE-2.0
// 


#include "Poco/Servlet/ServletStream.h"
#include "Poco/BufferedStreamBuf.h"


using Poco::BufferedStreamBuf;


namespace Poco {
namespace Servlet {


const int ServletStreamBuf::STREAM_BUFFER_SIZE  = 1024;


ServletStreamBuf::ServletStreamBuf(std::istream& istr): 
	BufferedStreamBuf(STREAM_BUFFER_SIZE, std::ios::in),
	_pIstr(&istr),
	_pOstr(0)
{
}


ServletStreamBuf::ServletStreamBuf(std::ostream& ostr): 
	BufferedStreamBuf(STREAM_BUFFER_SIZE, std::ios::out),
	_pIstr(0),
	_pOstr(&ostr)
{
}


ServletStreamBuf::~ServletStreamBuf()
{
	close();
}

	
int ServletStreamBuf::readFromDevice(char* buffer, std::streamsize length)
{
	if (!_pIstr || (length <= 0)) return 0;
  
	int n = -1;

	if (_pIstr->good())
	{
		_pIstr->get(buffer, length);
		n = _pIstr->gcount();
	}

	return n;
}


int ServletStreamBuf::writeToDevice(const char* buffer, std::streamsize length)
{
	if (!_pOstr || (length <= 0)) return 0;
  
	if (_pOstr) 
		_pOstr->write(buffer, length);

	return length;
}


int ServletStreamBuf::readLine(char* b, int off, int len)
{
	if (!_pIstr || (len <= 0)) return 0;

	if (_pIstr->good()) 
	{
		_pIstr->seekg(off, std::ios_base::beg);
		_pIstr->getline(b, len);
	}

	return _pIstr->gcount();
}


void ServletStreamBuf::close()
{
	sync();
	if (_pOstr) _pOstr->flush();
}


ServletIOS::ServletIOS(std::istream& istr):
	_buf(istr)
{
	poco_ios_init(&_buf);
}


ServletIOS::ServletIOS(std::ostream& ostr):
	_buf(ostr)
{
	poco_ios_init(&_buf);
}


ServletIOS::~ServletIOS()
{
}


} } // namespace Poco::Servlet
