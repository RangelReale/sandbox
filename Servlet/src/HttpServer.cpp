//
// HttpServer.cpp
//
//
// Library: ServletEx
// Package: Http
// Module:  HttpServer
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Servlet/Ex/HttpServer.h"
#include "Poco/Logger.h"


using Poco::Logger;


namespace Poco {
namespace Servlet {
namespace Ex {


HttpServer::HttpServer():
	_pConfig(0), 
	_pDispatcher(0), 
	_stop(false), 
	_running(false)
{
}


HttpServer::HttpServer(const HttpServerConfig& config, HttpServletDispatcher& dispatcher, Logger* pLogger):
	GenericServer(pLogger),
	_pConfig(new HttpServerConfig(config)), 
	_pDispatcher(&dispatcher),
	_stop(false), 
	_running(false)
{
}


HttpServer::~HttpServer()
{
	delete _pConfig;
}


void HttpServer::init(const HttpServerConfig& config, HttpServletDispatcher& dispatcher, Logger* pLogger)
{
	delete _pConfig;
	_pConfig = new HttpServerConfig(config);
	_pDispatcher = &dispatcher;
	GenericServer::init(pLogger);
}
	

void HttpServer::destroy() 
{
}


void HttpServer::stop()
{
	destroy();
	_stop = true;
}


void HttpServer::setName(const std::string& name)
{
	poco_check_ptr(_pConfig);
	_pConfig->setName(name);
}


void HttpServer::setGlobalDir(const std::string& globalDir)
{
	poco_check_ptr(_pConfig);
	_pConfig->setGlobalDir(globalDir);
}


std::string HttpServer::getName()
{
	poco_check_ptr(_pConfig);
	return _pConfig->getName();
}


const std::vector<std::string>& HttpServer::interfaces()
{
	poco_check_ptr(_pConfig);
	return _pConfig->interfaces();
}


std::string HttpServer::getGlobalDir()
{
	poco_check_ptr(_pConfig);
	return _pConfig->getGlobalDir();
}


} } } // namespace Poco::Servlet::Ex
