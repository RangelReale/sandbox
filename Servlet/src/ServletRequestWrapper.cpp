//
// ServletRequestWrapper.cpp
//
//
// Library: Servlet
// Package: Servlet
// Module:  ServletRequestWrapper
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// The code in this file is derived from Apache Tomcat project
// Copyright (c) 2004 The Apache Software Foundation.
// http://www.apache.org/licenses/LICENSE-2.0
// 


#include "Poco/Servlet/ServletRequestWrapper.h"


namespace Poco {
namespace Servlet {


ServletRequestWrapper::ServletRequestWrapper(ServletRequest& request):
	_request(request)
{
}


ServletRequestWrapper::~ServletRequestWrapper()
{
}


const ServletRequest* ServletRequestWrapper::getRequest() const
{
	return &_request;
}


void ServletRequestWrapper::setRequest(const ServletRequest& request) 
{
    _request = request;
}


const Object* ServletRequestWrapper::getAttribute(const std::string& name) const 
{
	return _request.getAttribute(name);
}


std::vector<std::string> ServletRequestWrapper::getAttributeNames() const
{
	return _request.getAttributeNames();
}    


std::string ServletRequestWrapper::getCharacterEncoding() const
{
	return _request.getCharacterEncoding();
}


void ServletRequestWrapper::setCharacterEncoding(const std::string& enc)
{
	_request.setCharacterEncoding(enc);
}


int ServletRequestWrapper::getContentLength() const
{
	return _request.getContentLength();
}


std::string ServletRequestWrapper::getContentType() const
{
	return _request.getContentType();
}


ServletInputStream& ServletRequestWrapper::getInputStream()
{
	return _request.getInputStream();
}


std::string ServletRequestWrapper::getParameter(const std::string& name) const 
{
	return _request.getParameter(name);
}


ServletRequest::Parameters ServletRequestWrapper::getParameterMap() const 
{
	return _request.getParameterMap();
}


std::vector<std::string> ServletRequestWrapper::getParameterNames() const
{
	return _request.getParameterNames();
}


std::vector<std::string> ServletRequestWrapper::getParameterValues(const std::string& name) const
{
	return _request.getParameterValues(name);
}


std::string ServletRequestWrapper::getProtocol() const
{
	return _request.getProtocol();
}


std::string ServletRequestWrapper::getScheme() const
{
	return _request.getScheme();
}


std::string ServletRequestWrapper::getServerName() const
{
	return _request.getServerName();
}


int ServletRequestWrapper::getServerPort() const 
{
	return _request.getServerPort();
}


const BufferedReader& ServletRequestWrapper::getReader() const
{
	return _request.getReader();
}


std::string ServletRequestWrapper::getRemoteAddr() const
{
	return _request.getRemoteAddr();
}


std::string ServletRequestWrapper::getRemoteHost() const
{
	return _request.getRemoteHost();
}


void ServletRequestWrapper::setAttribute(const std::string& name, Object* a) 
{
	_request.setAttribute(name, a);
}


void ServletRequestWrapper::removeAttribute(const std::string& name) 
{
	_request.removeAttribute(name);
}


std::locale ServletRequestWrapper::getLocale() const 
{
	return _request.getLocale();
}


const std::vector<std::locale>& ServletRequestWrapper::getLocales() const
{
	return _request.getLocales();
}


bool ServletRequestWrapper::isSecure() const 
{
	return _request.isSecure();
}


RequestDispatcher& ServletRequestWrapper::getRequestDispatcher(const std::string& path) 
{
	return _request.getRequestDispatcher(path);
}


std::string ServletRequestWrapper::getRealPath(const std::string& path) const
{
	return _request.getRealPath(path);
}


int ServletRequestWrapper::getRemotePort() const
{
  return _request.getRemotePort();
}


std::string ServletRequestWrapper::getLocalName() const
{
  return _request.getLocalName();
}


std::string ServletRequestWrapper::getLocalAddr() const
{
  return _request.getLocalAddr();
}


int ServletRequestWrapper::getLocalPort() const
{
  return _request.getLocalPort();
}


} } // namespace Poco::Servlet
