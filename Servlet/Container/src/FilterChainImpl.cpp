//
// FilterChainImpl.cpp
//
// Library: Container
// Package: ContainerCore
// Module:  FilterChainImpl
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Servlet/Container/FilterChainImpl.h"
#include "Poco/Servlet/Servlet.h"
#include "Poco/Servlet/ServletRequest.h"
#include "Poco/Servlet/ServletResponse.h"
#include "Poco/Mutex.h"
#include "Poco/Exception.h"


namespace Poco {
namespace Servlet {
namespace Container {


FilterChainImpl::FilterChainImpl(const Servlet* pServlet):
_pServlet(pServlet), _currentFilter(0)
{
}


FilterChainImpl::FilterChainImpl(const Filter* pFilter):
_pServlet(0), _currentFilter(0)
{
	appendFilter(pFilter);
}


const Filter* FilterChainImpl::appendFilter(const Filter* pFilter)
{
	Mutex::ScopedLock l(_mutex);

	//reject duplicates
	FilterVec::const_iterator it = _filters.begin();
	for(; it != _filters.end(); ++it)
		if (*it == pFilter) return pFilter;

	_filters.push_back(pFilter);
	return pFilter;
}


const bool FilterChainImpl::removeFilter(const Filter* pFilter)
{
	Mutex::ScopedLock l(_mutex);

	FilterVec::iterator it = _filters.begin();
	for(; it != _filters.end(); ++it)
	{
		if (*it == pFilter) 
		{
			_filters.erase(it);
			return true;
		}
	}

	return false;
}


const Servlet* FilterChainImpl::setServlet(const Servlet* pServlet)
{
	return _pServlet = pServlet;
}


void FilterChainImpl::doFilter(ServletRequest& request, ServletResponse& response) const
{
	if(0 == _currentFilter) _mutex.lock();

	if(_currentFilter < _filters.size())
	{
		const Filter* filter = _filters[_currentFilter++];
		filter->doFilter(request, response, this);
	}
	else
	{
		try
		{
			if(_pServlet) 
				const_cast<Servlet*>(_pServlet)->service(request, response);
		}
		catch(ServletException& ex)
		{
			response.getOutputStream() << ex.getRootCause();
		}
		
		_mutex.unlock();
		_currentFilter = 0;
	}
}


} } } // namespace Poco::Servlet::Container'
