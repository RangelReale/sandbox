//
// ServletDispatcher.cpp
//
//
// Library: ServletEx
// Package: Servlet
// Module:  ServletDispatcher
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Servlet/Ex/ServletDispatcher.h"
#include "Poco/Servlet/Ex/ServletProvider.h"
#include "Poco/Servlet/Ex/PathMapping.h"
#include "Poco/Servlet/Servlet.h"
#include "Poco/Servlet/ServletContext.h"
#include "Poco/Servlet/ServletRequest.h"
#include "Poco/Servlet/ServletResponse.h"
#include "Poco/Path.h"
#include "Poco/Exception.h"


namespace Poco {
namespace Servlet {
namespace Ex {


ServletDispatcher::ServletDispatcher(SessionManager* pSessionManager):
	_pSessionManager(pSessionManager)
{
}


ServletDispatcher::~ServletDispatcher()
{
	ContextMappingMap::iterator it = _mapping.begin();
	for(; it != _mapping.end(); ++it) delete it->second;
}


std::string ServletDispatcher::contextName(const std::string& path)
{
	std::string p = path;
	return PathMapping::splitPath(p);
}


ServletContext* ServletDispatcher::getContext(const std::string& name)
{
	ContextMap::iterator it = _contextMap.find(removeSeparators(name));

	if(_contextMap.end() != it)	return it->second;

	return 0;
}


void ServletDispatcher::dispatch(ServletRequest& request,
	ServletResponse& response, 
	const std::string& path)
{
	std::string servletPath = path;
	std::string ctxName = PathMapping::splitPath(servletPath);
	std::string servletName = resolve(ctxName, servletPath);

	Servlet* ps = getServlet(ctxName, servletPath);
	ps->service(request, response);
}


Servlet* ServletDispatcher::getServlet(const std::string& ctxName, const std::string& servletName)
{
	const ServletProvider* pServletProvider = getServletProvider(Dispatcher::removeSeparators(ctxName));
	poco_check_ptr(pServletProvider);
	return pServletProvider->getServlet(servletName);
}


const ServletProvider* ServletDispatcher::getServletProvider(const std::string& name) const
{
	ServletProviderMap::const_iterator it = _servletProviderMap.find(name);
	if(it != _servletProviderMap.end()) return it->second;
	return 0;
}


void ServletDispatcher::addServletProvider(ServletProvider* pServletProvider)
{
	_servletProviderMap[pServletProvider->name()] = pServletProvider;
}


} } } // namespace Poco::Servlet::Ex
