//
// Cookie.h
//
//
// Library: Servlet
// Package: Http
// Module:  Cookie
//
// Definition of the Cookie class.
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
//
// The code in this file is derived from Apache Tomcat project
// Copyright (c) 2004 The Apache Software Foundation.
// http://www.apache.org/licenses/LICENSE-2.0
// 


#ifndef Servlet_Cookie_INCLUDED
#define Servlet_Cookie_INCLUDED


#include "Poco/Servlet/ServletException.h"
#include "Poco/Servlet/ServletBase.h"
#include "Poco/String.h"
#include <string>


using Poco::toLower;


namespace Poco {
namespace Servlet {


class Servlet_API Cookie  
	/// Creates a cookie, a small amount of information sent by a servlet to a Web
	/// browser, saved by the browser, and later sent back to the server. A cookie’s value
	/// can uniquely identify a client, so cookies are commonly used for session management.
	/// A cookie has a name, a single value, and optional attributes such as a comment,
	/// path and domain qualifiers, a maximum age, and a version number. Some Web
	/// browsers have bugs in how they handle the optional attributes, so use them sparingly
	/// to improve the interoperability of your servlets.
	/// The servlet sends cookies to the browser by using the
	/// HttpServletResponse.addCookie(Cookie) method, which adds fields to
	/// HTTP response headers to send cookies to the browser, one at a time.
	/// The browser returns cookies to the servlet by adding fields to HTTP request headers.
	/// Cookies can be retrieved from a request by using the
	/// HttpServletRequest.getCookies() method. Several cookies might have the
	/// same name but different path attributes.
{
public:
	Cookie(const std::string& name, const std::string& value);
		/// Constructs a cookie with a specified name and value.
		/// The name must conform to RFC 2109. That means it can contain only ASCII
		/// alphanumeric characters and cannot contain commas, semicolons, or white
		/// space or begin with a $ character. The cookie’s name cannot be changed after
		/// creation.
		/// The value can be anything the server chooses to send. Its value is probably of
		/// interest only to the server. The cookie’s value can be changed after creation
		/// with the setValue method.
		/// By default, cookies are created according to the Netscape cookie specification.
		/// The version can be changed with the setVersion method.

	void setComment(const std::string& purpose);
		/// Specifies a comment that describes a cookie's purpose.
		/// The comment is useful if the browser presents the cookie 
		/// to the user. 
		/// Comments are not supported by Netscape Version 0 cookies.

	std::string getComment() const;
		/// Returns the comment describing the purpose of this cookie, or null if the
		/// cookie has no comment.

	void setDomain(const std::string& pattern);
		/// Specifies the domain within which this cookie should be presented.
		/// The form of the domain name is specified by RFC 2109. A domain
		/// name begins with a dot (.foo.com) and means that
		/// the cookie is visible to servers in a specified Domain Name System
		/// (DNS) zone (for example, www.foo.com, but not 
		/// a.b.foo.com). By default, cookies are only returned
		/// to the server that sent them.
    
	std::string getDomain() const;
		/// Returns the domain name set for this cookie. The form of 
	    /// the domain name is set by RFC 2109.

	void setMaxAge(int expiry);
		/// Sets the maximum age of the cookie in seconds.
		/// A positive value indicates that the cookie will expire
		/// after that many seconds have passed. Note that the value is
		/// the maximum age when the cookie will expire, not the cookie's
		/// current age.
		/// A negative value means that the cookie is not stored persistently 
		/// and will be deleted when the Web browser exits. 
		/// A zero value causes the cookie to be deleted.

	int getMaxAge() const;
		/// Returns the maximum age of the cookie, specified in seconds,
		/// By default, -1 indicating the cookie will persist
		/// until browser shutdown.

	void setPath(const std::string& uri);
		/// Specifies a path for the cookie
		/// to which the client should return the cookie.
		/// The cookie is visible to all the pages in the directory
		/// you specify, and all the pages in that directory's subdirectories. 
		/// A cookie's path must include the servlet that set the cookie,
		/// for example, /catalog, which makes the cookie
		/// visible to all directories on the server under /catalog.
		/// Consult RFC 2109 (available on the Internet) for more
		/// information on setting path names for cookies.

	std::string getPath() const;
		/// Returns the path on the server 
		/// to which the browser returns this cookie. The
		/// cookie is visible to all subpaths on the server.
 
	void setSecure(bool flag);
		/// Indicates to the browser whether the cookie should only be sent
		/// using a secure protocol, such as HTTPS or SSL.
		/// The default value is false.

	bool getSecure() const;
		 /// Returns true if the browser is sending cookies
		 /// only over a secure protocol, or false if the
		 /// browser can send cookies using any protocol.

	void setName(const std::string& name);

	std::string getName() const;
		 /// Returns the name of the cookie. The name cannot be changed after
	     /// creation.

	void setValue(const std::string& newValue);
		///  Assigns a new value to a cookie after the cookie is created.
		/// If you use a binary value, you may want to use BASE64 encoding.
		/// With Version 0 cookies, values should not contain white 
		/// space, brackets, parentheses, equals signs, commas,
		/// double quotes, slashes, question marks, at signs, colons,
		/// and semicolons. Empty values may not behave the same way
		/// on all browsers.

	std::string getValue() const;
		/// Returns the value of the cookie.

	int getVersion() const;
		/// Returns the version of the protocol this cookie complies 
		/// with. Version 1 complies with RFC 2109, 
		/// and version 0 complies with the original
		/// cookie specification drafted by Netscape. Cookies provided
		/// by a browser use and identify the browser's cookie version.

   void setVersion(int v);
		/// Sets the version of the cookie protocol this cookie complies
		/// with. Version 0 complies with the original Netscape cookie
		/// specification. Version 1 complies with RFC 2109.
		/// Since RFC 2109 is still somewhat new, consider
		/// version 1 as experimental; do not use it yet on production sites.

private:
	static const std::string tspecials;

	std::string _name;	
		/// NAME= ... "$Name" style is reserved
	
	std::string _value;	
		/// value of NAME

	std::string _comment;	
		/// ;Comment=VALUE ... describes cookie's use
		/// ;Discard ... implied by maxAge < 0

	std::string _domain;	
		/// ;Domain=VALUE ... domain that sees cookie

	int _maxAge;	
		/// ;Max-Age=VALUE ... cookies auto-expire

	std::string _path;	
		/// ;Path=VALUE ... URLs that see the cookie

	bool _secure;	
		/// ;Secure ... e.g. use SSL

	int _version;	
		/// ;Version=1 ... means RFC 2109++ style
};


///
/// inlines
///


inline void Cookie::setComment(const std::string& purpose)
{
		_comment = purpose;
}


inline std::string Cookie::getComment() const
{
	return _comment;
}


inline void Cookie::setDomain(const std::string& pattern) 
{
	_domain = toLower(pattern);	// IE allegedly needs this
}


inline std::string Cookie::getDomain() const
{
	return _domain;
}


inline void Cookie::setMaxAge(int expiry) 
{
	_maxAge = expiry;
}


inline int Cookie::getMaxAge() const
{
	return _maxAge;
}


inline void Cookie::setPath(const std::string& uri) 
{
	_path = uri;
}


inline std::string Cookie::getPath() const
{
	return _path;
}


inline void Cookie::setSecure(bool flag) 
{
	_secure = flag;
}


inline bool Cookie::getSecure() const
{
	return _secure;
}


inline void Cookie::setName(const std::string& name)
{
	_name = name;
}


inline std::string Cookie::getName() const
{
	return _name;
}


inline void Cookie::setValue(const std::string& newValue) 
{
	_value = newValue;
}


inline std::string Cookie::getValue() const
{
	return _value;
}


inline int Cookie::getVersion() const 
{
	return _version;
}


inline void Cookie::setVersion(int v) 
{
	_version = v;
}


} } // namespace Poco::Servlet


#endif // Servlet_Cookie_INCLUDED
