//
// GenericServlet.h
//
//
// Library: Servlet
// Package: Servlet
// Module:  GenericServlet
//
// Definition of the GenericServlet class.
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
//
// The code in this file is derived from Apache Tomcat project
// Copyright (c) 2004 The Apache Software Foundation.
// http://www.apache.org/licenses/LICENSE-2.0
// 


#ifndef Servlet_GenericServlet_INCLUDED
#define Servlet_GenericServlet_INCLUDED


#include "Servlet.h"
#include "ServletConfig.h"
#include "ServletContext.h"
#include "ServletException.h"
#include "Poco/Servlet/ServletBase.h"


namespace Poco {
namespace Servlet {


class Servlet_API GenericServlet : public Servlet, public ServletConfig
{
public:
	GenericServlet();
		///Creates GenericServlet.

	virtual ~GenericServlet();
		///Destroys GenericServlet.

	virtual void destroy();
		///Called by the servlet container to indicate to a servlet that the servlet is being
		///taken out of service.

	const std::string& getInitParameter(const std::string& name) const;
		///Returns a String containing the value of the named initialization parameter,
		///or empty string if the parameter does not exist.
		///It gets the value of the named parameter from the servlet’s ServletConfig object
	
	std::vector<std::string> getInitParameterNames() const;
		///Returns the names of the servlet’s initialization parameters as an
		///vector of string objects, or an empty vector if the servlet has
		///no initialization parameters.
		///It gets the parameter names from the servlet’s ServletConfig object.

	const ServletConfig& getServletConfig() const;
		///Returns this servlet’s ServletConfig object.
  
	const ServletContext& getServletContext() const;
		///Returns a reference to the ServletContext in which this servlet is running.
		///It gets the context from the servlet’s ServletConfig object.

	std::string getServletInfo() const;
		///Returns information about the servlet, such as author, version, and copyright.
		///By default, this method returns an empty string. Override this method to have
		///it return a meaningful value.

	virtual const std::string& getServletName() const;
		///Returns the name of this servlet instance.

	virtual void init();
		///A convenience method which can be overridden so that there’s no need to call
		///parent class' init(config). Override this method and it will be called by 
		///GenericServlet::init(ServletConfig config). By default, it does nothing.

	virtual void init(ServletConfig* pConfig);
		///Called by the servlet container to indicate to a servlet that the servlet is being
		///placed into service. See Servlet.init(ServletConfig) .
		///This implementation stores the ServletConfig object it receives from the
		///servlet container for later use. 

	void log(const std::string& msg) const;
		///Writes the specified message to a servlet log.

	void log(const std::string& msg, const ServletException& e);
		///Writes the specified message and exception info to a servlet log.

	virtual void service(ServletRequest& req, ServletResponse& res) = 0;
		///Called by the servlet container to allow the servlet to respond to a request.

protected:
	void checkConfig() const;

private:
	ServletConfig* _pConfig;
};


///
///inlines
///

inline void GenericServlet::checkConfig() const
{
	if(0 == _pConfig)
		throw ServletException("init(ServletConfig*) must be called "
			"in order for servlet to be ready for service.");
}


} } // namespace Poco::Servlet


#endif //Servlet_GenericServlet_INCLUDED
