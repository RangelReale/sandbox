//
// ServletContextImpl.h
//
//
// Library: Container
// Package: ContainerCore
// Module:  ServletContextImpl
//
// Definition of the ServletContextImpl class.
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef SERVLET_CONTEXT_IMP_H
#define SERVLET_CONTEXT_IMP_H


#include "Poco/Servlet/Container/ContainerBase.h"
#include "Poco/Servlet/Servlet.h"
#include "Poco/Servlet/Object.h"
#include "Poco/Servlet/Ex/HttpServletDispatcher.h"
#include "Poco/Servlet/Ex/PathMapping.h"
#include "Poco/Servlet/ServletContext.h"
#include "Poco/Servlet/ServletConfig.h"
#include "Poco/Servlet/Container/HttpSessionImpl.h"
#include "Poco/Servlet/Ex/SessionManager.h"
#include "Poco/Servlet/Ex/HttpServletDispatcher.h"
#include "Poco/Util/LayeredConfiguration.h"
#include "Poco/AutoPtr.h"
#include "Poco/Exception.h"
#include "Poco/Logger.h"
#include "Poco/RefCountedObject.h"
#include <fstream>


namespace Poco {
namespace Servlet {
namespace Container {


class WebApplication;


class Container_API ServletContextImpl : public ServletContext
{
 public:
	typedef std::map<std::string, std::string>                FilterServletMapping;
	typedef Poco::Servlet::Ex::HttpServletDispatcher::MimeMap MimeMap;

	ServletContextImpl(const std::string& rootDir,
		Poco::Servlet::Ex::HttpServletDispatcher& dispatcher,
		Logger* pLogger=0);

	~ServletContextImpl();

	const Object* getAttribute(const std::string& name) const;

	std::vector<std::string> getAttributeNames() const;

	const ServletContext* getContext(const std::string& uripath) const;

	std::string getInitParameter(const std::string& name) const;

	std::string getInitParameter(const std::string& name, const std::string& defValue) const;

	void setInitParameters(const Poco::Util::LayeredConfiguration& conf);

	void setInitParameter(const std::string& name, const std::string& value);

	std::vector<std::string> getInitParameterNames() const;

	void log(const std::string& msg) const;

	void log(const std::string& message, const ServletException& exception) const;

	void fatalNS(const std::string& msg) const;
	void criticalNS(const std::string& msg) const;
	void errorNS(const std::string& msg) const;
	void warningNS(const std::string& msg) const;
	void noticeNS(const std::string& msg) const;
	void infoNS(const std::string& msg) const;
	void debugNS(const std::string& msg) const;
	void traceNS(const std::string& msg) const;

	std::string getMimeType(const std::string& file) const;
  
	//const Servlet::RequestDispatcher* getNamedDispatcher(const std::string& name) const;

	std::string getRealPath(const std::string& path) const;

	//const Servlet::RequestDispatcher* getRequestDispatcher(const std::string& path) const;

	//std::string getResource(const std::string& path) const
	//{ 
	//}

	//std::istream& getResourceAsStream(const std::string& path)
	//{
	//}

	std::vector<std::string> getResourcePaths(const std::string& path) const  
	{ 
		//TODO (Poco::DirectoryIterator)
		std::vector<std::string> listing;
		return listing;
	}

	std::string getServerInfo();
		/// Returns the name and version of the servlet container.
	
	std::string getServletContextName() const;
		/// Returns application display name as specified in the deployment descriptor.

	std::string getName() const;
		/// Returns this context name. This name differs from display name specified
		/// in deployment descriptor. It corresponds to the servlet context root
		/// directory name (one level above the WEB-INF directory).

	void removeAttribute(const std::string& name);

	void setAttribute(std::string name, const Object* pAttribute);

	void assignServletMapping(const std::string& path, const std::string& servlet);
		/// Assigns path mapping to servlet name.

	const Poco::Servlet::Ex::PathMapping& getServletPathMapping() const;
		/// Retrieve servlet mappings for this context.

	const Poco::Servlet::Ex::PathMapping& getFilterPathMapping() const;
		/// Retrieve filter mappings for this context.

	const FilterServletMapping& getFilterServletMapping() const;
		/// Retrieve filter-servlet mappings. These mappings are used to generate the FilterChain
		/// associated with a filter.

	void addFilterServletMapping(const std::string& filter, const std::string& path);
		/// Adds filter-servlet mapping.

	void setMimeMap(const MimeMap& mimeMap);
		/// Sets the MIME map for the context. 
		/// Context takes the ownership of the map.

private:
	ServletContextImpl();
	ServletContextImpl(const ServletContextImpl& context);
	ServletContextImpl& operator =(const ServletContextImpl& context);

	typedef std::vector<Servlet*> ServletVector;
	
	std::string _rootDir;
	std::string _name;
	std::string _displayName;
	ObjectMap _attributes;
	ContextInitParamMap _initParams;
	Logger* _pLogger;

	ServletVector _servlets;
	Poco::Servlet::Ex::PathMapping _servletMapping;
	 /// [url-pattern]=>[servlet-name] mapping
	Poco::Servlet::Ex::PathMapping _filterURLMapping;
	 /// [url-pattern]=>[filter-name] mapping
	FilterServletMapping _filterServletMapping;
	 /// [filter-name]=>[servlet-name] mapping
	 /// This mapping configures FilterChains.

	const MimeMap* _pMimeMap;

	Poco::Servlet::Ex::HttpServletDispatcher& _servletDispatcher;
	 /// Reference to dispatcher for servlet requests.

	void extractParameters(const Poco::Util::LayeredConfiguration& conf,
				 const std::string& parent,
				 const std::string& child1,
				 const std::string& child2);
	 /// Utility function to extract parameters from
	 /// deployment descriptor.
	
	void assignMappings(const Poco::Util::LayeredConfiguration& conf);
	 /// Utility function to assign servlet mappings as
	 /// read from the deployment descriptor.

};

inline std::string ServletContextImpl::getServletContextName() const  
{ 
	return _displayName; 
}


inline std::string ServletContextImpl::getName() const  
{ 
	return _name; 
}


inline void ServletContextImpl::setMimeMap(const Poco::Servlet::Ex::HttpServletDispatcher::MimeMap& mimeMap)
{
	_pMimeMap = &mimeMap;
}


inline void ServletContextImpl::log(const std::string& msg) const
{
	if (_pLogger) _pLogger->log(msg);
}


inline void ServletContextImpl::log(const std::string& message, const ServletException& exception) const
{
	if (_pLogger) _pLogger->log(exception.getRootCause());
}


inline void ServletContextImpl::fatalNS(const std::string& msg) const
{
	if (_pLogger) _pLogger->fatal(msg);
}


inline void ServletContextImpl::criticalNS(const std::string& msg) const
{
	if (_pLogger) _pLogger->critical(msg);
}


inline void ServletContextImpl::errorNS(const std::string& msg) const
{
	if (_pLogger) _pLogger->log(msg);
}


inline void ServletContextImpl::warningNS(const std::string& msg) const
{
	if (_pLogger) _pLogger->warning(msg);
}


inline void ServletContextImpl::noticeNS(const std::string& msg) const
{
	if (_pLogger) _pLogger->notice(msg);
}


inline void ServletContextImpl::infoNS(const std::string& msg) const
{
	if (_pLogger) _pLogger->information(msg);
}


inline void ServletContextImpl::debugNS(const std::string& msg) const
{
	if (_pLogger) _pLogger->debug(msg);
}


inline void ServletContextImpl::traceNS(const std::string& msg) const
{
	if (_pLogger) _pLogger->trace(msg);
}


} } } // namespace Poco::Servlet::Container


#endif//SERVLET_CONTEXT_IMP_H
