//
// HttpSession.h
//
//
// Library: Container
// Package: ContainerCore
// Module:  HttpSession
//
// Definition of the HttpSession class.
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef Container_HttpSessionImpl_INCLUDED
#define Container_HttpSessionImpl_INCLUDED


#include "Poco/Servlet/Container/ContainerBase.h"
#include "Poco/Servlet/HttpSession.h"
#include "Poco/Timer.h"
#include <ctime>


namespace Poco {
namespace Servlet {
namespace Container {


class Container_API HttpSessionImpl : public HttpSession
{
 public:
	HttpSessionImpl();
	HttpSessionImpl(long maxInactiveInterval, HttpSessionListener* pSessionListener=0);
	~HttpSessionImpl();

	time_t getCreationTime() const;
	std::string getId() const;
	time_t getLastAccessedTime() const ;
	void setLastAccessedTimeNS(time_t t=0);
	const ServletContext& getServletContext() const;
	void setServletContext(ServletContext* pContext);
	void setMaxInactiveInterval(time_t interval);
	long getMaxInactiveInterval() const;
	const Object* getAttribute(const std::string& name) const;
	const Object* getValue(const std::string& name) const;
	const std::vector<std::string>& getAttributeNames() const;
	const std::vector<std::string>& getValueNames() const;
	void setAttribute(const std::string& name, Object& value);
	void removeAttribute(const std::string& name);
	void removeValue(const std::string& name);
	void invalidate();
	bool isValidNS() const;
	bool isNew() const;	
	bool expires() const;

 private:
	void startTimer();
	void restartTimer();
	void onTimer(Poco::Timer& timer);

	ServletContext*                  _pContext;
	ObjectMap                        _attributes;
	time_t                           _startTime;
	time_t                           _lastAccessTime;
	long                             _maxInactiveInterval;
	static Poco::UInt64              _seq;
	std::string                      _id;
	bool                             _valid;
	bool                             _new;
	Timer*                           _pTimer;
	HttpSessionListener*             _pSessionListener;
	ThreadPool*                      _pThreadPool;
	mutable std::vector<std::string> _attributeNames;
	TimerCallback<HttpSessionImpl>*  _pCallback;
};


///
/// inlines
///


inline bool HttpSessionImpl::expires() const
{
	return (INDEFINITE != _maxInactiveInterval);
}


} } } // namespace Poco::Servlet::Container


#endif //Container_HttpSessionImpl_INCLUDED
