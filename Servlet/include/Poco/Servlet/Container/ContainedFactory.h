//
// ContainedFactory.h
//
//
// Library: Container
// Package: ContainerCore
// Module:  ContainedFactory
//
// Definition of the ContainedFactory class.
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef Container_ContainedFactory_INCLUDED
#define Container_ContainedFactory_INCLUDED


#include "Poco/ClassLoader.h"
#include "Poco/MetaObject.h"
#include "Poco/Exception.h"
#include "Poco/Servlet/Ex/HttpServerConfig.h"
#include "Poco/Servlet/Ex/HttpServletDispatcher.h"
#include "WebServer.h"


namespace Poco {
namespace Servlet {
namespace Container {


template <class Base> class ContainedFactory
{
public:
	typedef Poco::ClassLoader<Base> CL;
	typedef Poco::AbstractMetaObject<Base> Meta;

	ContainedFactory(const CL& cl): _cl(cl)
	{
	}

	Base* createInstance(const std::string& name, bool autoDelete=true)
	{
		Base* pEntity = 0;

		const Meta& meta = _cl.classFor(name);

		try
		{
		 if (meta.canCreate()) pEntity = meta.create();
		 else pEntity = &meta.instance();

		 if((autoDelete) && (meta.canCreate()))
			 meta.autoDelete(pEntity);

		 poco_check_ptr(pEntity);
		}
		catch(...)
		{
			 throw;
		}

		return pEntity;
	}

private:
	   ContainedFactory();
     const CL& _cl;
};


} } } // namespace Poco::Servlet::Container


#endif //Container_ContainedFactory_INCLUDED
