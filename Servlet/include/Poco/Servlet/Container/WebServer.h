//
// WebServer.h
//
//
// Library: Container
// Package: ContainerCore
// Module:  WebServer
//
// Definition of the WebServer class.
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef Container_WebServer_INCLUDED
#define Container_WebServer_INCLUDED


#include "Poco/Servlet/Container/ContainerBase.h"
#include "Poco/Servlet/Ex/HttpServer.h"
#include "Poco/Servlet/Ex/HttpServerConfig.h"
#include "Contained.h"
#include "Poco/Servlet/Ex/HttpServletDispatcher.h"
#include "Poco/Logger.h"
#include "Poco/SplitterChannel.h"
#include "Poco/Mutex.h"
#include "Poco/Path.h"
#include "Poco/NotificationQueue.h"
#include "Poco/Util/XMLConfiguration.h"
#include "Poco/Runnable.h"
#include <string>
#include <map>


namespace Poco {
namespace Servlet {
namespace Container {


class Container_API WebServer : public Contained, public Runnable
{
 public:
	WebServer(const std::string& name, Poco::Servlet::Ex::HttpServletDispatcher& dispatcher);
	 /// Constructor.

  ~WebServer();
	 /// Destructor.

	void create(const std::string& className, const std::string& serverName);
	 /// Creates a web server. 

	void setInitParameter(const std::string& name, const std::string& value);
	 /// Assigns the value to the initialization parameter.

	std::string getInitParameter(const std::string& name) const;
	 /// Returns the value of the initialization parameter if found.
	 /// Otherwise returns "".

	std::string getInitParameter(const std::string& name, const std::string& defValue) const;
	 /// Returns the value of the initialization parameter if found.
	 /// Otherwise returns supplied default value.

	void run();
	 /// Runs the web server.

	void stop();
	 /// Stops the web server.

	const std::vector<std::string>* interfaces();
	 /// Returns pointer to web server listening interfaces vector.

	bool isRunning() const;
	 /// Returns true if the server is running.

 private:
	typedef Poco::ClassLoader<Poco::Servlet::Ex::HttpServer> ServerLoader;
	typedef std::map<std::string, std::string>               ServerInitParamMap;

	void init();
	 /// Initialize the web server.
  
	void initServers();
	 /// Initializes all the servers found.

	void setInitParameters();
	 /// Read initialization parameters.

	bool loadSharedLib(const std::string& fileName);
	 /// Loads the specified shared lib.

	std::string                                   _displayName; // Web server display name (read from web.xml at startup).
	ServerInitParamMap                            _initParamMap; // Initialization parameters map.
	Poco::Servlet::Ex::HttpServer*                _pServer;
	Poco::Servlet::Ex::HttpServletDispatcher&     _dispatcher;
	Poco::Servlet::Ex::HttpServerConfig::AliasMap _aliases;
	ServerLoader                                  _classLoader; // Server loader.
	static Poco::FastMutex                        _mutex;
};


///
/// inlines
///


inline bool WebServer::isRunning() const
{
  if(_pServer) return _pServer->isRunning();

  return false;
}


} } } // namespace Poco::Servlet::Container


#endif //Container_WebServer_INCLUDED
