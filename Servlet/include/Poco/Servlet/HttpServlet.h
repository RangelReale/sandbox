//
// HttpServlet.h
//
//
// Library: Servlet
// Package: Http
// Module:  HttpServlet
//
// Definition of the HttpServlet class.
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
//
// The code in this file is derived from Apache Tomcat project
// Copyright (c) 2004 The Apache Software Foundation.
// http://www.apache.org/licenses/LICENSE-2.0
// 


#ifndef Servlet_Http_HttpServlet_INCLUDED
#define Servlet_Http_HttpServlet_INCLUDED


#include "Poco/Servlet/GenericServlet.h"
#include "Poco/Servlet/HttpServletRequest.h"
#include "Poco/Servlet/HttpServletResponse.h"
#include "Poco/Servlet/ServletOutputStream.h"
#include "Poco/NullStream.h"
#include <locale>
#include "Poco/Servlet/ServletBase.h"


namespace Poco {
namespace Servlet {


class Servlet_API HttpServlet : public GenericServlet
	/// Abstract class.
{
public:
	HttpServlet();
	virtual ~HttpServlet() {}

	void service(ServletRequest& req, ServletResponse& res);
		/// Dispatches client requests to the protected
		/// service method. There's no need to
		/// override this method.

protected:
	virtual void doGet(HttpServletRequest& req, HttpServletResponse& resp);
		/// Called by the server (via the service method) to
		/// allow a servlet to handle a GET request. 
		/// 
		/// Overriding this method to support a GET request also
		/// automatically supports an HTTP HEAD request. A HEAD
		/// request is a GET request that returns no body in the
		/// response, only the request header fields.
		/// 
		/// When overriding this method, read the request data,
		/// write the response headers, get the response's writer or 
		/// output stream object, and finally, write the response data.
		/// It's best to include content type and encoding. When using
		/// a PrintWriter object to return the response,
		/// set the content type before accessing the
		/// PrintWriter object.
		/// 
		/// The servlet container must write the headers before
		/// committing the response, because in HTTP the headers must be sent
		/// before the response body.
		/// 
		/// Where possible, set the Content-Length header (with the
		/// {ServletResponse::setContentLength} method),
		/// to allow the servlet container to use a persistent connection 
		/// to return its response to the client, improving performance.
		/// The content length is automatically set if the entire response fits
		/// inside the response buffer.
		/// 
		/// When using HTTP 1.1 chunked encoding (which means that the response
		/// has a Transfer-Encoding header), do not set the Content-Length header.
		/// 
		/// The GET method should be safe, that is, without
		/// any side effects for which users are held responsible.
		/// For example, most form queries have no side effects.
		/// If a client request is intended to change stored data,
		/// the request should use some other HTTP method.
		/// 
		/// The GET method should also be idempotent, meaning
		/// that it can be safely repeated. Sometimes making a
		/// method safe also makes it idempotent. For example, 
		/// repeating queries is both safe and idempotent, but
		/// buying a product online or modifying data is neither
		/// safe nor idempotent. 
		/// 
		/// If the request is incorrectly formatted, doGet
		/// returns an HTTP "Bad Request" message.

	long getLastModified(HttpServletRequest& req);
		/// Returns the time the HttpServletRequest
		/// object was last modified,
		/// in milliseconds since midnight January 1, 1970 GMT.
		/// If the time is unknown, this method returns a negative
		/// number (the default).
		/// 
		/// Servlets that support HTTP GET requests and can quickly determine
		/// their last modification time should override this method.
		/// This makes browser and proxy caches work more effectively,
		/// reducing the load on server and network resources.
		///
		/// Returns	a long integer specifying	the time the HttpServletRequest
		/// object was last modified, in milliseconds since 
		/// midnight, January 1, 1970 GMT, or -1 if the time is not known

	virtual void doHead(HttpServletRequest& req, HttpServletResponse& resp);
		/// Receives an HTTP HEAD request from the protected
		/// service method and handles the
		/// request.
		/// The client sends a HEAD request when it wants
		/// to see only the headers of a response, such as
		/// Content-Type or Content-Length. The HTTP HEAD
		/// method counts the output bytes in the response
		/// to set the Content-Length header accurately.
		/// 
		/// If you override this method, you can avoid computing
		/// the response body and just set the response headers
		/// directly to improve performance. Make sure that the
		/// doHead method you write is both safe
		/// and idempotent (that is, protects itself from being
		/// called multiple times for one HTTP HEAD request).
		/// 
		/// If the HTTP HEAD request is incorrectly formatted,
		/// doHead returns an HTTP "Bad Request"
		/// message.

	virtual void doPost(HttpServletRequest& req, HttpServletResponse& resp);
		/// Called by the server (via the service method)
		/// to allow a servlet to handle a POST request.
		///
		/// When overriding this method, read the request data,
		/// write the response headers, get the response's writer or output
		/// stream object, and finally, write the response data. It's best 
		/// to include content type and encoding. When using a
		/// PrintWriter object to return the response, set the 
		/// content type before accessing the PrintWriter object. 
		///
		/// The servlet container must write the headers before committing the
		/// response, because in HTTP the headers must be sent before the 
		/// response body.
		///
		/// Where possible, set the Content-Length header (with the
		/// {servlet.ServletResponse::setContentLength} method),
		/// to allow the servlet container to use a persistent connection 
		/// to return its response to the client, improving performance.
		/// The content length is automatically set if the entire response fits
		/// inside the response buffer.  
		///
		/// When using HTTP 1.1 chunked encoding (which means that the response
		/// has a Transfer-Encoding header), do not set the Content-Length header. 
		///
		/// This method does not need to be either safe or idempotent.
		/// Operations requested through POST can have side effects for
		/// which the user can be held accountable, for example, 
		/// updating stored data or buying items online.
		///
		/// If the HTTP POST request is incorrectly formatted,
		/// doPost returns an HTTP "Bad Request" message.

	virtual void doPut(HttpServletRequest& req, HttpServletResponse& resp);
		/// Called by the server (via the service method)
		/// to allow a servlet to handle a PUT request.
		///
		/// The PUT operation allows a client to 
		/// place a file on the server and is similar to 
		/// sending a file by FTP.
		///
		/// <p>When overriding this method, leave intact
		/// any content headers sent with the request (including
		/// Content-Length, Content-Type, Content-Transfer-Encoding,
		/// Content-Encoding, Content-Base, Content-Language, Content-Location,
		/// Content-MD5, and Content-Range). If your method cannot
		/// handle a content header, it must issue an error message
		/// (HTTP 501 - Not Implemented) and discard the request.
		/// For more information on HTTP 1.1, see RFC 2616
		/// (http://www.ietf.org/rfc/rfc2616.txt).
		///
		/// <p>This method does not need to be either safe or idempotent.
		/// Operations that doPut performs can have side
		/// effects for which the user can be held accountable. When using
		/// this method, it may be useful to save a copy of the
		/// affected URL in temporary storage.
		///
		/// If the HTTP PUT request is incorrectly formatted,
		/// doPut returns an HTTP "Bad Request" message.

	virtual void doDelete(HttpServletRequest& req, HttpServletResponse& resp);
		/// Called by the server (via the service method)
		/// to allow a servlet to handle a DELETE request.
		///
		/// The DELETE operation allows a client to remove a document
		/// or Web page from the server.
		/// 
		/// This method does not need to be either safe
		/// or idempotent. Operations requested through
		/// DELETE can have side effects for which users
		/// can be held accountable. When using
		/// this method, it may be useful to save a copy of the
		/// affected URL in temporary storage.
		///
		/// If the HTTP DELETE request is incorrectly formatted,
		/// doDelete returns an HTTP "Bad Request"
		/// message.
    
	void doOptions(HttpServletRequest& req, HttpServletResponse& resp);
		/// Called by the server (via the service method)
		/// to allow a servlet to handle a OPTIONS request.
		/// 
		/// The OPTIONS request determines which HTTP methods the server supports 
		/// and returns an appropriate header. For example, if a servlet
		/// overrides doGet, this method returns the following header:
		/// 
		/// Allow: GET, HEAD, TRACE, OPTIONS
		/// 
		/// There's no need to override this method unless the
		/// servlet implements new HTTP methods, beyond those 
		/// implemented by HTTP 1.1.
    
    
	void doTrace(HttpServletRequest& req, HttpServletResponse& resp);
		/// Called by the server (via the <code>service</code> method)
		/// to allow a servlet to handle a TRACE request.
		/// 
		/// A TRACE returns the headers sent with the TRACE
		/// request to the client, so that they can be used in
		/// debugging. There's no need to override this method. 

	void service(HttpServletRequest& req, HttpServletResponse& resp);
		/// Receives standard HTTP requests from the public
		/// service method and dispatches them to the doXXX methods defined in 
		/// this class. This method is an HTTP-specific version of the 
		/// {Servlet::service} method. There's no
		/// need to override this method.

	static std::vector<std::string> SUPPORTED_METHODS;

private:
	void maybeSetLastModified(HttpServletResponse& resp, long lastModified);
		/// Sets the Last-Modified entity header field, if it has not
		/// already been set and if the value is meaningful.  Called before
		/// doGet, to ensure that headers are set before response data is
		/// written.  A subclass might have set this header already, so we
		/// check.

	const static std::string METHOD_DELETE;
	const static std::string METHOD_HEAD;
	const static std::string METHOD_GET;
	const static std::string METHOD_OPTIONS;
	const static std::string METHOD_POST;
	const static std::string METHOD_PUT;
	const static std::string METHOD_TRACE;

	const static std::string HEADER_IFMODSINCE;
	const static std::string HEADER_LASTMOD;
	  
	const static std::string LSTRING_FILE;
	/*TODO
    static ResourceBundle lStrings =
	ResourceBundle.getBundle(LSTRING_FILE);
   */

	
};


} } // namespace Poco::Servlet


#endif // Servlet_Http_HttpServlet_INCLUDED
