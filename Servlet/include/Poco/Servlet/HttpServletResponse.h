//
// HttpServletResponse.h
//
//
// Library: Servlet
// Package: Http
// Module:  HttpServletResponse
//
// Definition of the HttpServletResponse class.
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
//
// The code in this file is derived from Apache Tomcat project
// Copyright (c) 2004 The Apache Software Foundation.
// http://www.apache.org/licenses/LICENSE-2.0
// 


#ifndef Servlet_Http_HttpServletResponse_INCLUDED
#define Servlet_Http_HttpServletResponse_INCLUDED


#include "Poco/Servlet/ServletResponse.h"
#include "Poco/Servlet/ServletException.h"
#include "Poco/Servlet/Cookie.h"
#include "Poco/Servlet/ServletBase.h"


namespace Poco {
namespace Servlet {


class Servlet_API HttpServletResponse : virtual public ServletResponse 
{
public:	
	HttpServletResponse();
		/// Creates HttpServletResponse.

	virtual ~HttpServletResponse();
		/// Destroys HttpServletResponse.

	virtual void addCookie(const Cookie& cookie) = 0;
		/// Adds the specified cookie to the response.  This method can be called
		/// multiple times to set more than one cookie.

	virtual bool containsHeader(const std::string& name) = 0;
		/// Returns a bool indicating whether the named response header 
		/// has already been set.


	virtual std::string encodeURL(const std::string& url) = 0;
		/// Encodes the specified URL by including the session ID in it,
		/// or, if encoding is not needed, returns the URL unchanged.
		/// The implementation of this method includes the logic to
		/// determine whether the session ID needs to be encoded in the URL.
		/// For example, if the browser supports cookies, or session
		/// tracking is turned off, URL encoding is unnecessary.
		/// 
		/// For robust session tracking, all URLs emitted by a servlet 
		/// should be run through this
		/// method.  Otherwise, URL rewriting cannot be used with browsers
		/// which do not support cookies.

	virtual std::string encodeRedirectURL(const std::string& url) = 0;
		/// Encodes the specified URL for use in the
		/// sendRedirect method or, if encoding is not needed,
		/// returns the URL unchanged.  The implementation of this method
		/// includes the logic to determine whether the session ID
		/// needs to be encoded in the URL.  Because the rules for making
		/// this determination can differ from those used to decide whether to
		/// encode a normal link, this method is separated from the
		/// encodeURL method.
		/// 
		/// All URLs sent to the HttpServletResponse.sendRedirect
		/// method should be run through this method.  Otherwise, URL
		/// rewriting cannot be used with browsers which do not support
		/// cookies.

	std::string encodeUrl(const std::string& url);
		/// Deprecated.	As of version 2.1, use encodeURL(const std::string& url) instead

	std::string encodeRedirectUrl(const std::string& url);
		/// Deprecated. Use encodeRedirectURL(const std::string& url) instead

	virtual void sendError(int sc, const std::string& msg) = 0;
		/// Sends an error response to the client using the specified
		/// status.  The server defaults to creating the
		/// response to look like an HTML-formatted server error page
		/// containing the specified message, setting the content type
		/// to "text/html", leaving cookies and other headers unmodified.
		///
		/// If an error-page declaration has been made for the web application
		/// corresponding to the status code passed in, it will be served back in 
		/// preference to the suggested msg parameter. 
		///
		/// If the response has already been committed, this method throws 
		/// an IllegalStateException.
		/// After using this method, the response should be considered
		/// to be committed and should not be written to.

	virtual void sendError(int sc) = 0;
		/// Sends an error response to the client using the specified status
		/// code and clearing the buffer. 
		/// If the response has already been committed, this method throws 
		/// an IllegalStateException.
		/// After using this method, the response should be considered
		/// to be committed and should not be written to.

	virtual void sendRedirect(const std::string& location) = 0;
		/// Sends a temporary redirect response to the client using the
		/// specified redirect location URL.  This method can accept relative URLs;
		/// the servlet container must convert the relative URL to an absolute URL
		/// before sending the response to the client. If the location is relative 
		/// without a leading '/' the container interprets it as relative to
		/// the current request URI. If the location is relative with a leading
		/// '/' the container interprets it as relative to the servlet container root.
		///
		/// If the response has already been committed, this method throws 
		/// an IllegalStateException.
		/// After using this method, the response should be considered
		/// to be committed and should not be written to.

	virtual void setDateHeader(const std::string& name, long date) = 0;
		/// Sets a response header with the given name and
		/// date-value.  The date is specified in terms of
		/// milliseconds since the epoch.  If the header had already
		/// been set, the new value overwrites the previous one.  The
		/// containsHeader method can be used to test for the
		/// presence of a header before setting its value.

	virtual void addDateHeader(const std::string& name, long date) = 0;
		/// Adds a response header with the given name and
		/// date-value.  The date is specified in terms of
		/// milliseconds since the epoch.  This method allows response headers 
		/// to have multiple values.

	virtual void setHeader(const std::string& name, const std::string& value) = 0;
		/// Sets a response header with the given name and value.
		/// If the header had already been set, the new value overwrites the
		/// previous one.  The containsHeader method can be used to test for 
		/// the presence of a header before setting its value.
		/// Value is the header value  If it contains octet string, it should be 
		/// encoded according to RFC 2047 (http://www.ietf.org/rfc/rfc2047.txt)

	virtual void addHeader(const std::string& name, const std::string& value) = 0;
		/// Adds a response header with the given name and value.
		/// This method allows response headers to have multiple values.
		/// Value is the additional header value   If it contains octet string, it 
		 /// should be encoded according to RFC 2047 (http://www.ietf.org/rfc/rfc2047.txt)

	virtual void setIntHeader(const std::string& name, int value) = 0;
		/// Sets a response header with the given name and integer value.  
		 /// If the header had already been set, the new value overwrites 
		 /// the previous one.  The containsHeader method can be used to test 
		 /// for the presence of a header before setting its value.

	virtual void addIntHeader(const std::string& name, int value) = 0;
		/// Adds a response header with the given name and
		/// integer value.  This method allows response headers to have multiple
		/// values.

	virtual void setStatus(int sc) = 0;
		/// Sets the status code for this response.  This method is used to
		/// set the return status code when there is no error (for example,
		/// for the status codes SC_OK or SC_MOVED_TEMPORARILY).  If there
		/// is an error, and the caller wishes to invoke an error-page defined
		/// in the web application, the sendError method should be used
		/// instead.
		///  The container clears the buffer and sets the Location header, preserving
		/// cookies and other headers.

	virtual void setStatus(int sc, const std::string& sm) = 0;
		/// @deprecated As of version 2.1, due to ambiguous meaning of the 
		/// message parameter. To set a status code 
		/// use setStatus(int), to send an error with a description
		/// use sendError(int, const std::string&).
		///
		/// Sets the status code and message for this response.

    
		/// Server status codes; see RFC 2068.
    const static int SC_CONTINUE;
		/// Status code (100) indicating the client can continue.

    const static int SC_SWITCHING_PROTOCOLS;
		/// Status code (101) indicating the server is switching protocols
		/// according to Upgrade header.

    const static int SC_OK;
		/// Status code (200) indicating the request succeeded normally.

    const static int SC_CREATED;
		/// Status code (201) indicating the request succeeded and created
		/// a new resource on the server.

    const static int SC_ACCEPTED;
		/// Status code (202) indicating that a request was accepted for
		/// processing, but was not completed.

    const static int SC_NON_AUTHORITATIVE_INFORMATION;
		/// Status code (203) indicating that the meta information presented
		/// by the client did not originate from the server.

    const static int SC_NO_CONTENT;
		/// Status code (204) indicating that the request succeeded but that
		/// there was no new information to return.

    const static int SC_RESET_CONTENT;
		/// Status code (205) indicating that the agent SHOULD reset
		/// the document view which caused the request to be sent.

    const static int SC_PARTIAL_CONTENT;
		/// Status code (206) indicating that the server has fulfilled
		/// the partial GET request for the resource.

    const static int SC_MULTIPLE_CHOICES;
		/// Status code (300) indicating that the requested resource
		/// corresponds to any one of a set of representations, each with
		/// its own specific location.

    const static int SC_MOVED_PERMANENTLY;
		/// Status code (301) indicating that the resource has permanently
		/// moved to a new location, and that future references should use a
		/// new URI with their requests.

    const static int SC_MOVED_TEMPORARILY;
		/// Status code (302) indicating that the resource has temporarily
		/// moved to another location, but that future references should
		/// still use the original URI to access the resource.
		///
		/// This definition is being retained for backwards compatibility.
		/// SC_FOUND is now the preferred definition.

    const static int SC_FOUND;
		/// Status code (302) indicating that the resource reside
		/// temporarily under a different URI. Since the redirection might
		/// be altered on occasion, the client should continue to use the
		/// Request-URI for future requests.(HTTP/1.1) To represent the
		/// status code (302), it is recommended to use this variable.

    const static int SC_SEE_OTHER;
		/// Status code (303) indicating that the response to the request
		/// can be found under a different URI.

    const static int SC_NOT_MODIFIED;
		/// Status code (304) indicating that a conditional GET operation
		/// found that the resource was available and not modified.

    const static int SC_USE_PROXY;
		/// Status code (305) indicating that the requested resource
		/// MUST be accessed through the proxy given by the
		/// Location field.

    const static int SC_TEMPORARY_REDIRECT;
		/// Status code (307) indicating that the requested resource 
		/// resides temporarily under a different URI. The temporary URI
		/// SHOULD be given by the Location 
		/// field in the response.

    const static int SC_BAD_REQUEST;
		/// Status code (400) indicating the request sent by the client was
		/// syntactically incorrect.

    const static int SC_UNAUTHORIZED;
		/// Status code (401) indicating that the request requires HTTP
		/// authentication.

    const static int SC_PAYMENT_REQUIRED;
		/// Status code (402) reserved for future use.

    const static int SC_FORBIDDEN;
		/// Status code (403) indicating the server understood the request
		/// but refused to fulfill it.

    const static int SC_NOT_FOUND;
		/// Status code (404) indicating that the requested resource is not
		/// available.

    const static int SC_METHOD_NOT_ALLOWED;
		/// Status code (405) indicating that the method specified in the
		/// Request-Line is not allowed for the resource
		/// identified by the Request-URI.

    const static int SC_NOT_ACCEPTABLE;
		/// Status code (406) indicating that the resource identified by the
		/// request is only capable of generating response entities which have
		/// content characteristics not acceptable according to the accept
		/// headers sent in the request.

    const static int SC_PROXY_AUTHENTICATION_REQUIRED;
		/// Status code (407) indicating that the client MUST first
		/// authenticate itself with the proxy.

    const static int SC_REQUEST_TIMEOUT;
		/// Status code (408) indicating that the client did not produce a
		/// request within the time that the server was prepared to wait.

    const static int SC_CONFLICT;
		/// Status code (409) indicating that the request could not be
		/// completed due to a conflict with the current state of the
		/// resource.

    const static int SC_GONE;
		/// Status code (410) indicating that the resource is no longer
		/// available at the server and no forwarding address is known.
		/// This condition SHOULD be considered permanent.

    const static int SC_LENGTH_REQUIRED;
		/// Status code (411) indicating that the request cannot be handled
		/// without a defined Content-Length.

    const static int SC_PRECONDITION_FAILED;
		/// Status code (412) indicating that the precondition given in one
		/// or more of the request-header fields evaluated to false when it
		/// was tested on the server.

    const static int SC_REQUEST_ENTITY_TOO_LARGE;
		 /// Status code (413) indicating that the server is refusing to process
		/// the request because the request entity is larger than the server is
		/// willing or able to process.

    const static int SC_REQUEST_URI_TOO_LONG;
		/// Status code (414) indicating that the server is refusing to service
		/// the request because the Request-URI is longer
		/// than the server is willing to interpret.

    const static int SC_UNSUPPORTED_MEDIA_TYPE;
		/// Status code (415) indicating that the server is refusing to service
		/// the request because the entity of the request is in a format not
		/// supported by the requested resource for the requested method.

    const static int SC_REQUESTED_RANGE_NOT_SATISFIABLE;
		/// Status code (416) indicating that the server cannot serve the
		/// requested byte range.

    const static int SC_EXPECTATION_FAILED;
		/// Status code (417) indicating that the server could not meet the
		/// expectation given in the Expect request header.

    const static int SC_INTERNAL_SERVER_ERROR;
		/// Status code (500) indicating an error inside the HTTP server
		/// which prevented it from fulfilling the request.

    const static int SC_NOT_IMPLEMENTED;
		/// Status code (501) indicating the HTTP server does not support
		/// the functionality needed to fulfill the request.

    const static int SC_BAD_GATEWAY;
		/// Status code (502) indicating that the HTTP server received an
		/// invalid response from a server it consulted when acting as a
		/// proxy or gateway.

    const static int SC_SERVICE_UNAVAILABLE;
		/// Status code (503) indicating that the HTTP server is
		/// temporarily overloaded, and unable to handle the request.

    const static int SC_GATEWAY_TIMEOUT;
		 /// Status code (504) indicating that the server did not receive
		/// a timely response from the upstream server while acting as
		/// a gateway or proxy.

    const static int SC_HTTP_VERSION_NOT_SUPPORTED;
		/// Status code (505) indicating that the server does not support
		/// or refuses to support the HTTP protocol version that was used
		/// in the request message.
};


} } // namespace Poco::Servlet


#endif //Servlet_Http_HttpServletResponse_INCLUDED
