//
// ServletProvider.h
//
//
// Library: ServletEx
// Package: Servlet
// Module:  ServletProvider
//
// Definition of the ServletProvider class.
//
// Copyright (c) 2006, Aleksandar Fabijanic and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef ServletEx_ServletProvider_INCLUDED
#define ServletEx_ServletProvider_INCLUDED


#include "Poco/Servlet/ServletBase.h"
#include "Poco/Servlet/Servlet.h"
#include "Poco/Servlet/HttpServlet.h"
#include <string>


namespace Poco {
namespace Servlet {
namespace Ex {


class Servlet_API ServletProvider
{
public:
	ServletProvider(const std::string& name);
		/// Creates ServletProvider.

	virtual ~ServletProvider();
		/// Destroys ServletProvider.

	virtual Servlet* getServlet(const std::string& servletName) const = 0;
		/// Returns pointer to servlet.

	std::string name();
		/// Returns name.

	static const char NAME_SEPARATOR;
	 /// Every servlet has a unique name.
	 /// Singleton servlets and first instances of pre-load servlets are named 
	 /// with their class name. Subsequently created servlets (and singleton
	 /// aliases) are assigned name that is concatenation of the class name,
	 /// separator and:
	 ///   - zero-based sequence number (for web applications that do not interpret sessions)
	 ///   - UUID (for web applications that do interpret sessions)
	 ///
	 /// Example:
	 /// Second servlet instance of class 'ClassName' being part of a web application that does
	 /// not interpret sessions will be named ClassName#1.

private:
	ServletProvider();
	std::string _name;
};


class Servlet_API HttpServletProvider : public ServletProvider
{
public:
	HttpServletProvider(const std::string& name);
		/// Constructs HttpServletProvider.

	virtual ~HttpServletProvider();
		/// Destroys HttpServletProvider.

	Servlet* getServlet(const std::string& servletName) const;
		/// Returns pointer to servlet.

	virtual HttpServlet* getHttpServlet(const std::string& servletName) const = 0;
		/// Returns pointer to servlet. Must be implemented by inheriting class.
};


///
/// inlines
///


inline std::string ServletProvider::name()
{ 
	return _name; 
}


inline Servlet* HttpServletProvider::getServlet(const std::string& servletName) const
{
	return getHttpServlet(servletName);
}


} } } // namespace Poco::Servlet::Ex


#endif //ServletEx_ServletProvider_INCLUDED
