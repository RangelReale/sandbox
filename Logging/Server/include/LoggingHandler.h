//
// LoggingHandler.h
//
// $Id: //poco/Main/Logging/Server/include/LoggingHandler.h#2 $
//
// Definition of the LoggingHandler class.
//
// Copyright (c) 2006-2008, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef LoggingServer_LoggingHandler_INCLUDED
#define LoggingServer_LoggingHandler_INCLUDED


#include "Poco/Net/HTTPRequestHandler.h"
#include "Poco/Message.h"
#include <vector>


class CachingChannel;


class LoggingHandler: public Poco::Net::HTTPRequestHandler
	/// Describe class LoggingHandler...
{
public:
	static const std::string TITLE;
	static const std::string LOGGING_DIR;
	static const std::string OFFSET;
	static const std::string NUMENTRIES;
	static const std::string EVEN;
	static const std::string ODD;
	static const std::string IMG_PREVIOUS;
	static const std::string IMG_NEXT;


	enum
	{
		DEFAULT_NUMENTRIES = 20
	};

	LoggingHandler(CachingChannel& channel, const std::string& user, const std::string& pwdHash);
		/// Creates the LoggingHandler. 

	~LoggingHandler();
		/// Destroys the LoggingHandler.

	void handleRequest(Poco::Net::HTTPServerRequest& request, Poco::Net::HTTPServerResponse& response);

	static std::string convert(Poco::Message::Priority prio);

	static std::string image(Poco::Message::Priority prio);

private:
	void displayMessages(const std::vector<Poco::Message>& msg, int offset, int numEntries, std::size_t maxEntries, Poco::Net::HTTPServerResponse& response);
	void writeTable(const std::vector<Poco::Message>& msg, int offset, int numEntries, std::size_t maxEntries, std::ostream& out);
	void writeTableEntry(const Poco::Message& msg, const std::string& cssClass, std::ostream& out);

private:
	CachingChannel& _channel;
	std::string _user;
	std::string _pwdHash;
};


#endif // LoggingServer_LoggingHandler_INCLUDED
