//
// DatabaseChannel.h
//
// $Id: //poco/Main/Logging/Server/include/DatabaseChannel.h#2 $
//
// Definition of the DatabaseChannel class.
//
// Copyright (c) 2006-2008, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef LoggingServer_DatabaseChannel_INCLUDED
#define LoggingServer_DatabaseChannel_INCLUDED


#include "Poco/Channel.h"
#include "Poco/Data/Session.h"
#include "Poco/SharedPtr.h"
#include "Poco/Mutex.h"


class DatabaseChannel: public Poco::Channel
	/// Writes log messages to a database
{
public:
	static const std::string PROP_DB;
	static const std::string PROP_CONNSTRING;

	DatabaseChannel();
		/// Creates the DatabaseChannel.

	DatabaseChannel(const std::string& dbType, const std::string& connString);
		/// Creates the DatabaseChannel.
	///     dbType: either ODBC or sqlite (case-sensitive!) Best to use the corresponding SessionInstantiator::KEY constant
		///     connectionstring: 
		///            for ODBC:   "DSN=SomeDSNName;Uid=username;Pwd=password;"
		///            for sqlite: "file.db"

	~DatabaseChannel();
		/// Destroys the DatabaseChannel.

	void log(const Poco::Message& msg);
		/// Writes the log message to the database

	void setProperty(const std::string& name, const std::string& value);
		/// Allows to configure the database connection
		/// The following properties are allowed:
		///     database: either ODBC or sqlite (case-sensitive!)  Best to use the corresponding SessionInstantiator::KEY constant
		///     connectionString: 
		///            for ODBC:   "DSN=SomeDSNName;Uid=username;Pwd=password;"
		///            for sqlite: "file.db"

	std::string getProperty(const std::string& name) const;

	void open();
		/// Opens the connection to the database

	void close();
		/// Closes the connection to the database

	static void registerChannel();

private:
	static const std::string SQL_CREATE_TABLE;
	static const std::string SQL_INSERT_MESSAGE;

private:
	std::string _databaseType;
	std::string _connectionString;
	Poco::SharedPtr<Poco::Data::Session> _ptrSession;
	mutable Poco::Mutex _mutex;
};


#endif // LoggingServer_DatabaseChannel_INCLUDED
