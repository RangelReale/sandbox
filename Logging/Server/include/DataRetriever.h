//
// DataRetriever.h
//
// $Id: //poco/Main/Logging/Server/include/DataRetriever.h#2 $
//
// Definition of the DataRetriever class.
//
// Copyright (c) 2006-2008, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef LoggingServer_DataRetriever_INCLUDED
#define LoggingServer_DataRetriever_INCLUDED


#include "Poco/Net/HTTPRequestHandler.h"
#include "Poco/Path.h"
#include "Poco/File.h"
#include <map>


class DataRetriever: public Poco::Net::HTTPRequestHandler
	/// class DataRetriever fetches data and maps server pathes to local file system pathes
{
public:
	static const std::string INDEX_HTM;
	static const std::string INDEX_HTML;
	static const std::string MSG_LISTING_NOT_ALLOWED;
	static const std::string MSG_NOT_FOUND;
	typedef std::map<std::string, Poco::Path> Aliases;
		/// Maps a server path to a local file system path

	DataRetriever(const DataRetriever::Aliases& alias);
		/// Creates the DataRetriever. We only support simple alias resolution, ie a server path can consist only of one directory!
		/// Example:
		///    /    -> c:\\data
		///    /gif -> p:\\data\gif
		/// Illegal (nested path):
		///    /gif/data -> p:\\data\gif

	~DataRetriever();
		/// Destroys the DataRetriever.

	void handleRequest(Poco::Net::HTTPServerRequest& request, Poco::Net::HTTPServerResponse& response);

	static void sendFile(const std::string& path, Poco::Net::HTTPServerResponse& response);

private:
	std::string resolveAliases(const std::string& path);

	void handleBrowsingNotAllowed(Poco::Net::HTTPServerResponse& response);

	void handleFileNotFound(Poco::Net::HTTPServerResponse& response);

	static std::map<std::string, std::string> initExtensions();
private:
	const Aliases& _aliases;
	static std::map<std::string, std::string> EXTENSIONMAPPING;
		/// Maps file extensions to content/type
};


#endif // LoggingServer_DataRetriever_INCLUDED
