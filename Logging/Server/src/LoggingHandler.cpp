//
// LoggingHandler.cpp
//
// $Id: //poco/Main/Logging/Server/src/LoggingHandler.cpp#2 $
//
// Copyright (c) 2006-2008, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "LoggingHandler.h"
#include "CachingChannel.h"
#include "Poco/Util/Application.h"
#include "Poco/Net/HTTPServerRequest.h"
#include "Poco/Net/HTTPServerResponse.h"
#include "Poco/Net/HTTPBasicCredentials.h"
#include "Poco/Net/HTMLForm.h"
#include "Poco/StringTokenizer.h"
#include "Poco/StreamCopier.h"
#include "Poco/MD5Engine.h"
#include "Poco/DigestStream.h"
#include "Poco/NumberParser.h"
#include "Poco/DateTimeFormatter.h"
#include "Poco/DateTimeFormat.h"
#include <sstream>


const std::string LoggingHandler::TITLE("POCO Logging Server");
const std::string LoggingHandler::LOGGING_DIR("/log");
const std::string LoggingHandler::OFFSET("offset");
const std::string LoggingHandler::NUMENTRIES("numentries");
const std::string LoggingHandler::EVEN("even");
const std::string LoggingHandler::ODD("odd");
const std::string LoggingHandler::IMG_PREVIOUS("/images/prev.gif");
const std::string LoggingHandler::IMG_NEXT("/images/next.gif");


LoggingHandler::LoggingHandler(CachingChannel& channel, const std::string& user, const std::string& pwdHash):
	_channel(channel),
	_user(user),
	_pwdHash(pwdHash)
{
}


LoggingHandler::~LoggingHandler()
{
}


void LoggingHandler::handleRequest(Poco::Net::HTTPServerRequest& request, Poco::Net::HTTPServerResponse& response)
{
	bool reauth = true;
	if (request.hasCredentials())
	{
		std::string cred;
		std::string scheme;
		try
		{
			Poco::Net::HTTPBasicCredentials cred(request);
			std::string user = cred.getUsername();
			std::istringstream istr(cred.getPassword(), std::ios::binary);
			Poco::MD5Engine md5;
			Poco::DigestOutputStream dos(md5);
			Poco::StreamCopier::copyStream(istr, dos);
			dos.close();
			std::string pwd = Poco::DigestEngine::digestToHex(md5.digest());
			reauth = (pwd != _pwdHash || _user != user);
		}
		catch (...)
		{
			reauth = true;
		}
	}
	if (reauth)
	{
		response.requireAuthentication(TITLE);
		response.send();
		return;
	}
	Poco::Net::HTMLForm form(request);
	std::string offsetStr;
	Poco::Net::NameValueCollection::ConstIterator it = form.find(OFFSET);
	if (it != form.end())
		offsetStr = it->second;
	int offset(0);
	Poco::NumberParser::tryParse(offsetStr, offset);
	std::string numEntriesStr;
	it = form.find(NUMENTRIES);
	if (it != form.end())
		numEntriesStr = it->second;
	int numEntries = DEFAULT_NUMENTRIES;
	Poco::NumberParser::tryParse(numEntriesStr, numEntries);
	std::vector<Poco::Message> messages;
	_channel.getMessages(messages, offset, numEntries);
	displayMessages(messages, offset, numEntries, _channel.getCurrentSize(), response);
}


void LoggingHandler::displayMessages(const std::vector<Poco::Message>& msg, int offset, int numEntries, std::size_t maxEntries, Poco::Net::HTTPServerResponse& response)
{
	std::ostream& out = response.send();
	out << "<html><head><title>POCO Logging Server</title>";
	out << "<link rel=\"stylesheet\" href=\"css/styles.css\" type=\"text/css\"/>";
	//out << "<link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS\" href=\"logs/LoggingServer.rss\" />";
	out << "</head>";
	out << "<body><div class=\"header\">";
	out << "<h1 class=\"software\">POCO Logging Server</h1>";
	out << "<h1 class=\"view\">Messages</h1></div>";
	out << "<div class=\"body\">";
	writeTable(msg, offset, numEntries, maxEntries, out);
	out << "</div>";
	out << "<div class=\"nav\"><a href=\"/\">Overview</a> | <a href=\"about.html\">About</a> | <a href=\"docs.html\">Documentation</a></div><p class=\"footer\">POCO Logging Server 1.0<br>Copyright &copy 2007, <a href=\"http://www.appinf.com\">Applied Informatics Software Engineering GmbH.</p></div></body></html>";
}


void LoggingHandler::writeTable(const std::vector<Poco::Message>& msg, int offset, int numEntries, std::size_t maxEntries, std::ostream& out)
{
	//Message: src, txt, prio, time, tid, threadname, pid
	out << "<table class=\"list\" cellpadding=\"1\" cellspacing=\"1\">";
	out << "<tr><th>&nbsp;</th><th>Source</th><th>Message</th><th>Priority</th><th>Time</th><th>ThreadID</th><th>ThreadName</th><th>ProcessID</th></tr>";
	std::vector<Poco::Message>::const_iterator it = msg.begin();
	std::vector<Poco::Message>::const_iterator itEnd = msg.end();
	bool even = true;
	for (; it != itEnd; ++it)
	{
		if (even)
			writeTableEntry(*it, EVEN, out);
		else
			writeTableEntry(*it, ODD, out);
		even = !even;
	}
	out << "</table>";
	// now write First, 2, 3, 4, Last all as link except the current one
	
	out << "<div class=\"nav\">";
	// else: we have at least First and last!
	int pages = static_cast<int>((maxEntries+numEntries-1)/numEntries);
	int curPage = offset/numEntries; //offset % numEntries == 0 must be true
	if (pages > 0 && curPage > 0)
	{
		// write PREVIOUS
		out << "<a href=\"" << LOGGING_DIR << "?" << OFFSET << "=" << ((curPage-1)*numEntries) << "&" << NUMENTRIES << "=" << numEntries << "\">";
		out << "<img src =\"" << IMG_PREVIOUS << "\" width=\"11\" height=\"11\" border=\"0\" valign=\"middle\" alt=\"previous\" title =\"previous\"/>&nbsp;";
		out <<"</a>";
		
	}
	for (int i = 0; i < pages; ++i)
	{
		if (i != curPage)
		{
			out << "<a href=\"" << LOGGING_DIR << "?" << OFFSET << "=" << (i*numEntries) << "&" << NUMENTRIES << "=" << numEntries << "\">" << (i+1) <<"&nbsp;</a>";
		}
		else
			out << (i+1) << "&nbsp;";
		if (i != pages-1)
			out << " | ";
	}
	if (pages > 0 && curPage < (pages-1))
	{
		// write NEXT
		out << "<a href=\"" << LOGGING_DIR << "?" << OFFSET << "=" << ((curPage+1)*numEntries) << "&" << NUMENTRIES << "=" << numEntries << "\">";
		out << "<img src =\"" << IMG_NEXT << "\" width=\"11\" height=\"11\" border=\"0\" valign=\"middle\" alt=\"next\" title =\"next\"/>";
		out <<"</a>";
	}
	out << "</div>";
}


void LoggingHandler::writeTableEntry(const Poco::Message& msg, const std::string& trClass, std::ostream& out)
{
	out << "<tr class=\"" << trClass << "\">";
	out << "<td><img src =\"" << image(msg.getPriority()) << "\" width=\"20\" height=\"20\" alt=\"" << convert(msg.getPriority()) << "\" title =\"" << convert(msg.getPriority()) << "\"/></td>";
	out << "<td>" << msg.getSource() << "</td>";
	out << "<td>" << msg.getText() << "</td>";
	out << "<td>" << convert(msg.getPriority()) << "</td>";
	out << "<td>" << Poco::DateTimeFormatter::format(msg.getTime(), Poco::DateTimeFormat::SORTABLE_FORMAT) << "</td>";
	out << "<td>" << msg.getTid() << "</td>";
	out << "<td>" << msg.getThread() << "</td>";
	out << "<td>" << msg.getPid() << "</td>";
	out << "</tr>";
}


std::string LoggingHandler::convert(Poco::Message::Priority prio)
{
	switch(prio)
	{
	case Poco::Message::PRIO_FATAL:
		return "Fatal";
	case Poco::Message::PRIO_CRITICAL:
		return "Critical";
	case Poco::Message::PRIO_ERROR:
		return "Error";
	case Poco::Message::PRIO_WARNING:
		return "Warning";
	case Poco::Message::PRIO_NOTICE:
		return "Notice";
	case Poco::Message::PRIO_INFORMATION:
		return "Information";
	case Poco::Message::PRIO_DEBUG:
		return "Debug";
	case Poco::Message::PRIO_TRACE:
		return "Trace";
	default:
		return "Unknown";
	}
}


std::string LoggingHandler::image(Poco::Message::Priority prio)
{
	static std::string prefix("/images/");
	switch(prio)
	{
	case Poco::Message::PRIO_FATAL:
		return prefix + "fatal.png";
	case Poco::Message::PRIO_CRITICAL:
		return prefix + "critical.png";
	case Poco::Message::PRIO_ERROR:
		return prefix + "error.png";
	case Poco::Message::PRIO_WARNING:
		return prefix + "warning.png";
	case Poco::Message::PRIO_NOTICE:
		return prefix + "notice.png";
	case Poco::Message::PRIO_INFORMATION:
		return prefix + "info.png";
	case Poco::Message::PRIO_DEBUG:
		return prefix + "debug.png";
	case Poco::Message::PRIO_TRACE:
		return prefix + "trace.png";
	default:
		return prefix + "shim.gif";
	}
}
