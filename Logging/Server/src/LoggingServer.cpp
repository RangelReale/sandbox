//
// LoggingServer.cpp
//
// $Id: //poco/Main/Logging/Server/src/LoggingServer.cpp#3 $
//
// Copyright (c) 2006-2008, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Net/HTTPServer.h"
#include "Poco/Net/HTTPRequestHandler.h"
#include "Poco/Net/HTTPRequestHandlerFactory.h"
#include "Poco/Net/HTTPServerParams.h"
#include "Poco/Net/HTTPServerRequest.h"
#include "Poco/Net/HTTPServerResponse.h"
#include "Poco/Net/HTTPServerParams.h"
#include "Poco/Net/HTTPSSessionInstantiator.h"
#include "Poco/Net/HTMLForm.h"
#include "Poco/Net/PartHandler.h"
#include "Poco/Net/MessageHeader.h"
#include "Poco/Net/ServerSocket.h"
#include "Poco/Net/SecureServerSocket.h"
#include "Poco/Net/RemoteSyslogListener.h"
#include "Poco/CountingStream.h"
#include "Poco/NullStream.h"
#include "Poco/StreamCopier.h"
#include "Poco/Exception.h"
#include "Poco/URI.h"
#include "Poco/SharedPtr.h"
#include "Poco/NumberFormatter.h"
#include "Poco/LoggingRegistry.h"
#include "Poco/Util/ServerApplication.h"
#include "Poco/Util/Option.h"
#include "Poco/Util/OptionException.h"
#include "Poco/Util/OptionSet.h"
#include "Poco/Util/HelpFormatter.h"
#include "LoggingHandler.h"
#include "DataRetriever.h"
#include "CachingChannel.h"
#include "DatabaseChannel.h"
#include "Poco/Logging/ParamFilter.h"
#include "Poco/Logging/PriorityFilter.h"
#include "Poco/Logging/RegExpFilter.h"
#include "Poco/Logging/RepetitionFilter.h"
#include "Poco/Logging/SourceFilter.h"
#include "Poco/Logging/TextFilter.h"
#include "Poco/Data/SQLite/Connector.h"
#include "Poco/Data/ODBC/Connector.h"
#include <iostream>


using Poco::Net::ServerSocket;
using Poco::Net::SecureServerSocket;
using Poco::Net::HTTPRequestHandler;
using Poco::Net::HTTPRequestHandlerFactory;
using Poco::Net::HTTPServer;
using Poco::Net::HTTPServerRequest;
using Poco::Net::HTTPServerResponse;
using Poco::Net::HTTPServerParams;
using Poco::Net::MessageHeader;
using Poco::Net::HTMLForm;
using Poco::Net::NameValueCollection;
using Poco::Util::ServerApplication;
using Poco::Util::Application;
using Poco::Util::Option;
using Poco::Util::OptionSet;
using Poco::Util::HelpFormatter;
using Poco::CountingInputStream;
using Poco::NullOutputStream;
using Poco::StreamCopier;

using namespace Poco::Logging;


class ServerRequestHandlerFactory: public HTTPRequestHandlerFactory
{
public:
	ServerRequestHandlerFactory(CachingChannel& channel, 
		const std::map<std::string, std::string>& aliases, 
		const std::string& user, 
		const std::string& pwdHash): 
		_channel(channel),
		_aliases(),
		_user(user),
		_pwdHash(pwdHash)
	{
		insertAliases(aliases);
		if (_aliases.find("") == _aliases.end())
		{
			Application::instance().logger().error("Missing root entry for HttpServer: add an alias entry that contains a <server>/</server> value");
			throw Poco::Util::MissingOptionException("Missing root entry for HttpServer: add an alias entry that contains a <server>/</server> value");
		}
	}

	HTTPRequestHandler* createRequestHandler(const HTTPServerRequest& request)
	{
		const std::string& uri = request.getURI();
		Poco::URI url(uri);
		if (url.getPath() == LoggingHandler::LOGGING_DIR || uri.empty() || uri == "/")
			return new LoggingHandler(_channel, _user, _pwdHash);

		return new DataRetriever(_aliases);
	}

	void insertAliases(const std::map<std::string, std::string>& alias)
	{
		std::map<std::string, std::string>::const_iterator it = alias.begin();
		std::map<std::string, std::string>::const_iterator itEnd = alias.end();
		for (; it != itEnd; ++it)
		{
			// assert that each server entry does NOT begin with a /
			// assert that each path entry is a directory
			
			std::string server = it->first;
			if (!server.empty() && server[0] == '/')
				server = server.substr(1);
			Poco::Path path(it->second);
			path.makeDirectory();
			path.makeAbsolute();
			_aliases.insert (std::make_pair(server, path));
		}
	}

private:
	CachingChannel& _channel;
	std::map<std::string, Poco::Path> _aliases;
	std::string _user;
	std::string _pwdHash;
};


class LoggingServer: public Poco::Util::ServerApplication
	/// The main application class.
	///
	/// This class handles command-line arguments and
	/// configuration files.
	/// Start the LoggingServer executable with the help
	/// option (/help on Windows, --help on Unix) for
	/// the available command line options.
{
public:
	LoggingServer(): _helpRequested(false)
	{
		Poco::Data::SQLite::Connector::registerConnector();
		Poco::Data::ODBC::Connector::registerConnector();
		ParamFilter::registerChannel();
		PriorityFilter::registerChannel();
		RegExpFilter::registerChannel();
		RepetitionFilter::registerChannel();
		SourceFilter::registerChannel();
		TextFilter::registerChannel();
		Poco::Net::RemoteSyslogListener::registerChannel();
		CachingChannel::registerChannel();
		DatabaseChannel::registerChannel();
	}
	
	~LoggingServer()
	{
	}

protected:
	void initialize(Application& self)
	{
		loadConfiguration(); // load default configuration files, if present
		ServerApplication::initialize(self);
	}
		
	void uninitialize()
	{
		ServerApplication::uninitialize();
	}

	void defineOptions(OptionSet& options)
	{
		ServerApplication::defineOptions(options);
		
		options.addOption(
			Option("help", "h", "display help information on command line arguments")
				.required(false)
				.repeatable(false));
	}

	void handleOption(const std::string& name, const std::string& value)
	{
		ServerApplication::handleOption(name, value);

		if (name == "help")
			_helpRequested = true;
	}

	void displayHelp()
	{
		HelpFormatter helpFormatter(options());
		helpFormatter.setCommand(commandName());
		helpFormatter.setUsage("OPTIONS");
		helpFormatter.setHeader("A web server that shows how to work with HTML forms.");
		helpFormatter.format(std::cout);
	}

	int main(const std::vector<std::string>& args)
	{
		if (_helpRequested)
		{
			displayHelp();
		}
		else
		{
			Poco::UInt16 port = (Poco::UInt16) config().getInt("LoggingServer.http.port");
			std::string user = config().getString("LoggingServer.http.user");
			std::string pwdHash = config().getString("LoggingServer.http.pwdhash");
			bool secure = config().getBool("MonitoringServer.http.secure", false);
			if (secure)
				Poco::Net::HTTPSSessionInstantiator::registerInstantiator();

			// get the caching channel from the Logging registry
			Poco::Channel* pChannel = Poco::LoggingRegistry::defaultRegistry().channelForName("cache");
			CachingChannel* pCache = dynamic_cast<CachingChannel*>(pChannel);
			if (!pCache)
			{
				logger().error("Missing CachingChannel (named \"cache\") in configuration file");
				return -1;
			}
			Poco::AutoPtr<CachingChannel> ptrChannel(pCache, true);
			pChannel = Poco::LoggingRegistry::defaultRegistry().channelForName("listener");
			
			if (!pChannel)
			{
				logger().error("Missing RemoteSyslogListener (named \"listener\") in configuration file");
				return -1;
			}
			pChannel->open();

			std::map<std::string, std::string> aliases;
			readAliases(aliases);
			
			if (!secure)
			{
				// set-up a server socket
				ServerSocket svs(port);
				// set-up a HTTPServer instance
				HTTPServer srv(new ServerRequestHandlerFactory(*ptrChannel, aliases, user, pwdHash), svs, new HTTPServerParams);
				// start the HTTPServer
				srv.start();
				// wait for CTRL-C or kill
				waitForTerminationRequest();
				// Stop the HTTPServer
				srv.stop();
			}
			else
			{
				SecureServerSocket svs(port);
				// set-up a HTTPServer instance
				HTTPServer srv(new ServerRequestHandlerFactory(*ptrChannel, aliases, user, pwdHash), svs, new HTTPServerParams);
				// start the HTTPServer
				srv.start();
				// wait for CTRL-C or kill
				waitForTerminationRequest();
				// Stop the HTTPServer
				srv.stop();
			}
		}
		return Application::EXIT_OK;
	}

	void readAliases(std::map<std::string, std::string>& aliases)
	{
		std::string prefix("LoggingServer.http.alias[");
		int idx = 0;
		
		std::string path(prefix+Poco::NumberFormatter::format(idx)+"]");
		while (config().hasProperty(path))
		{
			std::string server = config().getString(path+".server");
			std::string local = config().getString(path+".local");
			poco_assert (!local.empty());
			aliases.insert(std::make_pair(server, local));
			++idx;
			path = prefix+Poco::NumberFormatter::format(idx)+"]";
		}
	}
	
private:
	bool _helpRequested;
};


int main(int argc, char** argv)
{
	LoggingServer app;
	return app.run(argc, argv);
}
