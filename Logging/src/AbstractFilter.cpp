//
// AbstractFilter.cpp
//
// $Id: //poco/1.3/Logging/src/AbstractFilter.cpp#2 $
//
// Library: Logging
// Package: Filters
// Module:  AbstractFilter
//
// Copyright (c) 2006-2008, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Logging/AbstractFilter.h"
#include "Poco/LoggingRegistry.h"


using Poco::Channel;


namespace Poco {
namespace Logging {


AbstractFilter::AbstractFilter()
{
}


AbstractFilter::AbstractFilter(Poco::Channel* pPassChannel):
	_pPassNext(pPassChannel, true)
{
}


AbstractFilter::AbstractFilter(Poco::Channel* pPassChannel, Poco::Channel* pFailChannel):
	_pPassNext(pPassChannel, true),
	_pFailNext(pFailChannel, true)
{
}


AbstractFilter::~AbstractFilter()
{
}


void AbstractFilter::setPassChannel(Poco::Channel* pChannel)
{
	_pPassNext = Poco::AutoPtr<Poco::Channel>(pChannel, true);
}


Poco::Channel* AbstractFilter::getPassChannel() const
{
	return const_cast<Poco::Channel*>(_pPassNext.get());
}


void AbstractFilter::setFailChannel(Poco::Channel* pChannel)
{
	_pFailNext = Poco::AutoPtr<Poco::Channel>(pChannel, true);
}


Poco::Channel* AbstractFilter::getFailChannel() const
{
	return const_cast<Poco::Channel*>(_pFailNext.get());
}


void AbstractFilter::log(const Poco::Message& msg)
{
	if (_pPassNext)
	{
		_pPassNext->log(msg);
	}
}


void AbstractFilter::logFail(const Poco::Message& msg)
{
	if (_pFailNext)
	{
		_pFailNext->log(msg);
	}
}


void AbstractFilter::setProperty(const std::string& name, const std::string& value)
{
	if (name == "passChannel")
		setPassChannel(Poco::LoggingRegistry::defaultRegistry().channelForName(value));
	else if (name == "failChannel")
		setFailChannel(Poco::LoggingRegistry::defaultRegistry().channelForName(value));		
	else
		Channel::setProperty(name, value);
}


} } // namespace Poco::Logging
