//
// RegExpFilter.cpp
//
// $Id: //poco/1.3/Logging/src/RegExpFilter.cpp#2 $
//
// Library: Logging
// Package: Filters
// Module:  RegExpFilter
//
// Copyright (c) 2006-2009, Applied Informatics Software Engineering GmbH.
// All rights reserved.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Logging/RegExpFilter.h"
#include "Poco/StringTokenizer.h"
#include "Poco/LoggingFactory.h"
#include "Poco/Instantiator.h"


using Poco::RegularExpression;
using Poco::StringTokenizer;


namespace Poco {
namespace Logging {


RegExpFilter::RegExpFilter():
	_options(defaultOptions()),
	_pExpr(0)
{
}


RegExpFilter::RegExpFilter(const std::string& expr):
	_options(defaultOptions()),
	_pExpr(0)
{
	setExpression(expr);
}


RegExpFilter::RegExpFilter(const std::string& expr, int options):
	_options(options),
	_pExpr(0)
{
	setExpression(expr);
}


RegExpFilter::~RegExpFilter()
{
	delete _pExpr;
}


void RegExpFilter::setExpression(const std::string& expr)
{
	_pExpr = new RegularExpression(expr, _options);
	_expr = expr;
}

	
const std::string& RegExpFilter::getExpression() const
{
	return _expr;
}


void RegExpFilter::setOptions(int options)
{
	_options = options;
	setExpression(_expr);
}


int RegExpFilter::getOptions() const
{
	return _options;
}


void RegExpFilter::setProperty(const std::string& name, const std::string& value)
{
	if (name == "expr")
	{
		setExpression(value);
	}
	else if (name == "options")
	{
		_options = defaultOptions();
		StringTokenizer tokenizer(value, "|+:;,", StringTokenizer::TOK_IGNORE_EMPTY | StringTokenizer::TOK_TRIM);
		for (StringTokenizer::Iterator it = tokenizer.begin(); it != tokenizer.end(); ++it)
		{
			if (*it == "unanchored")
				_options &= ~RegularExpression::RE_ANCHORED;
			else if (*it == "caseless")
				_options |= RegularExpression::RE_CASELESS;
		}
	}
	else AbstractFilter::setProperty(name, value);	
}

	
std::string RegExpFilter::getProperty(const std::string& name)
{
	if (name == "expr")
	{
		return getExpression();
	}
	else if (name == "options")
	{
		std::string result;
		if ((_options & RegularExpression::RE_ANCHORED) == 0)
		{
			result += "unanchored";
		}
		if (_options & RegularExpression::RE_CASELESS)
		{
			if (!result.empty()) result += ", ";
			result += "caseless";
		}
		return result;
	}
	else return AbstractFilter::getProperty(name);
}


bool RegExpFilter::match(const std::string& subject) const
{
	if (_pExpr)
		return _pExpr->match(subject, 0);
	else
		return true;
}


int RegExpFilter::defaultOptions()
{
	return RegularExpression::RE_ANCHORED | RegularExpression::RE_UTF8 | RegularExpression::RE_NO_UTF8_CHECK;
}


void RegExpFilter::registerChannel()
{
	Poco::LoggingFactory::defaultFactory().registerChannelClass("RegExpFilter", new Poco::Instantiator<RegExpFilter, Poco::Channel>);
}


} } // namespace Poco::Logging
