//
// RepetitionFilter.cpp
//
// $Id: //poco/Main/Logging/src/RepetitionFilter.cpp#4 $
//
// Library: Logging
// Package: Filters
// Module:  RepetitionFilter
//
// Copyright (c) 2006-2008, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Logging/RepetitionFilter.h"
#include "Poco/Timespan.h"
#include "Poco/NumberFormatter.h"
#include "Poco/NumberParser.h"
#include "Poco/LoggingFactory.h"
#include "Poco/Instantiator.h"
#include <algorithm>


namespace Poco {
namespace Logging {


//
// MessageEntry
//


MessageEntry::MessageEntry():
	_time(0)
{
}


MessageEntry::MessageEntry(const Poco::Message& msg):
	_source(msg.getSource()),
	_text(msg.getText()),
	_time(msg.getTime())
{
}

	
MessageEntry::MessageEntry(const MessageEntry& entry):
	_source(entry._source),
	_text(entry._text),
	_time(entry._time)
{
}

	
MessageEntry::~MessageEntry()
{
}

	
MessageEntry& MessageEntry::operator = (const MessageEntry& entry)
{
	MessageEntry tmp(entry);
	swap(tmp);
	return *this;
}


void MessageEntry::swap(MessageEntry& entry)
{
	using std::swap;
	swap(_source, entry._source);
	swap(_text, entry._text);
	swap(_time, entry._time);
}

	
bool MessageEntry::operator == (const MessageEntry& entry)
{
	return _source == entry._source && _text == entry._text;
}

	
bool MessageEntry::operator != (const MessageEntry& entry)
{
	return _source != entry._source || _text != entry._text;
}


inline Poco::Timestamp MessageEntry::getTime() const
{
	return _time;
}


inline void MessageEntry::setTime(Poco::Timestamp time)
{
	_time = time;
}

	
Poco::UInt32 MessageEntry::hash() const
{
	Poco::UInt32 result = 0;
	std::string::const_iterator it  = _source.begin();
	std::string::const_iterator end = _source.end();
	while (it != end)
	{
		result = result * 0xf4243 ^ *it++;
	}
	it  = _text.begin();
	end = _text.end();
	while (it != end)
	{
		result = result * 0xf4243 ^ *it++;
	}
	return result;
}


Poco::UInt32 hash(const MessageEntry& entry)
{
	return entry.hash();
}


//
// RepetitionFilter
//


RepetitionFilter::RepetitionFilter():
	_interval(10),
	_lastFail(0)
{
}


RepetitionFilter::RepetitionFilter(int interval):
	_interval(interval),
	_lastFail(0)
{
}


RepetitionFilter::~RepetitionFilter()
{
}


void RepetitionFilter::setInterval(int seconds)
{
	_interval = seconds;
}

	
int RepetitionFilter::getInterval() const
{
	return _interval;
}


void RepetitionFilter::setProperty(const std::string& name, const std::string& value)
{
	if (name == "interval")
		_interval = Poco::NumberParser::parse(value);
	else
		AbstractFilter::setProperty(name, value);
}


std::string RepetitionFilter::getProperty(const std::string& name)
{
	if (name == "interval")
		return Poco::NumberFormatter::format(_interval);
	else
		return AbstractFilter::getProperty(name);
}


void RepetitionFilter::log(const Poco::Message& msg)
{
	Poco::FastMutex::ScopedLock lock(_mutex);
	
	bool pass = true;	
	std::pair<MessageSet::Iterator, bool> res = _set.insert(MessageEntry(msg));
	if (!res.second)
	{
		Poco::Timespan span = msg.getTime() - res.first->getTime();
		if (span.totalSeconds() < _interval)
		{
			pass = false;
			res.first->setTime(msg.getTime());
		}
	}
	
	if (pass)
	{
		AbstractFilter::log(msg);
		Poco::Timespan elapsed(_lastFail.elapsed());
		if (elapsed.totalSeconds() > _interval)
			_set.clear();
	}
	else _lastFail.update();
}


void RepetitionFilter::registerChannel()
{
	Poco::LoggingFactory::defaultFactory().registerChannelClass("RepetitionFilter", new Poco::Instantiator<RepetitionFilter, Poco::Channel>);
}

} } // namespace Poco::Logging
