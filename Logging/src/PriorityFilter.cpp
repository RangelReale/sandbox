//
// PriorityFilter.cpp
//
// $Id: //poco/1.3/Logging/src/PriorityFilter.cpp#2 $
//
// Library: Logging
// Package: Filters
// Module:  PriorityFilter
//
// Copyright (c) 2006-2009, Applied Informatics Software Engineering GmbH.
// All rights reserved.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Logging/PriorityFilter.h"
#include "Poco/LoggingFactory.h"
#include "Poco/Instantiator.h"


using Poco::Message;


namespace Poco {
namespace Logging {


PriorityFilter::PriorityFilter():
	_minPrio(Message::PRIO_TRACE),
	_maxPrio(Message::PRIO_FATAL)
{
}


PriorityFilter::PriorityFilter(Poco::Message::Priority minPrio, Poco::Message::Priority maxPrio):
	_minPrio(minPrio),
	_maxPrio(maxPrio)
{
}


PriorityFilter::~PriorityFilter()
{
}


void PriorityFilter::log(const Poco::Message& msg)
{
	if (msg.getPriority() >= _maxPrio && msg.getPriority() <= _minPrio)
	{
		AbstractFilter::log(msg);
	}
	else
	{
		logFail(msg);
	}
}


void PriorityFilter::setProperty(const std::string& name, const std::string& value)
{
	if (name == "min")
		_minPrio = mapPriority(value);
	else if (name == "max")
		_maxPrio = mapPriority(value);
	else
		AbstractFilter::setProperty(name, value);
}


Poco::Message::Priority PriorityFilter::mapPriority(const std::string& prio)
{
	if (prio == "fatal")
		return Message::PRIO_FATAL;
	else if (prio == "critical")
		return Message::PRIO_CRITICAL;
	else if (prio == "error")
		return Message::PRIO_ERROR;
	else if (prio == "warning")
		return Message::PRIO_WARNING;
	else if (prio == "notice")
		return Message::PRIO_NOTICE;
	else if (prio == "information")
		return Message::PRIO_INFORMATION;
	else if (prio == "debug")
		return Message::PRIO_DEBUG;
	else if (prio == "trace")
		return Message::PRIO_TRACE;
	else
		throw InvalidArgumentException("Not a valid log priority", prio);
}


void PriorityFilter::registerChannel()
{
	Poco::LoggingFactory::defaultFactory().registerChannelClass("PriorityFilter", new Poco::Instantiator<PriorityFilter, Poco::Channel>);
}


} } // namespace Poco::Logging
