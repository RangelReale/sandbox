//
// RepetitionFilter.h
//
// $Id: //poco/1.3/Logging/include/Poco/Logging/RepetitionFilter.h#3 $
//
// Library: Logging
// Package: Filters
// Module:  RepetitionFilter
//
// Definition of the RepetitionFilter class.
//
// Copyright (c) 2006-2008, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef Logging_RepetitionFilter_INCLUDED
#define Logging_RepetitionFilter_INCLUDED


#include "Poco/Logging/Logging.h"
#include "Poco/Logging/AbstractFilter.h"
#include "Poco/LinearHashTable.h"
#include "Poco/Message.h"
#include "Poco/Timestamp.h"
#include "Poco/Mutex.h"


namespace Poco {
namespace Logging {


class Logging_API MessageEntry
{
public:
	MessageEntry();
		/// Creates an empty MessageEntry.
		
	MessageEntry(const Poco::Message& msg);
		/// Creates the MessageEntry from a Poco::Message.
		
	MessageEntry(const MessageEntry& key);
		/// Creates the MessageEntry by copying another one.
		
	~MessageEntry();
		/// Destroys the MessageEntry.
		
	MessageEntry& operator = (const MessageEntry& key);
		/// Assigns a MessageEntry.
	
	void swap(MessageEntry& key);
		/// Exchanges the MessageEntry with another one.
		
	bool operator == (const MessageEntry& key);
		/// Tests for equality.
		
	bool operator != (const MessageEntry& key);
		/// Tests for inequality.
		
	std::size_t hash() const;
		/// Computes a hash value for the MessageEntry.
	
	Poco::Timestamp getTime() const;
		/// Returns the time.
		
	void setTime(Poco::Timestamp time);
		// Sets the time.

	static void registerChannel();
		/// Registers the channel with the global LoggingFactory.
	
private:
	std::string     _source;
	std::string     _text;
	Poco::Timestamp _time;
};


} // namespace Loging


template <>
struct Hash<Poco::Logging::MessageEntry>
{
	std::size_t operator () (const Poco::Logging::MessageEntry& value) const
	{
		return value.hash();
	}
};


namespace Logging {


class Logging_API RepetitionFilter: public AbstractFilter
	/// This filter removes repeated messages.
	///
	/// If the same message occurs more than once within
	/// a given interval, all but the first message are
	/// removed.
{
public:
	RepetitionFilter();
		/// Creates the RepetitionFilter with a default interval of 10 seconds.

	RepetitionFilter(int interval);
		/// Creates the RepetitionFilter, using the given interval.

	~RepetitionFilter();
		/// Destroys the RepetitionFilter.

	void setInterval(int seconds);
		/// Sets the interval.
		
	int getInterval() const;
		/// Returns the interval.

	void setProperty(const std::string& name, const std::string& value);
		/// Only the "interval" property is supported.

	std::string getProperty(const std::string& name);
		/// Only the "interval" property is supported.

	void log(const Poco::Message& msg);
		/// Passes the message on to the pass channel,
		/// if one has been set.

	static void registerChannel();
		/// Registers the channel with the global LoggingFactory.

private:
	typedef Poco::LinearHashTable<MessageEntry> MessageSet;
	int _interval;
	MessageSet _set;
	Poco::Timestamp _lastFail;
	Poco::FastMutex _mutex;
};


} } // namespace Poco::Logging


#endif // Logging_RepetitionFilter_INCLUDED
