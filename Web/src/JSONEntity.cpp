//
// JSONEntity.cpp
//
// $Id: //poco/Main/Web/src/JSONEntity.cpp#7 $
//
// Library: Web
// Package: Configuration
// Module:  JSONEntity
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Web/JSONEntity.h"
//#include "Poco/Web/JSON_parser.h"
#include "Poco/Exception.h"


using Poco::Dynamic::Var;
using Poco::InvalidArgumentException;


namespace Poco {
namespace Web {


JSONEntity::JSONEntity(): _type(JSON_T_NONE)
{
}

/*
JSONEntity::JSONEntity(Type type, JSON_value* pValue): _type(type)
{
	switch (type)
	{
		case JSON_T_INTEGER:
			poco_check_ptr (pValue);
			_value = pValue->vu.integer_value;	break;
		case JSON_T_FLOAT:
			poco_check_ptr (pValue);
			_value = pValue->vu.float_value; break;
		case JSON_T_STRING:
		case JSON_T_KEY:
			poco_check_ptr (pValue);
			_value = pValue->vu.str.value;
			break;
		default:
			break;
	}
}
*/

JSONEntity::JSONEntity(Type type, const Var& value): _type(type)
{
	switch (type)
	{
		case JSON_T_INTEGER:
			//_value = value->vu.integer_value;	break;
		case JSON_T_FLOAT:
			//_value = value->vu.float_value; break;
		case JSON_T_STRING:
		case JSON_T_KEY:
			_value = value;//->vu.str.value;
			break;
		default:
			poco_assert (value.isEmpty());
			break;
	}
}


JSONEntity::~JSONEntity()
{
}


} } // namespace Poco::Web
